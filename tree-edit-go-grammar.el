;;; tree-edit-go-grammar.el --- Description -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2021 Ethan Leba
;; Author: Ethan Leba <ethanleba5@gmail.com>
;; SPDX-License-Identifier: GPL-3.0-or-later
;; Version: 0.1.0
;; Package-Requires: ((emacs "27.0"))
;; Homepage: https://github.com/ethan-leba/tree-edit
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:
;;
;; This is an autogenerated file from 'tree-edit-generate-grammars.el' that contains the grammar
;; and other precalculations for the go language. Please do not manually modify this!
;;
;;; Code:
(require 'mode-local)
(require 'tree-edit)

(setq-mode-local
 go-mode

 tree-edit-grammar
 '
((source_file (type . "REPEAT") (content (type . "CHOICE") (members ((type . "SEQ") (members ((type . "CHOICE") (members ((type . "CHOICE") (members ((type . "SYMBOL") (name . const_declaration)) ((type . "SYMBOL") (name . type_declaration)) ((type . "SYMBOL") (name . var_declaration)))) ((type . "CHOICE") (members ((type . "CHOICE") (members ((type . "SYMBOL") (name . unary_expression)) ((type . "SYMBOL") (name . binary_expression)) ((type . "SYMBOL") (name . selector_expression)) ((type . "SYMBOL") (name . index_expression)) ((type . "SYMBOL") (name . slice_expression)) ((type . "SYMBOL") (name . call_expression)) ((type . "SYMBOL") (name . type_assertion_expression)) ((type . "SYMBOL") (name . type_conversion_expression)) ((type . "SYMBOL") (name . identifier)) ((type . "ALIAS") (content (type . "CHOICE") (members ((type . "STRING") (value . "new")) ((type . "STRING") (value . "make")))) (named . t) (value . identifier)) ((type . "SYMBOL") (name . composite_literal)) ((type . "SYMBOL") (name . func_literal)) ((type . "CHOICE") (members ((type . "SYMBOL") (name . raw_string_literal)) ((type . "SYMBOL") (name . interpreted_string_literal)))) ((type . "SYMBOL") (name . int_literal)) ((type . "SYMBOL") (name . float_literal)) ((type . "SYMBOL") (name . imaginary_literal)) ((type . "SYMBOL") (name . rune_literal)) ((type . "SYMBOL") (name)) ((type . "SYMBOL") (name . true)) ((type . "SYMBOL") (name . false)) ((type . "SYMBOL") (name . parenthesized_expression)))) ((type . "SYMBOL") (name . send_statement)) ((type . "SYMBOL") (name . inc_statement)) ((type . "SYMBOL") (name . dec_statement)) ((type . "SYMBOL") (name . assignment_statement)) ((type . "SYMBOL") (name . short_var_declaration)))) ((type . "SYMBOL") (name . return_statement)) ((type . "SYMBOL") (name . go_statement)) ((type . "SYMBOL") (name . defer_statement)) ((type . "SYMBOL") (name . if_statement)) ((type . "SYMBOL") (name . for_statement)) ((type . "SYMBOL") (name . expression_switch_statement)) ((type . "SYMBOL") (name . type_switch_statement)) ((type . "SYMBOL") (name . select_statement)) ((type . "SYMBOL") (name . labeled_statement)) ((type . "SYMBOL") (name . fallthrough_statement)) ((type . "SYMBOL") (name . break_statement)) ((type . "SYMBOL") (name . continue_statement)) ((type . "SYMBOL") (name . goto_statement)) ((type . "SYMBOL") (name . block)) ((type . "SYMBOL") (name . empty_statement)))) ((type . "CHOICE") (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";")))))) ((type . "SEQ") (members ((type . "CHOICE") (members ((type . "SYMBOL") (name . package_clause)) ((type . "SYMBOL") (name . function_declaration)) ((type . "SYMBOL") (name . method_declaration)) ((type . "SYMBOL") (name . import_declaration)))) ((type . "CHOICE") (members ((type . "CHOICE") (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";")))) ((type . "BLANK")))))))))
 (_top_level_declaration (type . "CHOICE")
			 (members ((type . "SYMBOL")
				   (name . package_clause))
				  ((type . "SYMBOL")
				   (name . function_declaration))
				  ((type . "SYMBOL")
				   (name . method_declaration))
				  ((type . "SYMBOL")
				   (name . import_declaration))))
 (package_clause (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "package"))
			  ((type . "ALIAS")
			   (content (type . "SYMBOL") (name . identifier))
			   (named . t)
			   (value . package_identifier))))
 (import_declaration (type . "SEQ")
		     (members ((type . "STRING")
			       (value . "import"))
			      ((type . "CHOICE")
			       (members ((type . "SYMBOL")
					 (name . import_spec))
					((type . "SYMBOL")
					 (name . import_spec_list))))))
 (import_spec (type . "SEQ")
	      (members ((type . "CHOICE")
			(members ((type . "FIELD")
				  (name . "name")
				  (content (type . "CHOICE")
					   (members ((type . "SYMBOL")
						     (name . dot))
						    ((type . "SYMBOL")
						     (name . blank_identifier))
						    ((type . "ALIAS")
						     (content (type . "SYMBOL")
							      (name . identifier))
						     (named . t)
						     (value . package_identifier)))))
				 ((type . "BLANK"))))
		       ((type . "FIELD")
			(name . "path")
			(content (type . "CHOICE")
				 (members ((type . "SYMBOL")
					   (name . raw_string_literal))
					  ((type . "SYMBOL")
					   (name . interpreted_string_literal)))))))
 (dot (type . "STRING") (value . "."))
 (blank_identifier (type . "STRING") (value . "_"))
 (import_spec_list (type . "SEQ")
		   (members ((type . "STRING") (value . "(")) ((type . "REPEAT") (content (type . "SEQ") (members ((type . "SYMBOL") (name . import_spec)) ((type . "CHOICE") (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";"))))))) ((type . "STRING") (value . ")"))))
 (_declaration (type . "CHOICE")
	       (members ((type . "SYMBOL")
			 (name . const_declaration))
			((type . "SYMBOL")
			 (name . type_declaration))
			((type . "SYMBOL")
			 (name . var_declaration))))
 (const_declaration (type . "SEQ")
		    (members ((type . "STRING")
			      (value . "const"))
			     ((type . "CHOICE")
			      (members ((type . "SYMBOL")
					(name . const_spec))
				       ((type . "SEQ")
					(members ((type . "STRING") (value . "(")) ((type . "REPEAT") (content (type . "SEQ") (members ((type . "SYMBOL") (name . const_spec)) ((type . "CHOICE") (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";"))))))) ((type . "STRING") (value . ")"))))))))
 (const_spec (type . "PREC_LEFT")
	     (value . 0)
	     (content (type . "SEQ")
		      (members ((type . "FIELD")
				(name . "name")
				(content (type . "SEQ")
					 (members ((type . "SYMBOL")
						   (name . identifier))
						  ((type . "REPEAT")
						   (content (type . "SEQ")
							    (members ((type . "STRING")
								      (value . ","))
								     ((type . "SYMBOL")
								      (name . identifier))))))))
			       ((type . "CHOICE")
				(members ((type . "SEQ")
					  (members ((type . "CHOICE")
						    (members ((type . "FIELD")
							      (name . "type")
							      (content (type . "CHOICE")
								       (members ((type . "CHOICE")
										 (members ((type . "PREC_DYNAMIC")
											   (value . -1)
											   (content (type . "ALIAS")
												    (content (type . "SYMBOL")
													     (name . identifier))
												    (named . t)
												    (value . type_identifier)))
											  ((type . "SYMBOL")
											   (name . qualified_type))
											  ((type . "SYMBOL")
											   (name . pointer_type))
											  ((type . "SYMBOL")
											   (name . struct_type))
											  ((type . "SYMBOL")
											   (name . interface_type))
											  ((type . "SYMBOL")
											   (name . array_type))
											  ((type . "SYMBOL")
											   (name . slice_type))
											  ((type . "SYMBOL")
											   (name . map_type))
											  ((type . "SYMBOL")
											   (name . channel_type))
											  ((type . "SYMBOL")
											   (name . function_type))))
										((type . "SYMBOL")
										 (name . parenthesized_type)))))
							     ((type . "BLANK"))))
						   ((type . "STRING")
						    (value . "="))
						   ((type . "FIELD")
						    (name . "value")
						    (content (type . "SYMBOL")
							     (name . expression_list)))))
					 ((type . "BLANK")))))))
 (var_declaration (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "var"))
			   ((type . "CHOICE")
			    (members ((type . "SYMBOL")
				      (name . var_spec))
				     ((type . "SEQ")
				      (members ((type . "STRING") (value . "(")) ((type . "REPEAT") (content (type . "SEQ") (members ((type . "SYMBOL") (name . var_spec)) ((type . "CHOICE") (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";"))))))) ((type . "STRING") (value . ")"))))))))
 (var_spec (type . "SEQ")
	   (members ((type . "FIELD")
		     (name . "name")
		     (content (type . "SEQ")
			      (members ((type . "SYMBOL")
					(name . identifier))
				       ((type . "REPEAT")
					(content (type . "SEQ")
						 (members ((type . "STRING")
							   (value . ","))
							  ((type . "SYMBOL")
							   (name . identifier))))))))
		    ((type . "CHOICE")
		     (members ((type . "SEQ")
			       (members ((type . "FIELD")
					 (name . "type")
					 (content (type . "CHOICE")
						  (members ((type . "CHOICE")
							    (members ((type . "PREC_DYNAMIC")
								      (value . -1)
								      (content (type . "ALIAS")
									       (content (type . "SYMBOL")
											(name . identifier))
									       (named . t)
									       (value . type_identifier)))
								     ((type . "SYMBOL")
								      (name . qualified_type))
								     ((type . "SYMBOL")
								      (name . pointer_type))
								     ((type . "SYMBOL")
								      (name . struct_type))
								     ((type . "SYMBOL")
								      (name . interface_type))
								     ((type . "SYMBOL")
								      (name . array_type))
								     ((type . "SYMBOL")
								      (name . slice_type))
								     ((type . "SYMBOL")
								      (name . map_type))
								     ((type . "SYMBOL")
								      (name . channel_type))
								     ((type . "SYMBOL")
								      (name . function_type))))
							   ((type . "SYMBOL")
							    (name . parenthesized_type)))))
					((type . "CHOICE")
					 (members ((type . "SEQ")
						   (members ((type . "STRING")
							     (value . "="))
							    ((type . "FIELD")
							     (name . "value")
							     (content (type . "SYMBOL")
								      (name . expression_list)))))
						  ((type . "BLANK"))))))
			      ((type . "SEQ")
			       (members ((type . "STRING")
					 (value . "="))
					((type . "FIELD")
					 (name . "value")
					 (content (type . "SYMBOL")
						  (name . expression_list)))))))))
 (function_declaration (type . "PREC_RIGHT")
		       (value . 1)
		       (content (type . "SEQ")
				(members ((type . "STRING")
					  (value . "func"))
					 ((type . "FIELD")
					  (name . "name")
					  (content (type . "SYMBOL")
						   (name . identifier)))
					 ((type . "FIELD")
					  (name . "parameters")
					  (content (type . "SYMBOL")
						   (name . parameter_list)))
					 ((type . "FIELD")
					  (name . "result")
					  (content (type . "CHOICE")
						   (members ((type . "CHOICE")
							     (members ((type . "SYMBOL")
								       (name . parameter_list))
								      ((type . "CHOICE")
								       (members ((type . "PREC_DYNAMIC")
										 (value . -1)
										 (content (type . "ALIAS")
											  (content (type . "SYMBOL")
												   (name . identifier))
											  (named . t)
											  (value . type_identifier)))
										((type . "SYMBOL")
										 (name . qualified_type))
										((type . "SYMBOL")
										 (name . pointer_type))
										((type . "SYMBOL")
										 (name . struct_type))
										((type . "SYMBOL")
										 (name . interface_type))
										((type . "SYMBOL")
										 (name . array_type))
										((type . "SYMBOL")
										 (name . slice_type))
										((type . "SYMBOL")
										 (name . map_type))
										((type . "SYMBOL")
										 (name . channel_type))
										((type . "SYMBOL")
										 (name . function_type))))))
							    ((type . "BLANK")))))
					 ((type . "FIELD")
					  (name . "body")
					  (content (type . "CHOICE")
						   (members ((type . "SYMBOL")
							     (name . block))
							    ((type . "BLANK"))))))))
 (method_declaration (type . "PREC_RIGHT")
		     (value . 1)
		     (content (type . "SEQ")
			      (members ((type . "STRING")
					(value . "func"))
				       ((type . "FIELD")
					(name . "receiver")
					(content (type . "SYMBOL")
						 (name . parameter_list)))
				       ((type . "FIELD")
					(name . "name")
					(content (type . "ALIAS")
						 (content (type . "SYMBOL")
							  (name . identifier))
						 (named . t)
						 (value . field_identifier)))
				       ((type . "FIELD")
					(name . "parameters")
					(content (type . "SYMBOL")
						 (name . parameter_list)))
				       ((type . "FIELD")
					(name . "result")
					(content (type . "CHOICE")
						 (members ((type . "CHOICE")
							   (members ((type . "SYMBOL")
								     (name . parameter_list))
								    ((type . "CHOICE")
								     (members ((type . "PREC_DYNAMIC")
									       (value . -1)
									       (content (type . "ALIAS")
											(content (type . "SYMBOL")
												 (name . identifier))
											(named . t)
											(value . type_identifier)))
									      ((type . "SYMBOL")
									       (name . qualified_type))
									      ((type . "SYMBOL")
									       (name . pointer_type))
									      ((type . "SYMBOL")
									       (name . struct_type))
									      ((type . "SYMBOL")
									       (name . interface_type))
									      ((type . "SYMBOL")
									       (name . array_type))
									      ((type . "SYMBOL")
									       (name . slice_type))
									      ((type . "SYMBOL")
									       (name . map_type))
									      ((type . "SYMBOL")
									       (name . channel_type))
									      ((type . "SYMBOL")
									       (name . function_type))))))
							  ((type . "BLANK")))))
				       ((type . "FIELD")
					(name . "body")
					(content (type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . block))
							  ((type . "BLANK"))))))))
 (parameter_list (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "("))
			  ((type . "CHOICE")
			   (members ((type . "SEQ")
				     (members ((type . "CHOICE")
					       (members ((type . "SEQ")
							 (members ((type . "CHOICE")
								   (members ((type . "SYMBOL")
									     (name . parameter_declaration))
									    ((type . "SYMBOL")
									     (name . variadic_parameter_declaration))))
								  ((type . "REPEAT")
								   (content (type . "SEQ")
									    (members ((type . "STRING")
										      (value . ","))
										     ((type . "CHOICE")
										      (members ((type . "SYMBOL")
												(name . parameter_declaration))
											       ((type . "SYMBOL")
												(name . variadic_parameter_declaration)))))))))
							((type . "BLANK"))))
					      ((type . "CHOICE")
					       (members ((type . "STRING")
							 (value . ","))
							((type . "BLANK"))))))
				    ((type . "BLANK"))))
			  ((type . "STRING")
			   (value . ")"))))
 (parameter_declaration (type . "SEQ")
			(members ((type . "FIELD")
				  (name . "name")
				  (content (type . "CHOICE")
					   (members ((type . "SEQ")
						     (members ((type . "SYMBOL")
							       (name . identifier))
							      ((type . "REPEAT")
							       (content (type . "SEQ")
									(members ((type . "STRING")
										  (value . ","))
										 ((type . "SYMBOL")
										  (name . identifier)))))))
						    ((type . "BLANK")))))
				 ((type . "FIELD")
				  (name . "type")
				  (content (type . "CHOICE")
					   (members ((type . "CHOICE")
						     (members ((type . "PREC_DYNAMIC")
							       (value . -1)
							       (content (type . "ALIAS")
									(content (type . "SYMBOL")
										 (name . identifier))
									(named . t)
									(value . type_identifier)))
							      ((type . "SYMBOL")
							       (name . qualified_type))
							      ((type . "SYMBOL")
							       (name . pointer_type))
							      ((type . "SYMBOL")
							       (name . struct_type))
							      ((type . "SYMBOL")
							       (name . interface_type))
							      ((type . "SYMBOL")
							       (name . array_type))
							      ((type . "SYMBOL")
							       (name . slice_type))
							      ((type . "SYMBOL")
							       (name . map_type))
							      ((type . "SYMBOL")
							       (name . channel_type))
							      ((type . "SYMBOL")
							       (name . function_type))))
						    ((type . "SYMBOL")
						     (name . parenthesized_type)))))))
 (variadic_parameter_declaration (type . "SEQ")
				 (members ((type . "FIELD")
					   (name . "name")
					   (content (type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . identifier))
							     ((type . "BLANK")))))
					  ((type . "STRING")
					   (value . "..."))
					  ((type . "FIELD")
					   (name . "type")
					   (content (type . "CHOICE")
						    (members ((type . "CHOICE")
							      (members ((type . "PREC_DYNAMIC")
									(value . -1)
									(content (type . "ALIAS")
										 (content (type . "SYMBOL")
											  (name . identifier))
										 (named . t)
										 (value . type_identifier)))
								       ((type . "SYMBOL")
									(name . qualified_type))
								       ((type . "SYMBOL")
									(name . pointer_type))
								       ((type . "SYMBOL")
									(name . struct_type))
								       ((type . "SYMBOL")
									(name . interface_type))
								       ((type . "SYMBOL")
									(name . array_type))
								       ((type . "SYMBOL")
									(name . slice_type))
								       ((type . "SYMBOL")
									(name . map_type))
								       ((type . "SYMBOL")
									(name . channel_type))
								       ((type . "SYMBOL")
									(name . function_type))))
							     ((type . "SYMBOL")
							      (name . parenthesized_type)))))))
 (type_alias (type . "SEQ")
	     (members ((type . "FIELD")
		       (name . "name")
		       (content (type . "ALIAS")
				(content (type . "SYMBOL")
					 (name . identifier))
				(named . t)
				(value . type_identifier)))
		      ((type . "STRING")
		       (value . "="))
		      ((type . "FIELD")
		       (name . "type")
		       (content (type . "CHOICE")
				(members ((type . "CHOICE")
					  (members ((type . "PREC_DYNAMIC")
						    (value . -1)
						    (content (type . "ALIAS")
							     (content (type . "SYMBOL")
								      (name . identifier))
							     (named . t)
							     (value . type_identifier)))
						   ((type . "SYMBOL")
						    (name . qualified_type))
						   ((type . "SYMBOL")
						    (name . pointer_type))
						   ((type . "SYMBOL")
						    (name . struct_type))
						   ((type . "SYMBOL")
						    (name . interface_type))
						   ((type . "SYMBOL")
						    (name . array_type))
						   ((type . "SYMBOL")
						    (name . slice_type))
						   ((type . "SYMBOL")
						    (name . map_type))
						   ((type . "SYMBOL")
						    (name . channel_type))
						   ((type . "SYMBOL")
						    (name . function_type))))
					 ((type . "SYMBOL")
					  (name . parenthesized_type)))))))
 (type_declaration (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "type"))
			    ((type . "CHOICE")
			     (members ((type . "SYMBOL")
				       (name . type_spec))
				      ((type . "SYMBOL")
				       (name . type_alias))
				      ((type . "SEQ")
				       (members ((type . "STRING") (value . "(")) ((type . "REPEAT") (content (type . "SEQ") (members ((type . "CHOICE") (members ((type . "SYMBOL") (name . type_spec)) ((type . "SYMBOL") (name . type_alias)))) ((type . "CHOICE") (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";"))))))) ((type . "STRING") (value . ")"))))))))
 (type_spec (type . "SEQ")
	    (members ((type . "FIELD")
		      (name . "name")
		      (content (type . "ALIAS")
			       (content (type . "SYMBOL")
					(name . identifier))
			       (named . t)
			       (value . type_identifier)))
		     ((type . "FIELD")
		      (name . "type")
		      (content (type . "CHOICE")
			       (members ((type . "CHOICE")
					 (members ((type . "PREC_DYNAMIC")
						   (value . -1)
						   (content (type . "ALIAS")
							    (content (type . "SYMBOL")
								     (name . identifier))
							    (named . t)
							    (value . type_identifier)))
						  ((type . "SYMBOL")
						   (name . qualified_type))
						  ((type . "SYMBOL")
						   (name . pointer_type))
						  ((type . "SYMBOL")
						   (name . struct_type))
						  ((type . "SYMBOL")
						   (name . interface_type))
						  ((type . "SYMBOL")
						   (name . array_type))
						  ((type . "SYMBOL")
						   (name . slice_type))
						  ((type . "SYMBOL")
						   (name . map_type))
						  ((type . "SYMBOL")
						   (name . channel_type))
						  ((type . "SYMBOL")
						   (name . function_type))))
					((type . "SYMBOL")
					 (name . parenthesized_type)))))))
 (field_name_list (type . "SEQ")
		  (members ((type . "ALIAS")
			    (content (type . "SYMBOL") (name . identifier))
			    (named . t)
			    (value . field_identifier))
			   ((type . "REPEAT")
			    (content (type . "SEQ")
				     (members ((type . "STRING")
					       (value . ","))
					      ((type . "ALIAS")
					       (content (type . "SYMBOL")
							(name . identifier))
					       (named . t)
					       (value . field_identifier)))))))
 (expression_list (type . "SEQ")
		  (members ((type . "CHOICE")
			    (members ((type . "SYMBOL")
				      (name . unary_expression))
				     ((type . "SYMBOL")
				      (name . binary_expression))
				     ((type . "SYMBOL")
				      (name . selector_expression))
				     ((type . "SYMBOL")
				      (name . index_expression))
				     ((type . "SYMBOL")
				      (name . slice_expression))
				     ((type . "SYMBOL")
				      (name . call_expression))
				     ((type . "SYMBOL")
				      (name . type_assertion_expression))
				     ((type . "SYMBOL")
				      (name . type_conversion_expression))
				     ((type . "SYMBOL")
				      (name . identifier))
				     ((type . "ALIAS")
				      (content (type . "CHOICE")
					       (members ((type . "STRING")
							 (value . "new"))
							((type . "STRING")
							 (value . "make"))))
				      (named . t)
				      (value . identifier))
				     ((type . "SYMBOL")
				      (name . composite_literal))
				     ((type . "SYMBOL")
				      (name . func_literal))
				     ((type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . raw_string_literal))
					       ((type . "SYMBOL")
						(name . interpreted_string_literal))))
				     ((type . "SYMBOL")
				      (name . int_literal))
				     ((type . "SYMBOL")
				      (name . float_literal))
				     ((type . "SYMBOL")
				      (name . imaginary_literal))
				     ((type . "SYMBOL")
				      (name . rune_literal))
				     ((type . "SYMBOL")
				      (name))
				     ((type . "SYMBOL")
				      (name . true))
				     ((type . "SYMBOL")
				      (name . false))
				     ((type . "SYMBOL")
				      (name . parenthesized_expression))))
			   ((type . "REPEAT")
			    (content (type . "SEQ")
				     (members ((type . "STRING")
					       (value . ","))
					      ((type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . unary_expression))
							((type . "SYMBOL")
							 (name . binary_expression))
							((type . "SYMBOL")
							 (name . selector_expression))
							((type . "SYMBOL")
							 (name . index_expression))
							((type . "SYMBOL")
							 (name . slice_expression))
							((type . "SYMBOL")
							 (name . call_expression))
							((type . "SYMBOL")
							 (name . type_assertion_expression))
							((type . "SYMBOL")
							 (name . type_conversion_expression))
							((type . "SYMBOL")
							 (name . identifier))
							((type . "ALIAS")
							 (content (type . "CHOICE")
								  (members ((type . "STRING")
									    (value . "new"))
									   ((type . "STRING")
									    (value . "make"))))
							 (named . t)
							 (value . identifier))
							((type . "SYMBOL")
							 (name . composite_literal))
							((type . "SYMBOL")
							 (name . func_literal))
							((type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . raw_string_literal))
								  ((type . "SYMBOL")
								   (name . interpreted_string_literal))))
							((type . "SYMBOL")
							 (name . int_literal))
							((type . "SYMBOL")
							 (name . float_literal))
							((type . "SYMBOL")
							 (name . imaginary_literal))
							((type . "SYMBOL")
							 (name . rune_literal))
							((type . "SYMBOL")
							 (name))
							((type . "SYMBOL")
							 (name . true))
							((type . "SYMBOL")
							 (name . false))
							((type . "SYMBOL")
							 (name . parenthesized_expression)))))))))
 (_type (type . "CHOICE")
	(members ((type . "CHOICE")
		  (members ((type . "PREC_DYNAMIC")
			    (value . -1)
			    (content (type . "ALIAS")
				     (content (type . "SYMBOL")
					      (name . identifier))
				     (named . t)
				     (value . type_identifier)))
			   ((type . "SYMBOL")
			    (name . qualified_type))
			   ((type . "SYMBOL")
			    (name . pointer_type))
			   ((type . "SYMBOL")
			    (name . struct_type))
			   ((type . "SYMBOL")
			    (name . interface_type))
			   ((type . "SYMBOL")
			    (name . array_type))
			   ((type . "SYMBOL")
			    (name . slice_type))
			   ((type . "SYMBOL")
			    (name . map_type))
			   ((type . "SYMBOL")
			    (name . channel_type))
			   ((type . "SYMBOL")
			    (name . function_type))))
		 ((type . "SYMBOL")
		  (name . parenthesized_type))))
 (parenthesized_type (type . "SEQ")
		     (members ((type . "STRING")
			       (value . "("))
			      ((type . "CHOICE")
			       (members ((type . "CHOICE")
					 (members ((type . "PREC_DYNAMIC")
						   (value . -1)
						   (content (type . "ALIAS")
							    (content (type . "SYMBOL")
								     (name . identifier))
							    (named . t)
							    (value . type_identifier)))
						  ((type . "SYMBOL")
						   (name . qualified_type))
						  ((type . "SYMBOL")
						   (name . pointer_type))
						  ((type . "SYMBOL")
						   (name . struct_type))
						  ((type . "SYMBOL")
						   (name . interface_type))
						  ((type . "SYMBOL")
						   (name . array_type))
						  ((type . "SYMBOL")
						   (name . slice_type))
						  ((type . "SYMBOL")
						   (name . map_type))
						  ((type . "SYMBOL")
						   (name . channel_type))
						  ((type . "SYMBOL")
						   (name . function_type))))
					((type . "SYMBOL")
					 (name . parenthesized_type))))
			      ((type . "STRING")
			       (value . ")"))))
 (_simple_type (type . "CHOICE")
	       (members ((type . "PREC_DYNAMIC")
			 (value . -1)
			 (content (type . "ALIAS")
				  (content (type . "SYMBOL")
					   (name . identifier))
				  (named . t)
				  (value . type_identifier)))
			((type . "SYMBOL")
			 (name . qualified_type))
			((type . "SYMBOL")
			 (name . pointer_type))
			((type . "SYMBOL")
			 (name . struct_type))
			((type . "SYMBOL")
			 (name . interface_type))
			((type . "SYMBOL")
			 (name . array_type))
			((type . "SYMBOL")
			 (name . slice_type))
			((type . "SYMBOL")
			 (name . map_type))
			((type . "SYMBOL")
			 (name . channel_type))
			((type . "SYMBOL")
			 (name . function_type))))
 (pointer_type (type . "PREC")
	       (value . 6)
	       (content (type . "SEQ")
			(members ((type . "STRING")
				  (value . "*"))
				 ((type . "CHOICE")
				  (members ((type . "CHOICE")
					    (members ((type . "PREC_DYNAMIC")
						      (value . -1)
						      (content (type . "ALIAS")
							       (content (type . "SYMBOL")
									(name . identifier))
							       (named . t)
							       (value . type_identifier)))
						     ((type . "SYMBOL")
						      (name . qualified_type))
						     ((type . "SYMBOL")
						      (name . pointer_type))
						     ((type . "SYMBOL")
						      (name . struct_type))
						     ((type . "SYMBOL")
						      (name . interface_type))
						     ((type . "SYMBOL")
						      (name . array_type))
						     ((type . "SYMBOL")
						      (name . slice_type))
						     ((type . "SYMBOL")
						      (name . map_type))
						     ((type . "SYMBOL")
						      (name . channel_type))
						     ((type . "SYMBOL")
						      (name . function_type))))
					   ((type . "SYMBOL")
					    (name . parenthesized_type)))))))
 (array_type (type . "SEQ")
	     (members ((type . "STRING")
		       (value . "["))
		      ((type . "FIELD")
		       (name . "length")
		       (content (type . "CHOICE")
				(members ((type . "SYMBOL")
					  (name . unary_expression))
					 ((type . "SYMBOL")
					  (name . binary_expression))
					 ((type . "SYMBOL")
					  (name . selector_expression))
					 ((type . "SYMBOL")
					  (name . index_expression))
					 ((type . "SYMBOL")
					  (name . slice_expression))
					 ((type . "SYMBOL")
					  (name . call_expression))
					 ((type . "SYMBOL")
					  (name . type_assertion_expression))
					 ((type . "SYMBOL")
					  (name . type_conversion_expression))
					 ((type . "SYMBOL")
					  (name . identifier))
					 ((type . "ALIAS")
					  (content (type . "CHOICE")
						   (members ((type . "STRING")
							     (value . "new"))
							    ((type . "STRING")
							     (value . "make"))))
					  (named . t)
					  (value . identifier))
					 ((type . "SYMBOL")
					  (name . composite_literal))
					 ((type . "SYMBOL")
					  (name . func_literal))
					 ((type . "CHOICE")
					  (members ((type . "SYMBOL")
						    (name . raw_string_literal))
						   ((type . "SYMBOL")
						    (name . interpreted_string_literal))))
					 ((type . "SYMBOL")
					  (name . int_literal))
					 ((type . "SYMBOL")
					  (name . float_literal))
					 ((type . "SYMBOL")
					  (name . imaginary_literal))
					 ((type . "SYMBOL")
					  (name . rune_literal))
					 ((type . "SYMBOL")
					  (name))
					 ((type . "SYMBOL")
					  (name . true))
					 ((type . "SYMBOL")
					  (name . false))
					 ((type . "SYMBOL")
					  (name . parenthesized_expression)))))
		      ((type . "STRING")
		       (value . "]"))
		      ((type . "FIELD")
		       (name . "element")
		       (content (type . "CHOICE")
				(members ((type . "CHOICE")
					  (members ((type . "PREC_DYNAMIC")
						    (value . -1)
						    (content (type . "ALIAS")
							     (content (type . "SYMBOL")
								      (name . identifier))
							     (named . t)
							     (value . type_identifier)))
						   ((type . "SYMBOL")
						    (name . qualified_type))
						   ((type . "SYMBOL")
						    (name . pointer_type))
						   ((type . "SYMBOL")
						    (name . struct_type))
						   ((type . "SYMBOL")
						    (name . interface_type))
						   ((type . "SYMBOL")
						    (name . array_type))
						   ((type . "SYMBOL")
						    (name . slice_type))
						   ((type . "SYMBOL")
						    (name . map_type))
						   ((type . "SYMBOL")
						    (name . channel_type))
						   ((type . "SYMBOL")
						    (name . function_type))))
					 ((type . "SYMBOL")
					  (name . parenthesized_type)))))))
 (implicit_length_array_type (type . "SEQ")
			     (members ((type . "STRING")
				       (value . "["))
				      ((type . "STRING")
				       (value . "..."))
				      ((type . "STRING")
				       (value . "]"))
				      ((type . "FIELD")
				       (name . "element")
				       (content (type . "CHOICE")
						(members ((type . "CHOICE")
							  (members ((type . "PREC_DYNAMIC")
								    (value . -1)
								    (content (type . "ALIAS")
									     (content (type . "SYMBOL")
										      (name . identifier))
									     (named . t)
									     (value . type_identifier)))
								   ((type . "SYMBOL")
								    (name . qualified_type))
								   ((type . "SYMBOL")
								    (name . pointer_type))
								   ((type . "SYMBOL")
								    (name . struct_type))
								   ((type . "SYMBOL")
								    (name . interface_type))
								   ((type . "SYMBOL")
								    (name . array_type))
								   ((type . "SYMBOL")
								    (name . slice_type))
								   ((type . "SYMBOL")
								    (name . map_type))
								   ((type . "SYMBOL")
								    (name . channel_type))
								   ((type . "SYMBOL")
								    (name . function_type))))
							 ((type . "SYMBOL")
							  (name . parenthesized_type)))))))
 (slice_type (type . "SEQ")
	     (members ((type . "STRING")
		       (value . "["))
		      ((type . "STRING")
		       (value . "]"))
		      ((type . "FIELD")
		       (name . "element")
		       (content (type . "CHOICE")
				(members ((type . "CHOICE")
					  (members ((type . "PREC_DYNAMIC")
						    (value . -1)
						    (content (type . "ALIAS")
							     (content (type . "SYMBOL")
								      (name . identifier))
							     (named . t)
							     (value . type_identifier)))
						   ((type . "SYMBOL")
						    (name . qualified_type))
						   ((type . "SYMBOL")
						    (name . pointer_type))
						   ((type . "SYMBOL")
						    (name . struct_type))
						   ((type . "SYMBOL")
						    (name . interface_type))
						   ((type . "SYMBOL")
						    (name . array_type))
						   ((type . "SYMBOL")
						    (name . slice_type))
						   ((type . "SYMBOL")
						    (name . map_type))
						   ((type . "SYMBOL")
						    (name . channel_type))
						   ((type . "SYMBOL")
						    (name . function_type))))
					 ((type . "SYMBOL")
					  (name . parenthesized_type)))))))
 (struct_type (type . "SEQ")
	      (members ((type . "STRING")
			(value . "struct"))
		       ((type . "SYMBOL")
			(name . field_declaration_list))))
 (field_declaration_list (type . "SEQ")
			 (members ((type . "STRING")
				   (value . "{"))
				  ((type . "CHOICE")
				   (members ((type . "SEQ")
					     (members ((type . "SYMBOL") (name . field_declaration)) ((type . "REPEAT") (content (type . "SEQ") (members ((type . "CHOICE") (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";")))) ((type . "SYMBOL") (name . field_declaration))))) ((type . "CHOICE") (members ((type . "CHOICE") (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";")))) ((type . "BLANK"))))))
					    ((type . "BLANK"))))
				  ((type . "STRING")
				   (value . "}"))))
 (field_declaration (type . "SEQ")
		    (members ((type . "CHOICE")
			      (members ((type . "SEQ")
					(members ((type . "FIELD")
						  (name . "name")
						  (content (type . "SEQ")
							   (members ((type . "ALIAS")
								     (content (type . "SYMBOL")
									      (name . identifier))
								     (named . t)
								     (value . field_identifier))
								    ((type . "REPEAT")
								     (content (type . "SEQ")
									      (members ((type . "STRING")
											(value . ","))
										       ((type . "ALIAS")
											(content (type . "SYMBOL")
												 (name . identifier))
											(named . t)
											(value . field_identifier))))))))
						 ((type . "FIELD")
						  (name . "type")
						  (content (type . "CHOICE")
							   (members ((type . "CHOICE")
								     (members ((type . "PREC_DYNAMIC")
									       (value . -1)
									       (content (type . "ALIAS")
											(content (type . "SYMBOL")
												 (name . identifier))
											(named . t)
											(value . type_identifier)))
									      ((type . "SYMBOL")
									       (name . qualified_type))
									      ((type . "SYMBOL")
									       (name . pointer_type))
									      ((type . "SYMBOL")
									       (name . struct_type))
									      ((type . "SYMBOL")
									       (name . interface_type))
									      ((type . "SYMBOL")
									       (name . array_type))
									      ((type . "SYMBOL")
									       (name . slice_type))
									      ((type . "SYMBOL")
									       (name . map_type))
									      ((type . "SYMBOL")
									       (name . channel_type))
									      ((type . "SYMBOL")
									       (name . function_type))))
								    ((type . "SYMBOL")
								     (name . parenthesized_type)))))))
				       ((type . "SEQ")
					(members ((type . "CHOICE")
						  (members ((type . "STRING")
							    (value . "*"))
							   ((type . "BLANK"))))
						 ((type . "FIELD")
						  (name . "type")
						  (content (type . "CHOICE")
							   (members ((type . "ALIAS")
								     (content (type . "SYMBOL")
									      (name . identifier))
								     (named . t)
								     (value . type_identifier))
								    ((type . "SYMBOL")
								     (name . qualified_type)))))))))
			     ((type . "FIELD")
			      (name . "tag")
			      (content (type . "CHOICE")
				       (members ((type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . raw_string_literal))
							  ((type . "SYMBOL")
							   (name . interpreted_string_literal))))
						((type . "BLANK")))))))
 (interface_type (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "interface"))
			  ((type . "SYMBOL")
			   (name . method_spec_list))))
 (method_spec_list (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "{"))
			    ((type . "CHOICE")
			     (members ((type . "SEQ")
				       (members ((type . "CHOICE") (members ((type . "ALIAS") (content (type . "SYMBOL") (name . identifier)) (named . t) (value . type_identifier)) ((type . "SYMBOL") (name . qualified_type)) ((type . "SYMBOL") (name . method_spec)))) ((type . "REPEAT") (content (type . "SEQ") (members ((type . "CHOICE") (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";")))) ((type . "CHOICE") (members ((type . "ALIAS") (content (type . "SYMBOL") (name . identifier)) (named . t) (value . type_identifier)) ((type . "SYMBOL") (name . qualified_type)) ((type . "SYMBOL") (name . method_spec))))))) ((type . "CHOICE") (members ((type . "CHOICE") (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";")))) ((type . "BLANK"))))))
				      ((type . "BLANK"))))
			    ((type . "STRING")
			     (value . "}"))))
 (method_spec (type . "SEQ")
	      (members ((type . "FIELD")
			(name . "name")
			(content (type . "ALIAS")
				 (content (type . "SYMBOL")
					  (name . identifier))
				 (named . t)
				 (value . field_identifier)))
		       ((type . "FIELD")
			(name . "parameters")
			(content (type . "SYMBOL") (name . parameter_list)))
		       ((type . "FIELD")
			(name . "result")
			(content (type . "CHOICE")
				 (members ((type . "CHOICE")
					   (members ((type . "SYMBOL")
						     (name . parameter_list))
						    ((type . "CHOICE")
						     (members ((type . "PREC_DYNAMIC")
							       (value . -1)
							       (content (type . "ALIAS")
									(content (type . "SYMBOL")
										 (name . identifier))
									(named . t)
									(value . type_identifier)))
							      ((type . "SYMBOL")
							       (name . qualified_type))
							      ((type . "SYMBOL")
							       (name . pointer_type))
							      ((type . "SYMBOL")
							       (name . struct_type))
							      ((type . "SYMBOL")
							       (name . interface_type))
							      ((type . "SYMBOL")
							       (name . array_type))
							      ((type . "SYMBOL")
							       (name . slice_type))
							      ((type . "SYMBOL")
							       (name . map_type))
							      ((type . "SYMBOL")
							       (name . channel_type))
							      ((type . "SYMBOL")
							       (name . function_type))))))
					  ((type . "BLANK")))))))
 (map_type (type . "SEQ")
	   (members ((type . "STRING")
		     (value . "map"))
		    ((type . "STRING")
		     (value . "["))
		    ((type . "FIELD")
		     (name . "key")
		     (content (type . "CHOICE")
			      (members ((type . "CHOICE")
					(members ((type . "PREC_DYNAMIC")
						  (value . -1)
						  (content (type . "ALIAS")
							   (content (type . "SYMBOL")
								    (name . identifier))
							   (named . t)
							   (value . type_identifier)))
						 ((type . "SYMBOL")
						  (name . qualified_type))
						 ((type . "SYMBOL")
						  (name . pointer_type))
						 ((type . "SYMBOL")
						  (name . struct_type))
						 ((type . "SYMBOL")
						  (name . interface_type))
						 ((type . "SYMBOL")
						  (name . array_type))
						 ((type . "SYMBOL")
						  (name . slice_type))
						 ((type . "SYMBOL")
						  (name . map_type))
						 ((type . "SYMBOL")
						  (name . channel_type))
						 ((type . "SYMBOL")
						  (name . function_type))))
				       ((type . "SYMBOL")
					(name . parenthesized_type)))))
		    ((type . "STRING")
		     (value . "]"))
		    ((type . "FIELD")
		     (name . "value")
		     (content (type . "CHOICE")
			      (members ((type . "CHOICE")
					(members ((type . "PREC_DYNAMIC")
						  (value . -1)
						  (content (type . "ALIAS")
							   (content (type . "SYMBOL")
								    (name . identifier))
							   (named . t)
							   (value . type_identifier)))
						 ((type . "SYMBOL")
						  (name . qualified_type))
						 ((type . "SYMBOL")
						  (name . pointer_type))
						 ((type . "SYMBOL")
						  (name . struct_type))
						 ((type . "SYMBOL")
						  (name . interface_type))
						 ((type . "SYMBOL")
						  (name . array_type))
						 ((type . "SYMBOL")
						  (name . slice_type))
						 ((type . "SYMBOL")
						  (name . map_type))
						 ((type . "SYMBOL")
						  (name . channel_type))
						 ((type . "SYMBOL")
						  (name . function_type))))
				       ((type . "SYMBOL")
					(name . parenthesized_type)))))))
 (channel_type (type . "CHOICE")
	       (members ((type . "SEQ")
			 (members ((type . "STRING")
				   (value . "chan"))
				  ((type . "FIELD")
				   (name . "value")
				   (content (type . "CHOICE")
					    (members ((type . "CHOICE")
						      (members ((type . "PREC_DYNAMIC")
								(value . -1)
								(content (type . "ALIAS")
									 (content (type . "SYMBOL")
										  (name . identifier))
									 (named . t)
									 (value . type_identifier)))
							       ((type . "SYMBOL")
								(name . qualified_type))
							       ((type . "SYMBOL")
								(name . pointer_type))
							       ((type . "SYMBOL")
								(name . struct_type))
							       ((type . "SYMBOL")
								(name . interface_type))
							       ((type . "SYMBOL")
								(name . array_type))
							       ((type . "SYMBOL")
								(name . slice_type))
							       ((type . "SYMBOL")
								(name . map_type))
							       ((type . "SYMBOL")
								(name . channel_type))
							       ((type . "SYMBOL")
								(name . function_type))))
						     ((type . "SYMBOL")
						      (name . parenthesized_type)))))))
			((type . "SEQ")
			 (members ((type . "STRING")
				   (value . "chan"))
				  ((type . "STRING")
				   (value . "<-"))
				  ((type . "FIELD")
				   (name . "value")
				   (content (type . "CHOICE")
					    (members ((type . "CHOICE")
						      (members ((type . "PREC_DYNAMIC")
								(value . -1)
								(content (type . "ALIAS")
									 (content (type . "SYMBOL")
										  (name . identifier))
									 (named . t)
									 (value . type_identifier)))
							       ((type . "SYMBOL")
								(name . qualified_type))
							       ((type . "SYMBOL")
								(name . pointer_type))
							       ((type . "SYMBOL")
								(name . struct_type))
							       ((type . "SYMBOL")
								(name . interface_type))
							       ((type . "SYMBOL")
								(name . array_type))
							       ((type . "SYMBOL")
								(name . slice_type))
							       ((type . "SYMBOL")
								(name . map_type))
							       ((type . "SYMBOL")
								(name . channel_type))
							       ((type . "SYMBOL")
								(name . function_type))))
						     ((type . "SYMBOL")
						      (name . parenthesized_type)))))))
			((type . "PREC")
			 (value . 6)
			 (content (type . "SEQ")
				  (members ((type . "STRING")
					    (value . "<-"))
					   ((type . "STRING")
					    (value . "chan"))
					   ((type . "FIELD")
					    (name . "value")
					    (content (type . "CHOICE")
						     (members ((type . "CHOICE")
							       (members ((type . "PREC_DYNAMIC")
									 (value . -1)
									 (content (type . "ALIAS")
										  (content (type . "SYMBOL")
											   (name . identifier))
										  (named . t)
										  (value . type_identifier)))
									((type . "SYMBOL")
									 (name . qualified_type))
									((type . "SYMBOL")
									 (name . pointer_type))
									((type . "SYMBOL")
									 (name . struct_type))
									((type . "SYMBOL")
									 (name . interface_type))
									((type . "SYMBOL")
									 (name . array_type))
									((type . "SYMBOL")
									 (name . slice_type))
									((type . "SYMBOL")
									 (name . map_type))
									((type . "SYMBOL")
									 (name . channel_type))
									((type . "SYMBOL")
									 (name . function_type))))
							      ((type . "SYMBOL")
							       (name . parenthesized_type))))))))))
 (function_type (type . "SEQ")
		(members ((type . "STRING")
			  (value . "func"))
			 ((type . "FIELD")
			  (name . "parameters")
			  (content (type . "SYMBOL") (name . parameter_list)))
			 ((type . "FIELD")
			  (name . "result")
			  (content (type . "CHOICE")
				   (members ((type . "CHOICE")
					     (members ((type . "SYMBOL")
						       (name . parameter_list))
						      ((type . "CHOICE")
						       (members ((type . "PREC_DYNAMIC")
								 (value . -1)
								 (content (type . "ALIAS")
									  (content (type . "SYMBOL")
										   (name . identifier))
									  (named . t)
									  (value . type_identifier)))
								((type . "SYMBOL")
								 (name . qualified_type))
								((type . "SYMBOL")
								 (name . pointer_type))
								((type . "SYMBOL")
								 (name . struct_type))
								((type . "SYMBOL")
								 (name . interface_type))
								((type . "SYMBOL")
								 (name . array_type))
								((type . "SYMBOL")
								 (name . slice_type))
								((type . "SYMBOL")
								 (name . map_type))
								((type . "SYMBOL")
								 (name . channel_type))
								((type . "SYMBOL")
								 (name . function_type))))))
					    ((type . "BLANK")))))))
 (block (type . "SEQ")
	(members ((type . "STRING")
		  (value . "{"))
		 ((type . "CHOICE")
		  (members ((type . "CHOICE")
			    (members ((type . "SEQ")
				      (members ((type . "CHOICE")
						(members ((type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . const_declaration))
								   ((type . "SYMBOL")
								    (name . type_declaration))
								   ((type . "SYMBOL")
								    (name . var_declaration))))
							 ((type . "CHOICE")
							  (members ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . unary_expression))
									     ((type . "SYMBOL")
									      (name . binary_expression))
									     ((type . "SYMBOL")
									      (name . selector_expression))
									     ((type . "SYMBOL")
									      (name . index_expression))
									     ((type . "SYMBOL")
									      (name . slice_expression))
									     ((type . "SYMBOL")
									      (name . call_expression))
									     ((type . "SYMBOL")
									      (name . type_assertion_expression))
									     ((type . "SYMBOL")
									      (name . type_conversion_expression))
									     ((type . "SYMBOL")
									      (name . identifier))
									     ((type . "ALIAS")
									      (content (type . "CHOICE")
										       (members ((type . "STRING")
												 (value . "new"))
												((type . "STRING")
												 (value . "make"))))
									      (named . t)
									      (value . identifier))
									     ((type . "SYMBOL")
									      (name . composite_literal))
									     ((type . "SYMBOL")
									      (name . func_literal))
									     ((type . "CHOICE")
									      (members ((type . "SYMBOL")
											(name . raw_string_literal))
										       ((type . "SYMBOL")
											(name . interpreted_string_literal))))
									     ((type . "SYMBOL")
									      (name . int_literal))
									     ((type . "SYMBOL")
									      (name . float_literal))
									     ((type . "SYMBOL")
									      (name . imaginary_literal))
									     ((type . "SYMBOL")
									      (name . rune_literal))
									     ((type . "SYMBOL")
									      (name))
									     ((type . "SYMBOL")
									      (name . true))
									     ((type . "SYMBOL")
									      (name . false))
									     ((type . "SYMBOL")
									      (name . parenthesized_expression))))
								   ((type . "SYMBOL")
								    (name . send_statement))
								   ((type . "SYMBOL")
								    (name . inc_statement))
								   ((type . "SYMBOL")
								    (name . dec_statement))
								   ((type . "SYMBOL")
								    (name . assignment_statement))
								   ((type . "SYMBOL")
								    (name . short_var_declaration))))
							 ((type . "SYMBOL")
							  (name . return_statement))
							 ((type . "SYMBOL")
							  (name . go_statement))
							 ((type . "SYMBOL")
							  (name . defer_statement))
							 ((type . "SYMBOL")
							  (name . if_statement))
							 ((type . "SYMBOL")
							  (name . for_statement))
							 ((type . "SYMBOL")
							  (name . expression_switch_statement))
							 ((type . "SYMBOL")
							  (name . type_switch_statement))
							 ((type . "SYMBOL")
							  (name . select_statement))
							 ((type . "SYMBOL")
							  (name . labeled_statement))
							 ((type . "SYMBOL")
							  (name . fallthrough_statement))
							 ((type . "SYMBOL")
							  (name . break_statement))
							 ((type . "SYMBOL")
							  (name . continue_statement))
							 ((type . "SYMBOL")
							  (name . goto_statement))
							 ((type . "SYMBOL")
							  (name . block))
							 ((type . "SYMBOL")
							  (name . empty_statement))))
					       ((type . "REPEAT")
						(content (type . "SEQ")
							 (members ((type . "CHOICE")
								   (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";"))))
								  ((type . "CHOICE")
								   (members ((type . "CHOICE")
									     (members ((type . "SYMBOL")
										       (name . const_declaration))
										      ((type . "SYMBOL")
										       (name . type_declaration))
										      ((type . "SYMBOL")
										       (name . var_declaration))))
									    ((type . "CHOICE")
									     (members ((type . "CHOICE")
										       (members ((type . "SYMBOL")
												 (name . unary_expression))
												((type . "SYMBOL")
												 (name . binary_expression))
												((type . "SYMBOL")
												 (name . selector_expression))
												((type . "SYMBOL")
												 (name . index_expression))
												((type . "SYMBOL")
												 (name . slice_expression))
												((type . "SYMBOL")
												 (name . call_expression))
												((type . "SYMBOL")
												 (name . type_assertion_expression))
												((type . "SYMBOL")
												 (name . type_conversion_expression))
												((type . "SYMBOL")
												 (name . identifier))
												((type . "ALIAS")
												 (content (type . "CHOICE")
													  (members ((type . "STRING")
														    (value . "new"))
														   ((type . "STRING")
														    (value . "make"))))
												 (named . t)
												 (value . identifier))
												((type . "SYMBOL")
												 (name . composite_literal))
												((type . "SYMBOL")
												 (name . func_literal))
												((type . "CHOICE")
												 (members ((type . "SYMBOL")
													   (name . raw_string_literal))
													  ((type . "SYMBOL")
													   (name . interpreted_string_literal))))
												((type . "SYMBOL")
												 (name . int_literal))
												((type . "SYMBOL")
												 (name . float_literal))
												((type . "SYMBOL")
												 (name . imaginary_literal))
												((type . "SYMBOL")
												 (name . rune_literal))
												((type . "SYMBOL")
												 (name))
												((type . "SYMBOL")
												 (name . true))
												((type . "SYMBOL")
												 (name . false))
												((type . "SYMBOL")
												 (name . parenthesized_expression))))
										      ((type . "SYMBOL")
										       (name . send_statement))
										      ((type . "SYMBOL")
										       (name . inc_statement))
										      ((type . "SYMBOL")
										       (name . dec_statement))
										      ((type . "SYMBOL")
										       (name . assignment_statement))
										      ((type . "SYMBOL")
										       (name . short_var_declaration))))
									    ((type . "SYMBOL")
									     (name . return_statement))
									    ((type . "SYMBOL")
									     (name . go_statement))
									    ((type . "SYMBOL")
									     (name . defer_statement))
									    ((type . "SYMBOL")
									     (name . if_statement))
									    ((type . "SYMBOL")
									     (name . for_statement))
									    ((type . "SYMBOL")
									     (name . expression_switch_statement))
									    ((type . "SYMBOL")
									     (name . type_switch_statement))
									    ((type . "SYMBOL")
									     (name . select_statement))
									    ((type . "SYMBOL")
									     (name . labeled_statement))
									    ((type . "SYMBOL")
									     (name . fallthrough_statement))
									    ((type . "SYMBOL")
									     (name . break_statement))
									    ((type . "SYMBOL")
									     (name . continue_statement))
									    ((type . "SYMBOL")
									     (name . goto_statement))
									    ((type . "SYMBOL")
									     (name . block))
									    ((type . "SYMBOL")
									     (name . empty_statement)))))))
					       ((type . "CHOICE")
						(members ((type . "SEQ")
							  (members ((type . "CHOICE")
								    (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";"))))
								   ((type . "CHOICE")
								    (members ((type . "ALIAS")
									      (content (type . "SYMBOL")
										       (name . empty_labeled_statement))
									      (named . t)
									      (value . labeled_statement))
									     ((type . "BLANK"))))))
							 ((type . "BLANK"))))))
				     ((type . "ALIAS")
				      (content (type . "SYMBOL")
					       (name . empty_labeled_statement))
				      (named . t)
				      (value . labeled_statement))))
			   ((type . "BLANK"))))
		 ((type . "STRING")
		  (value . "}"))))
 (_statement_list (type . "CHOICE")
		  (members ((type . "SEQ")
			    (members ((type . "CHOICE")
				      (members ((type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . const_declaration))
							 ((type . "SYMBOL")
							  (name . type_declaration))
							 ((type . "SYMBOL")
							  (name . var_declaration))))
					       ((type . "CHOICE")
						(members ((type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . selector_expression))
								   ((type . "SYMBOL")
								    (name . index_expression))
								   ((type . "SYMBOL")
								    (name . slice_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . type_assertion_expression))
								   ((type . "SYMBOL")
								    (name . type_conversion_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "ALIAS")
								    (content (type . "CHOICE")
									     (members ((type . "STRING")
										       (value . "new"))
										      ((type . "STRING")
										       (value . "make"))))
								    (named . t)
								    (value . identifier))
								   ((type . "SYMBOL")
								    (name . composite_literal))
								   ((type . "SYMBOL")
								    (name . func_literal))
								   ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . raw_string_literal))
									     ((type . "SYMBOL")
									      (name . interpreted_string_literal))))
								   ((type . "SYMBOL")
								    (name . int_literal))
								   ((type . "SYMBOL")
								    (name . float_literal))
								   ((type . "SYMBOL")
								    (name . imaginary_literal))
								   ((type . "SYMBOL")
								    (name . rune_literal))
								   ((type . "SYMBOL")
								    (name))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))
							 ((type . "SYMBOL")
							  (name . send_statement))
							 ((type . "SYMBOL")
							  (name . inc_statement))
							 ((type . "SYMBOL")
							  (name . dec_statement))
							 ((type . "SYMBOL")
							  (name . assignment_statement))
							 ((type . "SYMBOL")
							  (name . short_var_declaration))))
					       ((type . "SYMBOL")
						(name . return_statement))
					       ((type . "SYMBOL")
						(name . go_statement))
					       ((type . "SYMBOL")
						(name . defer_statement))
					       ((type . "SYMBOL")
						(name . if_statement))
					       ((type . "SYMBOL")
						(name . for_statement))
					       ((type . "SYMBOL")
						(name . expression_switch_statement))
					       ((type . "SYMBOL")
						(name . type_switch_statement))
					       ((type . "SYMBOL")
						(name . select_statement))
					       ((type . "SYMBOL")
						(name . labeled_statement))
					       ((type . "SYMBOL")
						(name . fallthrough_statement))
					       ((type . "SYMBOL")
						(name . break_statement))
					       ((type . "SYMBOL")
						(name . continue_statement))
					       ((type . "SYMBOL")
						(name . goto_statement))
					       ((type . "SYMBOL")
						(name . block))
					       ((type . "SYMBOL")
						(name . empty_statement))))
				     ((type . "REPEAT")
				      (content (type . "SEQ")
					       (members ((type . "CHOICE")
							 (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";"))))
							((type . "CHOICE")
							 (members ((type . "CHOICE")
								   (members ((type . "SYMBOL")
									     (name . const_declaration))
									    ((type . "SYMBOL")
									     (name . type_declaration))
									    ((type . "SYMBOL")
									     (name . var_declaration))))
								  ((type . "CHOICE")
								   (members ((type . "CHOICE")
									     (members ((type . "SYMBOL")
										       (name . unary_expression))
										      ((type . "SYMBOL")
										       (name . binary_expression))
										      ((type . "SYMBOL")
										       (name . selector_expression))
										      ((type . "SYMBOL")
										       (name . index_expression))
										      ((type . "SYMBOL")
										       (name . slice_expression))
										      ((type . "SYMBOL")
										       (name . call_expression))
										      ((type . "SYMBOL")
										       (name . type_assertion_expression))
										      ((type . "SYMBOL")
										       (name . type_conversion_expression))
										      ((type . "SYMBOL")
										       (name . identifier))
										      ((type . "ALIAS")
										       (content (type . "CHOICE")
												(members ((type . "STRING")
													  (value . "new"))
													 ((type . "STRING")
													  (value . "make"))))
										       (named . t)
										       (value . identifier))
										      ((type . "SYMBOL")
										       (name . composite_literal))
										      ((type . "SYMBOL")
										       (name . func_literal))
										      ((type . "CHOICE")
										       (members ((type . "SYMBOL")
												 (name . raw_string_literal))
												((type . "SYMBOL")
												 (name . interpreted_string_literal))))
										      ((type . "SYMBOL")
										       (name . int_literal))
										      ((type . "SYMBOL")
										       (name . float_literal))
										      ((type . "SYMBOL")
										       (name . imaginary_literal))
										      ((type . "SYMBOL")
										       (name . rune_literal))
										      ((type . "SYMBOL")
										       (name))
										      ((type . "SYMBOL")
										       (name . true))
										      ((type . "SYMBOL")
										       (name . false))
										      ((type . "SYMBOL")
										       (name . parenthesized_expression))))
									    ((type . "SYMBOL")
									     (name . send_statement))
									    ((type . "SYMBOL")
									     (name . inc_statement))
									    ((type . "SYMBOL")
									     (name . dec_statement))
									    ((type . "SYMBOL")
									     (name . assignment_statement))
									    ((type . "SYMBOL")
									     (name . short_var_declaration))))
								  ((type . "SYMBOL")
								   (name . return_statement))
								  ((type . "SYMBOL")
								   (name . go_statement))
								  ((type . "SYMBOL")
								   (name . defer_statement))
								  ((type . "SYMBOL")
								   (name . if_statement))
								  ((type . "SYMBOL")
								   (name . for_statement))
								  ((type . "SYMBOL")
								   (name . expression_switch_statement))
								  ((type . "SYMBOL")
								   (name . type_switch_statement))
								  ((type . "SYMBOL")
								   (name . select_statement))
								  ((type . "SYMBOL")
								   (name . labeled_statement))
								  ((type . "SYMBOL")
								   (name . fallthrough_statement))
								  ((type . "SYMBOL")
								   (name . break_statement))
								  ((type . "SYMBOL")
								   (name . continue_statement))
								  ((type . "SYMBOL")
								   (name . goto_statement))
								  ((type . "SYMBOL")
								   (name . block))
								  ((type . "SYMBOL")
								   (name . empty_statement)))))))
				     ((type . "CHOICE")
				      (members ((type . "SEQ")
						(members ((type . "CHOICE")
							  (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";"))))
							 ((type . "CHOICE")
							  (members ((type . "ALIAS")
								    (content (type . "SYMBOL")
									     (name . empty_labeled_statement))
								    (named . t)
								    (value . labeled_statement))
								   ((type . "BLANK"))))))
					       ((type . "BLANK"))))))
			   ((type . "ALIAS")
			    (content (type . "SYMBOL")
				     (name . empty_labeled_statement))
			    (named . t)
			    (value . labeled_statement))))
 (_statement (type . "CHOICE")
	     (members ((type . "CHOICE")
		       (members ((type . "SYMBOL")
				 (name . const_declaration))
				((type . "SYMBOL")
				 (name . type_declaration))
				((type . "SYMBOL")
				 (name . var_declaration))))
		      ((type . "CHOICE")
		       (members ((type . "CHOICE")
				 (members ((type . "SYMBOL")
					   (name . unary_expression))
					  ((type . "SYMBOL")
					   (name . binary_expression))
					  ((type . "SYMBOL")
					   (name . selector_expression))
					  ((type . "SYMBOL")
					   (name . index_expression))
					  ((type . "SYMBOL")
					   (name . slice_expression))
					  ((type . "SYMBOL")
					   (name . call_expression))
					  ((type . "SYMBOL")
					   (name . type_assertion_expression))
					  ((type . "SYMBOL")
					   (name . type_conversion_expression))
					  ((type . "SYMBOL")
					   (name . identifier))
					  ((type . "ALIAS")
					   (content (type . "CHOICE")
						    (members ((type . "STRING")
							      (value . "new"))
							     ((type . "STRING")
							      (value . "make"))))
					   (named . t)
					   (value . identifier))
					  ((type . "SYMBOL")
					   (name . composite_literal))
					  ((type . "SYMBOL")
					   (name . func_literal))
					  ((type . "CHOICE")
					   (members ((type . "SYMBOL")
						     (name . raw_string_literal))
						    ((type . "SYMBOL")
						     (name . interpreted_string_literal))))
					  ((type . "SYMBOL")
					   (name . int_literal))
					  ((type . "SYMBOL")
					   (name . float_literal))
					  ((type . "SYMBOL")
					   (name . imaginary_literal))
					  ((type . "SYMBOL")
					   (name . rune_literal))
					  ((type . "SYMBOL")
					   (name))
					  ((type . "SYMBOL")
					   (name . true))
					  ((type . "SYMBOL")
					   (name . false))
					  ((type . "SYMBOL")
					   (name . parenthesized_expression))))
				((type . "SYMBOL")
				 (name . send_statement))
				((type . "SYMBOL")
				 (name . inc_statement))
				((type . "SYMBOL")
				 (name . dec_statement))
				((type . "SYMBOL")
				 (name . assignment_statement))
				((type . "SYMBOL")
				 (name . short_var_declaration))))
		      ((type . "SYMBOL")
		       (name . return_statement))
		      ((type . "SYMBOL")
		       (name . go_statement))
		      ((type . "SYMBOL")
		       (name . defer_statement))
		      ((type . "SYMBOL")
		       (name . if_statement))
		      ((type . "SYMBOL")
		       (name . for_statement))
		      ((type . "SYMBOL")
		       (name . expression_switch_statement))
		      ((type . "SYMBOL")
		       (name . type_switch_statement))
		      ((type . "SYMBOL")
		       (name . select_statement))
		      ((type . "SYMBOL")
		       (name . labeled_statement))
		      ((type . "SYMBOL")
		       (name . fallthrough_statement))
		      ((type . "SYMBOL")
		       (name . break_statement))
		      ((type . "SYMBOL")
		       (name . continue_statement))
		      ((type . "SYMBOL")
		       (name . goto_statement))
		      ((type . "SYMBOL")
		       (name . block))
		      ((type . "SYMBOL")
		       (name . empty_statement))))
 (empty_statement (type . "STRING") (value . ";"))
 (_simple_statement (type . "CHOICE")
		    (members ((type . "CHOICE")
			      (members ((type . "SYMBOL")
					(name . unary_expression))
				       ((type . "SYMBOL")
					(name . binary_expression))
				       ((type . "SYMBOL")
					(name . selector_expression))
				       ((type . "SYMBOL")
					(name . index_expression))
				       ((type . "SYMBOL")
					(name . slice_expression))
				       ((type . "SYMBOL")
					(name . call_expression))
				       ((type . "SYMBOL")
					(name . type_assertion_expression))
				       ((type . "SYMBOL")
					(name . type_conversion_expression))
				       ((type . "SYMBOL")
					(name . identifier))
				       ((type . "ALIAS")
					(content (type . "CHOICE")
						 (members ((type . "STRING")
							   (value . "new"))
							  ((type . "STRING")
							   (value . "make"))))
					(named . t)
					(value . identifier))
				       ((type . "SYMBOL")
					(name . composite_literal))
				       ((type . "SYMBOL")
					(name . func_literal))
				       ((type . "CHOICE")
					(members ((type . "SYMBOL")
						  (name . raw_string_literal))
						 ((type . "SYMBOL")
						  (name . interpreted_string_literal))))
				       ((type . "SYMBOL")
					(name . int_literal))
				       ((type . "SYMBOL")
					(name . float_literal))
				       ((type . "SYMBOL")
					(name . imaginary_literal))
				       ((type . "SYMBOL")
					(name . rune_literal))
				       ((type . "SYMBOL")
					(name))
				       ((type . "SYMBOL")
					(name . true))
				       ((type . "SYMBOL")
					(name . false))
				       ((type . "SYMBOL")
					(name . parenthesized_expression))))
			     ((type . "SYMBOL")
			      (name . send_statement))
			     ((type . "SYMBOL")
			      (name . inc_statement))
			     ((type . "SYMBOL")
			      (name . dec_statement))
			     ((type . "SYMBOL")
			      (name . assignment_statement))
			     ((type . "SYMBOL")
			      (name . short_var_declaration))))
 (send_statement (type . "SEQ")
		 (members ((type . "FIELD")
			   (name . "channel")
			   (content (type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . unary_expression))
					     ((type . "SYMBOL")
					      (name . binary_expression))
					     ((type . "SYMBOL")
					      (name . selector_expression))
					     ((type . "SYMBOL")
					      (name . index_expression))
					     ((type . "SYMBOL")
					      (name . slice_expression))
					     ((type . "SYMBOL")
					      (name . call_expression))
					     ((type . "SYMBOL")
					      (name . type_assertion_expression))
					     ((type . "SYMBOL")
					      (name . type_conversion_expression))
					     ((type . "SYMBOL")
					      (name . identifier))
					     ((type . "ALIAS")
					      (content (type . "CHOICE")
						       (members ((type . "STRING")
								 (value . "new"))
								((type . "STRING")
								 (value . "make"))))
					      (named . t)
					      (value . identifier))
					     ((type . "SYMBOL")
					      (name . composite_literal))
					     ((type . "SYMBOL")
					      (name . func_literal))
					     ((type . "CHOICE")
					      (members ((type . "SYMBOL")
							(name . raw_string_literal))
						       ((type . "SYMBOL")
							(name . interpreted_string_literal))))
					     ((type . "SYMBOL")
					      (name . int_literal))
					     ((type . "SYMBOL")
					      (name . float_literal))
					     ((type . "SYMBOL")
					      (name . imaginary_literal))
					     ((type . "SYMBOL")
					      (name . rune_literal))
					     ((type . "SYMBOL")
					      (name))
					     ((type . "SYMBOL")
					      (name . true))
					     ((type . "SYMBOL")
					      (name . false))
					     ((type . "SYMBOL")
					      (name . parenthesized_expression)))))
			  ((type . "STRING")
			   (value . "<-"))
			  ((type . "FIELD")
			   (name . "value")
			   (content (type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . unary_expression))
					     ((type . "SYMBOL")
					      (name . binary_expression))
					     ((type . "SYMBOL")
					      (name . selector_expression))
					     ((type . "SYMBOL")
					      (name . index_expression))
					     ((type . "SYMBOL")
					      (name . slice_expression))
					     ((type . "SYMBOL")
					      (name . call_expression))
					     ((type . "SYMBOL")
					      (name . type_assertion_expression))
					     ((type . "SYMBOL")
					      (name . type_conversion_expression))
					     ((type . "SYMBOL")
					      (name . identifier))
					     ((type . "ALIAS")
					      (content (type . "CHOICE")
						       (members ((type . "STRING")
								 (value . "new"))
								((type . "STRING")
								 (value . "make"))))
					      (named . t)
					      (value . identifier))
					     ((type . "SYMBOL")
					      (name . composite_literal))
					     ((type . "SYMBOL")
					      (name . func_literal))
					     ((type . "CHOICE")
					      (members ((type . "SYMBOL")
							(name . raw_string_literal))
						       ((type . "SYMBOL")
							(name . interpreted_string_literal))))
					     ((type . "SYMBOL")
					      (name . int_literal))
					     ((type . "SYMBOL")
					      (name . float_literal))
					     ((type . "SYMBOL")
					      (name . imaginary_literal))
					     ((type . "SYMBOL")
					      (name . rune_literal))
					     ((type . "SYMBOL")
					      (name))
					     ((type . "SYMBOL")
					      (name . true))
					     ((type . "SYMBOL")
					      (name . false))
					     ((type . "SYMBOL")
					      (name . parenthesized_expression)))))))
 (receive_statement (type . "SEQ")
		    (members ((type . "CHOICE")
			      (members ((type . "SEQ")
					(members ((type . "FIELD")
						  (name . "left")
						  (content (type . "SYMBOL")
							   (name . expression_list)))
						 ((type . "CHOICE")
						  (members ((type . "STRING")
							    (value . "="))
							   ((type . "STRING")
							    (value . ":="))))))
				       ((type . "BLANK"))))
			     ((type . "FIELD")
			      (name . "right")
			      (content (type . "CHOICE")
				       (members ((type . "SYMBOL")
						 (name . unary_expression))
						((type . "SYMBOL")
						 (name . binary_expression))
						((type . "SYMBOL")
						 (name . selector_expression))
						((type . "SYMBOL")
						 (name . index_expression))
						((type . "SYMBOL")
						 (name . slice_expression))
						((type . "SYMBOL")
						 (name . call_expression))
						((type . "SYMBOL")
						 (name . type_assertion_expression))
						((type . "SYMBOL")
						 (name . type_conversion_expression))
						((type . "SYMBOL")
						 (name . identifier))
						((type . "ALIAS")
						 (content (type . "CHOICE")
							  (members ((type . "STRING")
								    (value . "new"))
								   ((type . "STRING")
								    (value . "make"))))
						 (named . t)
						 (value . identifier))
						((type . "SYMBOL")
						 (name . composite_literal))
						((type . "SYMBOL")
						 (name . func_literal))
						((type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . raw_string_literal))
							  ((type . "SYMBOL")
							   (name . interpreted_string_literal))))
						((type . "SYMBOL")
						 (name . int_literal))
						((type . "SYMBOL")
						 (name . float_literal))
						((type . "SYMBOL")
						 (name . imaginary_literal))
						((type . "SYMBOL")
						 (name . rune_literal))
						((type . "SYMBOL")
						 (name))
						((type . "SYMBOL")
						 (name . true))
						((type . "SYMBOL")
						 (name . false))
						((type . "SYMBOL")
						 (name . parenthesized_expression)))))))
 (inc_statement (type . "SEQ")
		(members ((type . "CHOICE")
			  (members ((type . "SYMBOL")
				    (name . unary_expression))
				   ((type . "SYMBOL")
				    (name . binary_expression))
				   ((type . "SYMBOL")
				    (name . selector_expression))
				   ((type . "SYMBOL")
				    (name . index_expression))
				   ((type . "SYMBOL")
				    (name . slice_expression))
				   ((type . "SYMBOL")
				    (name . call_expression))
				   ((type . "SYMBOL")
				    (name . type_assertion_expression))
				   ((type . "SYMBOL")
				    (name . type_conversion_expression))
				   ((type . "SYMBOL")
				    (name . identifier))
				   ((type . "ALIAS")
				    (content (type . "CHOICE")
					     (members ((type . "STRING")
						       (value . "new"))
						      ((type . "STRING")
						       (value . "make"))))
				    (named . t)
				    (value . identifier))
				   ((type . "SYMBOL")
				    (name . composite_literal))
				   ((type . "SYMBOL")
				    (name . func_literal))
				   ((type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . raw_string_literal))
					     ((type . "SYMBOL")
					      (name . interpreted_string_literal))))
				   ((type . "SYMBOL")
				    (name . int_literal))
				   ((type . "SYMBOL")
				    (name . float_literal))
				   ((type . "SYMBOL")
				    (name . imaginary_literal))
				   ((type . "SYMBOL")
				    (name . rune_literal))
				   ((type . "SYMBOL")
				    (name))
				   ((type . "SYMBOL")
				    (name . true))
				   ((type . "SYMBOL")
				    (name . false))
				   ((type . "SYMBOL")
				    (name . parenthesized_expression))))
			 ((type . "STRING")
			  (value . "++"))))
 (dec_statement (type . "SEQ")
		(members ((type . "CHOICE")
			  (members ((type . "SYMBOL")
				    (name . unary_expression))
				   ((type . "SYMBOL")
				    (name . binary_expression))
				   ((type . "SYMBOL")
				    (name . selector_expression))
				   ((type . "SYMBOL")
				    (name . index_expression))
				   ((type . "SYMBOL")
				    (name . slice_expression))
				   ((type . "SYMBOL")
				    (name . call_expression))
				   ((type . "SYMBOL")
				    (name . type_assertion_expression))
				   ((type . "SYMBOL")
				    (name . type_conversion_expression))
				   ((type . "SYMBOL")
				    (name . identifier))
				   ((type . "ALIAS")
				    (content (type . "CHOICE")
					     (members ((type . "STRING")
						       (value . "new"))
						      ((type . "STRING")
						       (value . "make"))))
				    (named . t)
				    (value . identifier))
				   ((type . "SYMBOL")
				    (name . composite_literal))
				   ((type . "SYMBOL")
				    (name . func_literal))
				   ((type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . raw_string_literal))
					     ((type . "SYMBOL")
					      (name . interpreted_string_literal))))
				   ((type . "SYMBOL")
				    (name . int_literal))
				   ((type . "SYMBOL")
				    (name . float_literal))
				   ((type . "SYMBOL")
				    (name . imaginary_literal))
				   ((type . "SYMBOL")
				    (name . rune_literal))
				   ((type . "SYMBOL")
				    (name))
				   ((type . "SYMBOL")
				    (name . true))
				   ((type . "SYMBOL")
				    (name . false))
				   ((type . "SYMBOL")
				    (name . parenthesized_expression))))
			 ((type . "STRING")
			  (value . "--"))))
 (assignment_statement (type . "SEQ")
		       (members ((type . "FIELD")
				 (name . "left")
				 (content (type . "SYMBOL")
					  (name . expression_list)))
				((type . "FIELD")
				 (name . "operator")
				 (content (type . "CHOICE")
					  (members ((type . "STRING")
						    (value . "*="))
						   ((type . "STRING")
						    (value . "/="))
						   ((type . "STRING")
						    (value . "%="))
						   ((type . "STRING")
						    (value . "<<="))
						   ((type . "STRING")
						    (value . ">>="))
						   ((type . "STRING")
						    (value . "&="))
						   ((type . "STRING")
						    (value . "&^="))
						   ((type . "STRING")
						    (value . "+="))
						   ((type . "STRING")
						    (value . "-="))
						   ((type . "STRING")
						    (value . "|="))
						   ((type . "STRING")
						    (value . "^="))
						   ((type . "STRING")
						    (value . "=")))))
				((type . "FIELD")
				 (name . "right")
				 (content (type . "SYMBOL")
					  (name . expression_list)))))
 (short_var_declaration (type . "SEQ")
			(members ((type . "FIELD")
				  (name . "left")
				  (content (type . "SYMBOL")
					   (name . expression_list)))
				 ((type . "STRING")
				  (value . ":="))
				 ((type . "FIELD")
				  (name . "right")
				  (content (type . "SYMBOL")
					   (name . expression_list)))))
 (labeled_statement (type . "SEQ")
		    (members ((type . "FIELD")
			      (name . "label")
			      (content (type . "ALIAS")
				       (content (type . "SYMBOL")
						(name . identifier))
				       (named . t)
				       (value . label_name)))
			     ((type . "STRING")
			      (value . ":"))
			     ((type . "CHOICE")
			      (members ((type . "CHOICE")
					(members ((type . "SYMBOL")
						  (name . const_declaration))
						 ((type . "SYMBOL")
						  (name . type_declaration))
						 ((type . "SYMBOL")
						  (name . var_declaration))))
				       ((type . "CHOICE")
					(members ((type . "CHOICE")
						  (members ((type . "SYMBOL")
							    (name . unary_expression))
							   ((type . "SYMBOL")
							    (name . binary_expression))
							   ((type . "SYMBOL")
							    (name . selector_expression))
							   ((type . "SYMBOL")
							    (name . index_expression))
							   ((type . "SYMBOL")
							    (name . slice_expression))
							   ((type . "SYMBOL")
							    (name . call_expression))
							   ((type . "SYMBOL")
							    (name . type_assertion_expression))
							   ((type . "SYMBOL")
							    (name . type_conversion_expression))
							   ((type . "SYMBOL")
							    (name . identifier))
							   ((type . "ALIAS")
							    (content (type . "CHOICE")
								     (members ((type . "STRING")
									       (value . "new"))
									      ((type . "STRING")
									       (value . "make"))))
							    (named . t)
							    (value . identifier))
							   ((type . "SYMBOL")
							    (name . composite_literal))
							   ((type . "SYMBOL")
							    (name . func_literal))
							   ((type . "CHOICE")
							    (members ((type . "SYMBOL")
								      (name . raw_string_literal))
								     ((type . "SYMBOL")
								      (name . interpreted_string_literal))))
							   ((type . "SYMBOL")
							    (name . int_literal))
							   ((type . "SYMBOL")
							    (name . float_literal))
							   ((type . "SYMBOL")
							    (name . imaginary_literal))
							   ((type . "SYMBOL")
							    (name . rune_literal))
							   ((type . "SYMBOL")
							    (name))
							   ((type . "SYMBOL")
							    (name . true))
							   ((type . "SYMBOL")
							    (name . false))
							   ((type . "SYMBOL")
							    (name . parenthesized_expression))))
						 ((type . "SYMBOL")
						  (name . send_statement))
						 ((type . "SYMBOL")
						  (name . inc_statement))
						 ((type . "SYMBOL")
						  (name . dec_statement))
						 ((type . "SYMBOL")
						  (name . assignment_statement))
						 ((type . "SYMBOL")
						  (name . short_var_declaration))))
				       ((type . "SYMBOL")
					(name . return_statement))
				       ((type . "SYMBOL")
					(name . go_statement))
				       ((type . "SYMBOL")
					(name . defer_statement))
				       ((type . "SYMBOL")
					(name . if_statement))
				       ((type . "SYMBOL")
					(name . for_statement))
				       ((type . "SYMBOL")
					(name . expression_switch_statement))
				       ((type . "SYMBOL")
					(name . type_switch_statement))
				       ((type . "SYMBOL")
					(name . select_statement))
				       ((type . "SYMBOL")
					(name . labeled_statement))
				       ((type . "SYMBOL")
					(name . fallthrough_statement))
				       ((type . "SYMBOL")
					(name . break_statement))
				       ((type . "SYMBOL")
					(name . continue_statement))
				       ((type . "SYMBOL")
					(name . goto_statement))
				       ((type . "SYMBOL")
					(name . block))
				       ((type . "SYMBOL")
					(name . empty_statement))))))
 (empty_labeled_statement (type . "SEQ")
			  (members ((type . "FIELD")
				    (name . "label")
				    (content (type . "ALIAS")
					     (content (type . "SYMBOL")
						      (name . identifier))
					     (named . t)
					     (value . label_name)))
				   ((type . "STRING")
				    (value . ":"))))
 (fallthrough_statement (type . "PREC_LEFT")
			(value . 0)
			(content (type . "STRING") (value . "fallthrough")))
 (break_statement (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "break"))
			   ((type . "CHOICE")
			    (members ((type . "ALIAS")
				      (content (type . "SYMBOL")
					       (name . identifier))
				      (named . t)
				      (value . label_name))
				     ((type . "BLANK"))))))
 (continue_statement (type . "SEQ")
		     (members ((type . "STRING")
			       (value . "continue"))
			      ((type . "CHOICE")
			       (members ((type . "ALIAS")
					 (content (type . "SYMBOL")
						  (name . identifier))
					 (named . t)
					 (value . label_name))
					((type . "BLANK"))))))
 (goto_statement (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "goto"))
			  ((type . "ALIAS")
			   (content (type . "SYMBOL") (name . identifier))
			   (named . t)
			   (value . label_name))))
 (return_statement (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "return"))
			    ((type . "CHOICE")
			     (members ((type . "SYMBOL")
				       (name . expression_list))
				      ((type . "BLANK"))))))
 (go_statement (type . "SEQ")
	       (members ((type . "STRING")
			 (value . "go"))
			((type . "CHOICE")
			 (members ((type . "SYMBOL")
				   (name . unary_expression))
				  ((type . "SYMBOL")
				   (name . binary_expression))
				  ((type . "SYMBOL")
				   (name . selector_expression))
				  ((type . "SYMBOL")
				   (name . index_expression))
				  ((type . "SYMBOL")
				   (name . slice_expression))
				  ((type . "SYMBOL")
				   (name . call_expression))
				  ((type . "SYMBOL")
				   (name . type_assertion_expression))
				  ((type . "SYMBOL")
				   (name . type_conversion_expression))
				  ((type . "SYMBOL")
				   (name . identifier))
				  ((type . "ALIAS")
				   (content (type . "CHOICE")
					    (members ((type . "STRING")
						      (value . "new"))
						     ((type . "STRING")
						      (value . "make"))))
				   (named . t)
				   (value . identifier))
				  ((type . "SYMBOL")
				   (name . composite_literal))
				  ((type . "SYMBOL")
				   (name . func_literal))
				  ((type . "CHOICE")
				   (members ((type . "SYMBOL")
					     (name . raw_string_literal))
					    ((type . "SYMBOL")
					     (name . interpreted_string_literal))))
				  ((type . "SYMBOL")
				   (name . int_literal))
				  ((type . "SYMBOL")
				   (name . float_literal))
				  ((type . "SYMBOL")
				   (name . imaginary_literal))
				  ((type . "SYMBOL")
				   (name . rune_literal))
				  ((type . "SYMBOL")
				   (name))
				  ((type . "SYMBOL")
				   (name . true))
				  ((type . "SYMBOL")
				   (name . false))
				  ((type . "SYMBOL")
				   (name . parenthesized_expression))))))
 (defer_statement (type . "SEQ")
   (members ((type . "STRING")
	     (value . "defer"))
	    ((type . "CHOICE")
	     (members ((type . "SYMBOL")
		       (name . unary_expression))
		      ((type . "SYMBOL")
		       (name . binary_expression))
		      ((type . "SYMBOL")
		       (name . selector_expression))
		      ((type . "SYMBOL")
		       (name . index_expression))
		      ((type . "SYMBOL")
		       (name . slice_expression))
		      ((type . "SYMBOL")
		       (name . call_expression))
		      ((type . "SYMBOL")
		       (name . type_assertion_expression))
		      ((type . "SYMBOL")
		       (name . type_conversion_expression))
		      ((type . "SYMBOL")
		       (name . identifier))
		      ((type . "ALIAS")
		       (content (type . "CHOICE")
				(members ((type . "STRING")
					  (value . "new"))
					 ((type . "STRING")
					  (value . "make"))))
		       (named . t)
		       (value . identifier))
		      ((type . "SYMBOL")
		       (name . composite_literal))
		      ((type . "SYMBOL")
		       (name . func_literal))
		      ((type . "CHOICE")
		       (members ((type . "SYMBOL")
				 (name . raw_string_literal))
				((type . "SYMBOL")
				 (name . interpreted_string_literal))))
		      ((type . "SYMBOL")
		       (name . int_literal))
		      ((type . "SYMBOL")
		       (name . float_literal))
		      ((type . "SYMBOL")
		       (name . imaginary_literal))
		      ((type . "SYMBOL")
		       (name . rune_literal))
		      ((type . "SYMBOL")
		       (name))
		      ((type . "SYMBOL")
		       (name . true))
		      ((type . "SYMBOL")
		       (name . false))
		      ((type . "SYMBOL")
		       (name . parenthesized_expression))))))
 (if_statement (type . "SEQ")
	       (members ((type . "STRING")
			 (value . "if"))
			((type . "CHOICE")
			 (members ((type . "SEQ")
				   (members ((type . "FIELD")
					     (name . "initializer")
					     (content (type . "CHOICE")
						      (members ((type . "CHOICE")
								(members ((type . "SYMBOL")
									  (name . unary_expression))
									 ((type . "SYMBOL")
									  (name . binary_expression))
									 ((type . "SYMBOL")
									  (name . selector_expression))
									 ((type . "SYMBOL")
									  (name . index_expression))
									 ((type . "SYMBOL")
									  (name . slice_expression))
									 ((type . "SYMBOL")
									  (name . call_expression))
									 ((type . "SYMBOL")
									  (name . type_assertion_expression))
									 ((type . "SYMBOL")
									  (name . type_conversion_expression))
									 ((type . "SYMBOL")
									  (name . identifier))
									 ((type . "ALIAS")
									  (content (type . "CHOICE")
										   (members ((type . "STRING")
											     (value . "new"))
											    ((type . "STRING")
											     (value . "make"))))
									  (named . t)
									  (value . identifier))
									 ((type . "SYMBOL")
									  (name . composite_literal))
									 ((type . "SYMBOL")
									  (name . func_literal))
									 ((type . "CHOICE")
									  (members ((type . "SYMBOL")
										    (name . raw_string_literal))
										   ((type . "SYMBOL")
										    (name . interpreted_string_literal))))
									 ((type . "SYMBOL")
									  (name . int_literal))
									 ((type . "SYMBOL")
									  (name . float_literal))
									 ((type . "SYMBOL")
									  (name . imaginary_literal))
									 ((type . "SYMBOL")
									  (name . rune_literal))
									 ((type . "SYMBOL")
									  (name))
									 ((type . "SYMBOL")
									  (name . true))
									 ((type . "SYMBOL")
									  (name . false))
									 ((type . "SYMBOL")
									  (name . parenthesized_expression))))
							       ((type . "SYMBOL")
								(name . send_statement))
							       ((type . "SYMBOL")
								(name . inc_statement))
							       ((type . "SYMBOL")
								(name . dec_statement))
							       ((type . "SYMBOL")
								(name . assignment_statement))
							       ((type . "SYMBOL")
								(name . short_var_declaration)))))
					    ((type . "STRING")
					     (value . ";"))))
				  ((type . "BLANK"))))
			((type . "FIELD")
			 (name . "condition")
			 (content (type . "CHOICE")
				  (members ((type . "SYMBOL")
					    (name . unary_expression))
					   ((type . "SYMBOL")
					    (name . binary_expression))
					   ((type . "SYMBOL")
					    (name . selector_expression))
					   ((type . "SYMBOL")
					    (name . index_expression))
					   ((type . "SYMBOL")
					    (name . slice_expression))
					   ((type . "SYMBOL")
					    (name . call_expression))
					   ((type . "SYMBOL")
					    (name . type_assertion_expression))
					   ((type . "SYMBOL")
					    (name . type_conversion_expression))
					   ((type . "SYMBOL")
					    (name . identifier))
					   ((type . "ALIAS")
					    (content (type . "CHOICE")
						     (members ((type . "STRING")
							       (value . "new"))
							      ((type . "STRING")
							       (value . "make"))))
					    (named . t)
					    (value . identifier))
					   ((type . "SYMBOL")
					    (name . composite_literal))
					   ((type . "SYMBOL")
					    (name . func_literal))
					   ((type . "CHOICE")
					    (members ((type . "SYMBOL")
						      (name . raw_string_literal))
						     ((type . "SYMBOL")
						      (name . interpreted_string_literal))))
					   ((type . "SYMBOL")
					    (name . int_literal))
					   ((type . "SYMBOL")
					    (name . float_literal))
					   ((type . "SYMBOL")
					    (name . imaginary_literal))
					   ((type . "SYMBOL")
					    (name . rune_literal))
					   ((type . "SYMBOL")
					    (name))
					   ((type . "SYMBOL")
					    (name . true))
					   ((type . "SYMBOL")
					    (name . false))
					   ((type . "SYMBOL")
					    (name . parenthesized_expression)))))
			((type . "FIELD")
			 (name . "consequence")
			 (content (type . "SYMBOL") (name . block)))
			((type . "CHOICE")
			 (members ((type . "SEQ")
				   (members ((type . "STRING")
					     (value . "else"))
					    ((type . "FIELD")
					     (name . "alternative")
					     (content (type . "CHOICE")
						      (members ((type . "SYMBOL")
								(name . block))
							       ((type . "SYMBOL")
								(name . if_statement)))))))
				  ((type . "BLANK"))))))
 (for_statement (type . "SEQ")
		(members ((type . "STRING")
			  (value . "for"))
			 ((type . "CHOICE")
			  (members ((type . "CHOICE")
				    (members ((type . "CHOICE")
					      (members ((type . "SYMBOL")
							(name . unary_expression))
						       ((type . "SYMBOL")
							(name . binary_expression))
						       ((type . "SYMBOL")
							(name . selector_expression))
						       ((type . "SYMBOL")
							(name . index_expression))
						       ((type . "SYMBOL")
							(name . slice_expression))
						       ((type . "SYMBOL")
							(name . call_expression))
						       ((type . "SYMBOL")
							(name . type_assertion_expression))
						       ((type . "SYMBOL")
							(name . type_conversion_expression))
						       ((type . "SYMBOL")
							(name . identifier))
						       ((type . "ALIAS")
							(content (type . "CHOICE")
								 (members ((type . "STRING")
									   (value . "new"))
									  ((type . "STRING")
									   (value . "make"))))
							(named . t)
							(value . identifier))
						       ((type . "SYMBOL")
							(name . composite_literal))
						       ((type . "SYMBOL")
							(name . func_literal))
						       ((type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . raw_string_literal))
								 ((type . "SYMBOL")
								  (name . interpreted_string_literal))))
						       ((type . "SYMBOL")
							(name . int_literal))
						       ((type . "SYMBOL")
							(name . float_literal))
						       ((type . "SYMBOL")
							(name . imaginary_literal))
						       ((type . "SYMBOL")
							(name . rune_literal))
						       ((type . "SYMBOL")
							(name))
						       ((type . "SYMBOL")
							(name . true))
						       ((type . "SYMBOL")
							(name . false))
						       ((type . "SYMBOL")
							(name . parenthesized_expression))))
					     ((type . "SYMBOL")
					      (name . for_clause))
					     ((type . "SYMBOL")
					      (name . range_clause))))
				   ((type . "BLANK"))))
			 ((type . "FIELD")
			  (name . "body")
			  (content (type . "SYMBOL") (name . block)))))
 (for_clause (type . "SEQ")
	     (members ((type . "FIELD")
		       (name . "initializer")
		       (content (type . "CHOICE")
				(members ((type . "CHOICE")
					  (members ((type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . unary_expression))
							     ((type . "SYMBOL")
							      (name . binary_expression))
							     ((type . "SYMBOL")
							      (name . selector_expression))
							     ((type . "SYMBOL")
							      (name . index_expression))
							     ((type . "SYMBOL")
							      (name . slice_expression))
							     ((type . "SYMBOL")
							      (name . call_expression))
							     ((type . "SYMBOL")
							      (name . type_assertion_expression))
							     ((type . "SYMBOL")
							      (name . type_conversion_expression))
							     ((type . "SYMBOL")
							      (name . identifier))
							     ((type . "ALIAS")
							      (content (type . "CHOICE")
								       (members ((type . "STRING")
										 (value . "new"))
										((type . "STRING")
										 (value . "make"))))
							      (named . t)
							      (value . identifier))
							     ((type . "SYMBOL")
							      (name . composite_literal))
							     ((type . "SYMBOL")
							      (name . func_literal))
							     ((type . "CHOICE")
							      (members ((type . "SYMBOL")
									(name . raw_string_literal))
								       ((type . "SYMBOL")
									(name . interpreted_string_literal))))
							     ((type . "SYMBOL")
							      (name . int_literal))
							     ((type . "SYMBOL")
							      (name . float_literal))
							     ((type . "SYMBOL")
							      (name . imaginary_literal))
							     ((type . "SYMBOL")
							      (name . rune_literal))
							     ((type . "SYMBOL")
							      (name))
							     ((type . "SYMBOL")
							      (name . true))
							     ((type . "SYMBOL")
							      (name . false))
							     ((type . "SYMBOL")
							      (name . parenthesized_expression))))
						   ((type . "SYMBOL")
						    (name . send_statement))
						   ((type . "SYMBOL")
						    (name . inc_statement))
						   ((type . "SYMBOL")
						    (name . dec_statement))
						   ((type . "SYMBOL")
						    (name . assignment_statement))
						   ((type . "SYMBOL")
						    (name . short_var_declaration))))
					 ((type . "BLANK")))))
		      ((type . "STRING")
		       (value . ";"))
		      ((type . "FIELD")
		       (name . "condition")
		       (content (type . "CHOICE")
				(members ((type . "CHOICE")
					  (members ((type . "SYMBOL")
						    (name . unary_expression))
						   ((type . "SYMBOL")
						    (name . binary_expression))
						   ((type . "SYMBOL")
						    (name . selector_expression))
						   ((type . "SYMBOL")
						    (name . index_expression))
						   ((type . "SYMBOL")
						    (name . slice_expression))
						   ((type . "SYMBOL")
						    (name . call_expression))
						   ((type . "SYMBOL")
						    (name . type_assertion_expression))
						   ((type . "SYMBOL")
						    (name . type_conversion_expression))
						   ((type . "SYMBOL")
						    (name . identifier))
						   ((type . "ALIAS")
						    (content (type . "CHOICE")
							     (members ((type . "STRING")
								       (value . "new"))
								      ((type . "STRING")
								       (value . "make"))))
						    (named . t)
						    (value . identifier))
						   ((type . "SYMBOL")
						    (name . composite_literal))
						   ((type . "SYMBOL")
						    (name . func_literal))
						   ((type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . raw_string_literal))
							     ((type . "SYMBOL")
							      (name . interpreted_string_literal))))
						   ((type . "SYMBOL")
						    (name . int_literal))
						   ((type . "SYMBOL")
						    (name . float_literal))
						   ((type . "SYMBOL")
						    (name . imaginary_literal))
						   ((type . "SYMBOL")
						    (name . rune_literal))
						   ((type . "SYMBOL")
						    (name))
						   ((type . "SYMBOL")
						    (name . true))
						   ((type . "SYMBOL")
						    (name . false))
						   ((type . "SYMBOL")
						    (name . parenthesized_expression))))
					 ((type . "BLANK")))))
		      ((type . "STRING")
		       (value . ";"))
		      ((type . "FIELD")
		       (name . "update")
		       (content (type . "CHOICE")
				(members ((type . "CHOICE")
					  (members ((type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . unary_expression))
							     ((type . "SYMBOL")
							      (name . binary_expression))
							     ((type . "SYMBOL")
							      (name . selector_expression))
							     ((type . "SYMBOL")
							      (name . index_expression))
							     ((type . "SYMBOL")
							      (name . slice_expression))
							     ((type . "SYMBOL")
							      (name . call_expression))
							     ((type . "SYMBOL")
							      (name . type_assertion_expression))
							     ((type . "SYMBOL")
							      (name . type_conversion_expression))
							     ((type . "SYMBOL")
							      (name . identifier))
							     ((type . "ALIAS")
							      (content (type . "CHOICE")
								       (members ((type . "STRING")
										 (value . "new"))
										((type . "STRING")
										 (value . "make"))))
							      (named . t)
							      (value . identifier))
							     ((type . "SYMBOL")
							      (name . composite_literal))
							     ((type . "SYMBOL")
							      (name . func_literal))
							     ((type . "CHOICE")
							      (members ((type . "SYMBOL")
									(name . raw_string_literal))
								       ((type . "SYMBOL")
									(name . interpreted_string_literal))))
							     ((type . "SYMBOL")
							      (name . int_literal))
							     ((type . "SYMBOL")
							      (name . float_literal))
							     ((type . "SYMBOL")
							      (name . imaginary_literal))
							     ((type . "SYMBOL")
							      (name . rune_literal))
							     ((type . "SYMBOL")
							      (name))
							     ((type . "SYMBOL")
							      (name . true))
							     ((type . "SYMBOL")
							      (name . false))
							     ((type . "SYMBOL")
							      (name . parenthesized_expression))))
						   ((type . "SYMBOL")
						    (name . send_statement))
						   ((type . "SYMBOL")
						    (name . inc_statement))
						   ((type . "SYMBOL")
						    (name . dec_statement))
						   ((type . "SYMBOL")
						    (name . assignment_statement))
						   ((type . "SYMBOL")
						    (name . short_var_declaration))))
					 ((type . "BLANK")))))))
 (range_clause (type . "SEQ")
	       (members ((type . "CHOICE")
			 (members ((type . "SEQ")
				   (members ((type . "FIELD")
					     (name . "left")
					     (content (type . "SYMBOL")
						      (name . expression_list)))
					    ((type . "CHOICE")
					     (members ((type . "STRING")
						       (value . "="))
						      ((type . "STRING")
						       (value . ":="))))))
				  ((type . "BLANK"))))
			((type . "STRING")
			 (value . "range"))
			((type . "FIELD")
			 (name . "right")
			 (content (type . "CHOICE")
				  (members ((type . "SYMBOL")
					    (name . unary_expression))
					   ((type . "SYMBOL")
					    (name . binary_expression))
					   ((type . "SYMBOL")
					    (name . selector_expression))
					   ((type . "SYMBOL")
					    (name . index_expression))
					   ((type . "SYMBOL")
					    (name . slice_expression))
					   ((type . "SYMBOL")
					    (name . call_expression))
					   ((type . "SYMBOL")
					    (name . type_assertion_expression))
					   ((type . "SYMBOL")
					    (name . type_conversion_expression))
					   ((type . "SYMBOL")
					    (name . identifier))
					   ((type . "ALIAS")
					    (content (type . "CHOICE")
						     (members ((type . "STRING")
							       (value . "new"))
							      ((type . "STRING")
							       (value . "make"))))
					    (named . t)
					    (value . identifier))
					   ((type . "SYMBOL")
					    (name . composite_literal))
					   ((type . "SYMBOL")
					    (name . func_literal))
					   ((type . "CHOICE")
					    (members ((type . "SYMBOL")
						      (name . raw_string_literal))
						     ((type . "SYMBOL")
						      (name . interpreted_string_literal))))
					   ((type . "SYMBOL")
					    (name . int_literal))
					   ((type . "SYMBOL")
					    (name . float_literal))
					   ((type . "SYMBOL")
					    (name . imaginary_literal))
					   ((type . "SYMBOL")
					    (name . rune_literal))
					   ((type . "SYMBOL")
					    (name))
					   ((type . "SYMBOL")
					    (name . true))
					   ((type . "SYMBOL")
					    (name . false))
					   ((type . "SYMBOL")
					    (name . parenthesized_expression)))))))
 (expression_switch_statement (type . "SEQ")
			      (members ((type . "STRING")
					(value . "switch"))
				       ((type . "CHOICE")
					(members ((type . "SEQ")
						  (members ((type . "FIELD")
							    (name . "initializer")
							    (content (type . "CHOICE")
								     (members ((type . "CHOICE")
									       (members ((type . "SYMBOL")
											 (name . unary_expression))
											((type . "SYMBOL")
											 (name . binary_expression))
											((type . "SYMBOL")
											 (name . selector_expression))
											((type . "SYMBOL")
											 (name . index_expression))
											((type . "SYMBOL")
											 (name . slice_expression))
											((type . "SYMBOL")
											 (name . call_expression))
											((type . "SYMBOL")
											 (name . type_assertion_expression))
											((type . "SYMBOL")
											 (name . type_conversion_expression))
											((type . "SYMBOL")
											 (name . identifier))
											((type . "ALIAS")
											 (content (type . "CHOICE")
												  (members ((type . "STRING")
													    (value . "new"))
													   ((type . "STRING")
													    (value . "make"))))
											 (named . t)
											 (value . identifier))
											((type . "SYMBOL")
											 (name . composite_literal))
											((type . "SYMBOL")
											 (name . func_literal))
											((type . "CHOICE")
											 (members ((type . "SYMBOL")
												   (name . raw_string_literal))
												  ((type . "SYMBOL")
												   (name . interpreted_string_literal))))
											((type . "SYMBOL")
											 (name . int_literal))
											((type . "SYMBOL")
											 (name . float_literal))
											((type . "SYMBOL")
											 (name . imaginary_literal))
											((type . "SYMBOL")
											 (name . rune_literal))
											((type . "SYMBOL")
											 (name))
											((type . "SYMBOL")
											 (name . true))
											((type . "SYMBOL")
											 (name . false))
											((type . "SYMBOL")
											 (name . parenthesized_expression))))
									      ((type . "SYMBOL")
									       (name . send_statement))
									      ((type . "SYMBOL")
									       (name . inc_statement))
									      ((type . "SYMBOL")
									       (name . dec_statement))
									      ((type . "SYMBOL")
									       (name . assignment_statement))
									      ((type . "SYMBOL")
									       (name . short_var_declaration)))))
							   ((type . "STRING")
							    (value . ";"))))
						 ((type . "BLANK"))))
				       ((type . "FIELD")
					(name . "value")
					(content (type . "CHOICE")
						 (members ((type . "CHOICE")
							   (members ((type . "SYMBOL")
								     (name . unary_expression))
								    ((type . "SYMBOL")
								     (name . binary_expression))
								    ((type . "SYMBOL")
								     (name . selector_expression))
								    ((type . "SYMBOL")
								     (name . index_expression))
								    ((type . "SYMBOL")
								     (name . slice_expression))
								    ((type . "SYMBOL")
								     (name . call_expression))
								    ((type . "SYMBOL")
								     (name . type_assertion_expression))
								    ((type . "SYMBOL")
								     (name . type_conversion_expression))
								    ((type . "SYMBOL")
								     (name . identifier))
								    ((type . "ALIAS")
								     (content (type . "CHOICE")
									      (members ((type . "STRING")
											(value . "new"))
										       ((type . "STRING")
											(value . "make"))))
								     (named . t)
								     (value . identifier))
								    ((type . "SYMBOL")
								     (name . composite_literal))
								    ((type . "SYMBOL")
								     (name . func_literal))
								    ((type . "CHOICE")
								     (members ((type . "SYMBOL")
									       (name . raw_string_literal))
									      ((type . "SYMBOL")
									       (name . interpreted_string_literal))))
								    ((type . "SYMBOL")
								     (name . int_literal))
								    ((type . "SYMBOL")
								     (name . float_literal))
								    ((type . "SYMBOL")
								     (name . imaginary_literal))
								    ((type . "SYMBOL")
								     (name . rune_literal))
								    ((type . "SYMBOL")
								     (name))
								    ((type . "SYMBOL")
								     (name . true))
								    ((type . "SYMBOL")
								     (name . false))
								    ((type . "SYMBOL")
								     (name . parenthesized_expression))))
							  ((type . "BLANK")))))
				       ((type . "STRING")
					(value . "{"))
				       ((type . "REPEAT")
					(content (type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . expression_case))
							  ((type . "SYMBOL")
							   (name . default_case)))))
				       ((type . "STRING")
					(value . "}"))))
 (expression_case (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "case"))
			   ((type . "FIELD")
			    (name . "value")
			    (content (type . "SYMBOL")
				     (name . expression_list)))
			   ((type . "STRING")
			    (value . ":"))
			   ((type . "CHOICE")
			    (members ((type . "CHOICE")
				      (members ((type . "SEQ")
						(members ((type . "CHOICE")
							  (members ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . const_declaration))
									     ((type . "SYMBOL")
									      (name . type_declaration))
									     ((type . "SYMBOL")
									      (name . var_declaration))))
								   ((type . "CHOICE")
								    (members ((type . "CHOICE")
									      (members ((type . "SYMBOL")
											(name . unary_expression))
										       ((type . "SYMBOL")
											(name . binary_expression))
										       ((type . "SYMBOL")
											(name . selector_expression))
										       ((type . "SYMBOL")
											(name . index_expression))
										       ((type . "SYMBOL")
											(name . slice_expression))
										       ((type . "SYMBOL")
											(name . call_expression))
										       ((type . "SYMBOL")
											(name . type_assertion_expression))
										       ((type . "SYMBOL")
											(name . type_conversion_expression))
										       ((type . "SYMBOL")
											(name . identifier))
										       ((type . "ALIAS")
											(content (type . "CHOICE")
												 (members ((type . "STRING")
													   (value . "new"))
													  ((type . "STRING")
													   (value . "make"))))
											(named . t)
											(value . identifier))
										       ((type . "SYMBOL")
											(name . composite_literal))
										       ((type . "SYMBOL")
											(name . func_literal))
										       ((type . "CHOICE")
											(members ((type . "SYMBOL")
												  (name . raw_string_literal))
												 ((type . "SYMBOL")
												  (name . interpreted_string_literal))))
										       ((type . "SYMBOL")
											(name . int_literal))
										       ((type . "SYMBOL")
											(name . float_literal))
										       ((type . "SYMBOL")
											(name . imaginary_literal))
										       ((type . "SYMBOL")
											(name . rune_literal))
										       ((type . "SYMBOL")
											(name))
										       ((type . "SYMBOL")
											(name . true))
										       ((type . "SYMBOL")
											(name . false))
										       ((type . "SYMBOL")
											(name . parenthesized_expression))))
									     ((type . "SYMBOL")
									      (name . send_statement))
									     ((type . "SYMBOL")
									      (name . inc_statement))
									     ((type . "SYMBOL")
									      (name . dec_statement))
									     ((type . "SYMBOL")
									      (name . assignment_statement))
									     ((type . "SYMBOL")
									      (name . short_var_declaration))))
								   ((type . "SYMBOL")
								    (name . return_statement))
								   ((type . "SYMBOL")
								    (name . go_statement))
								   ((type . "SYMBOL")
								    (name . defer_statement))
								   ((type . "SYMBOL")
								    (name . if_statement))
								   ((type . "SYMBOL")
								    (name . for_statement))
								   ((type . "SYMBOL")
								    (name . expression_switch_statement))
								   ((type . "SYMBOL")
								    (name . type_switch_statement))
								   ((type . "SYMBOL")
								    (name . select_statement))
								   ((type . "SYMBOL")
								    (name . labeled_statement))
								   ((type . "SYMBOL")
								    (name . fallthrough_statement))
								   ((type . "SYMBOL")
								    (name . break_statement))
								   ((type . "SYMBOL")
								    (name . continue_statement))
								   ((type . "SYMBOL")
								    (name . goto_statement))
								   ((type . "SYMBOL")
								    (name . block))
								   ((type . "SYMBOL")
								    (name . empty_statement))))
							 ((type . "REPEAT")
							  (content (type . "SEQ")
								   (members ((type . "CHOICE")
									     (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";"))))
									    ((type . "CHOICE")
									     (members ((type . "CHOICE")
										       (members ((type . "SYMBOL")
												 (name . const_declaration))
												((type . "SYMBOL")
												 (name . type_declaration))
												((type . "SYMBOL")
												 (name . var_declaration))))
										      ((type . "CHOICE")
										       (members ((type . "CHOICE")
												 (members ((type . "SYMBOL")
													   (name . unary_expression))
													  ((type . "SYMBOL")
													   (name . binary_expression))
													  ((type . "SYMBOL")
													   (name . selector_expression))
													  ((type . "SYMBOL")
													   (name . index_expression))
													  ((type . "SYMBOL")
													   (name . slice_expression))
													  ((type . "SYMBOL")
													   (name . call_expression))
													  ((type . "SYMBOL")
													   (name . type_assertion_expression))
													  ((type . "SYMBOL")
													   (name . type_conversion_expression))
													  ((type . "SYMBOL")
													   (name . identifier))
													  ((type . "ALIAS")
													   (content (type . "CHOICE")
														    (members ((type . "STRING")
															      (value . "new"))
															     ((type . "STRING")
															      (value . "make"))))
													   (named . t)
													   (value . identifier))
													  ((type . "SYMBOL")
													   (name . composite_literal))
													  ((type . "SYMBOL")
													   (name . func_literal))
													  ((type . "CHOICE")
													   (members ((type . "SYMBOL")
														     (name . raw_string_literal))
														    ((type . "SYMBOL")
														     (name . interpreted_string_literal))))
													  ((type . "SYMBOL")
													   (name . int_literal))
													  ((type . "SYMBOL")
													   (name . float_literal))
													  ((type . "SYMBOL")
													   (name . imaginary_literal))
													  ((type . "SYMBOL")
													   (name . rune_literal))
													  ((type . "SYMBOL")
													   (name))
													  ((type . "SYMBOL")
													   (name . true))
													  ((type . "SYMBOL")
													   (name . false))
													  ((type . "SYMBOL")
													   (name . parenthesized_expression))))
												((type . "SYMBOL")
												 (name . send_statement))
												((type . "SYMBOL")
												 (name . inc_statement))
												((type . "SYMBOL")
												 (name . dec_statement))
												((type . "SYMBOL")
												 (name . assignment_statement))
												((type . "SYMBOL")
												 (name . short_var_declaration))))
										      ((type . "SYMBOL")
										       (name . return_statement))
										      ((type . "SYMBOL")
										       (name . go_statement))
										      ((type . "SYMBOL")
										       (name . defer_statement))
										      ((type . "SYMBOL")
										       (name . if_statement))
										      ((type . "SYMBOL")
										       (name . for_statement))
										      ((type . "SYMBOL")
										       (name . expression_switch_statement))
										      ((type . "SYMBOL")
										       (name . type_switch_statement))
										      ((type . "SYMBOL")
										       (name . select_statement))
										      ((type . "SYMBOL")
										       (name . labeled_statement))
										      ((type . "SYMBOL")
										       (name . fallthrough_statement))
										      ((type . "SYMBOL")
										       (name . break_statement))
										      ((type . "SYMBOL")
										       (name . continue_statement))
										      ((type . "SYMBOL")
										       (name . goto_statement))
										      ((type . "SYMBOL")
										       (name . block))
										      ((type . "SYMBOL")
										       (name . empty_statement)))))))
							 ((type . "CHOICE")
							  (members ((type . "SEQ")
								    (members ((type . "CHOICE")
									      (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";"))))
									     ((type . "CHOICE")
									      (members ((type . "ALIAS")
											(content (type . "SYMBOL")
												 (name . empty_labeled_statement))
											(named . t)
											(value . labeled_statement))
										       ((type . "BLANK"))))))
								   ((type . "BLANK"))))))
					       ((type . "ALIAS")
						(content (type . "SYMBOL")
							 (name . empty_labeled_statement))
						(named . t)
						(value . labeled_statement))))
				     ((type . "BLANK"))))))
 (default_case (type . "SEQ")
   (members ((type . "STRING")
	     (value . "default"))
	    ((type . "STRING")
	     (value . ":"))
	    ((type . "CHOICE")
	     (members ((type . "CHOICE")
		       (members ((type . "SEQ")
				 (members ((type . "CHOICE")
					   (members ((type . "CHOICE")
						     (members ((type . "SYMBOL")
							       (name . const_declaration))
							      ((type . "SYMBOL")
							       (name . type_declaration))
							      ((type . "SYMBOL")
							       (name . var_declaration))))
						    ((type . "CHOICE")
						     (members ((type . "CHOICE")
							       (members ((type . "SYMBOL")
									 (name . unary_expression))
									((type . "SYMBOL")
									 (name . binary_expression))
									((type . "SYMBOL")
									 (name . selector_expression))
									((type . "SYMBOL")
									 (name . index_expression))
									((type . "SYMBOL")
									 (name . slice_expression))
									((type . "SYMBOL")
									 (name . call_expression))
									((type . "SYMBOL")
									 (name . type_assertion_expression))
									((type . "SYMBOL")
									 (name . type_conversion_expression))
									((type . "SYMBOL")
									 (name . identifier))
									((type . "ALIAS")
									 (content (type . "CHOICE")
										  (members ((type . "STRING")
											    (value . "new"))
											   ((type . "STRING")
											    (value . "make"))))
									 (named . t)
									 (value . identifier))
									((type . "SYMBOL")
									 (name . composite_literal))
									((type . "SYMBOL")
									 (name . func_literal))
									((type . "CHOICE")
									 (members ((type . "SYMBOL")
										   (name . raw_string_literal))
										  ((type . "SYMBOL")
										   (name . interpreted_string_literal))))
									((type . "SYMBOL")
									 (name . int_literal))
									((type . "SYMBOL")
									 (name . float_literal))
									((type . "SYMBOL")
									 (name . imaginary_literal))
									((type . "SYMBOL")
									 (name . rune_literal))
									((type . "SYMBOL")
									 (name))
									((type . "SYMBOL")
									 (name . true))
									((type . "SYMBOL")
									 (name . false))
									((type . "SYMBOL")
									 (name . parenthesized_expression))))
							      ((type . "SYMBOL")
							       (name . send_statement))
							      ((type . "SYMBOL")
							       (name . inc_statement))
							      ((type . "SYMBOL")
							       (name . dec_statement))
							      ((type . "SYMBOL")
							       (name . assignment_statement))
							      ((type . "SYMBOL")
							       (name . short_var_declaration))))
						    ((type . "SYMBOL")
						     (name . return_statement))
						    ((type . "SYMBOL")
						     (name . go_statement))
						    ((type . "SYMBOL")
						     (name . defer_statement))
						    ((type . "SYMBOL")
						     (name . if_statement))
						    ((type . "SYMBOL")
						     (name . for_statement))
						    ((type . "SYMBOL")
						     (name . expression_switch_statement))
						    ((type . "SYMBOL")
						     (name . type_switch_statement))
						    ((type . "SYMBOL")
						     (name . select_statement))
						    ((type . "SYMBOL")
						     (name . labeled_statement))
						    ((type . "SYMBOL")
						     (name . fallthrough_statement))
						    ((type . "SYMBOL")
						     (name . break_statement))
						    ((type . "SYMBOL")
						     (name . continue_statement))
						    ((type . "SYMBOL")
						     (name . goto_statement))
						    ((type . "SYMBOL")
						     (name . block))
						    ((type . "SYMBOL")
						     (name . empty_statement))))
					  ((type . "REPEAT")
					   (content (type . "SEQ")
						    (members ((type . "CHOICE")
							      (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";"))))
							     ((type . "CHOICE")
							      (members ((type . "CHOICE")
									(members ((type . "SYMBOL")
										  (name . const_declaration))
										 ((type . "SYMBOL")
										  (name . type_declaration))
										 ((type . "SYMBOL")
										  (name . var_declaration))))
								       ((type . "CHOICE")
									(members ((type . "CHOICE")
										  (members ((type . "SYMBOL")
											    (name . unary_expression))
											   ((type . "SYMBOL")
											    (name . binary_expression))
											   ((type . "SYMBOL")
											    (name . selector_expression))
											   ((type . "SYMBOL")
											    (name . index_expression))
											   ((type . "SYMBOL")
											    (name . slice_expression))
											   ((type . "SYMBOL")
											    (name . call_expression))
											   ((type . "SYMBOL")
											    (name . type_assertion_expression))
											   ((type . "SYMBOL")
											    (name . type_conversion_expression))
											   ((type . "SYMBOL")
											    (name . identifier))
											   ((type . "ALIAS")
											    (content (type . "CHOICE")
												     (members ((type . "STRING")
													       (value . "new"))
													      ((type . "STRING")
													       (value . "make"))))
											    (named . t)
											    (value . identifier))
											   ((type . "SYMBOL")
											    (name . composite_literal))
											   ((type . "SYMBOL")
											    (name . func_literal))
											   ((type . "CHOICE")
											    (members ((type . "SYMBOL")
												      (name . raw_string_literal))
												     ((type . "SYMBOL")
												      (name . interpreted_string_literal))))
											   ((type . "SYMBOL")
											    (name . int_literal))
											   ((type . "SYMBOL")
											    (name . float_literal))
											   ((type . "SYMBOL")
											    (name . imaginary_literal))
											   ((type . "SYMBOL")
											    (name . rune_literal))
											   ((type . "SYMBOL")
											    (name))
											   ((type . "SYMBOL")
											    (name . true))
											   ((type . "SYMBOL")
											    (name . false))
											   ((type . "SYMBOL")
											    (name . parenthesized_expression))))
										 ((type . "SYMBOL")
										  (name . send_statement))
										 ((type . "SYMBOL")
										  (name . inc_statement))
										 ((type . "SYMBOL")
										  (name . dec_statement))
										 ((type . "SYMBOL")
										  (name . assignment_statement))
										 ((type . "SYMBOL")
										  (name . short_var_declaration))))
								       ((type . "SYMBOL")
									(name . return_statement))
								       ((type . "SYMBOL")
									(name . go_statement))
								       ((type . "SYMBOL")
									(name . defer_statement))
								       ((type . "SYMBOL")
									(name . if_statement))
								       ((type . "SYMBOL")
									(name . for_statement))
								       ((type . "SYMBOL")
									(name . expression_switch_statement))
								       ((type . "SYMBOL")
									(name . type_switch_statement))
								       ((type . "SYMBOL")
									(name . select_statement))
								       ((type . "SYMBOL")
									(name . labeled_statement))
								       ((type . "SYMBOL")
									(name . fallthrough_statement))
								       ((type . "SYMBOL")
									(name . break_statement))
								       ((type . "SYMBOL")
									(name . continue_statement))
								       ((type . "SYMBOL")
									(name . goto_statement))
								       ((type . "SYMBOL")
									(name . block))
								       ((type . "SYMBOL")
									(name . empty_statement)))))))
					  ((type . "CHOICE")
					   (members ((type . "SEQ")
						     (members ((type . "CHOICE")
							       (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";"))))
							      ((type . "CHOICE")
							       (members ((type . "ALIAS")
									 (content (type . "SYMBOL")
										  (name . empty_labeled_statement))
									 (named . t)
									 (value . labeled_statement))
									((type . "BLANK"))))))
						    ((type . "BLANK"))))))
				((type . "ALIAS")
				 (content (type . "SYMBOL")
					  (name . empty_labeled_statement))
				 (named . t)
				 (value . labeled_statement))))
		      ((type . "BLANK"))))))
 (type_switch_statement (type . "SEQ")
			(members ((type . "STRING")
				  (value . "switch"))
				 ((type . "SEQ")
				  (members ((type . "CHOICE")
					    (members ((type . "SEQ")
						      (members ((type . "FIELD")
								(name . "initializer")
								(content (type . "CHOICE")
									 (members ((type . "CHOICE")
										   (members ((type . "SYMBOL")
											     (name . unary_expression))
											    ((type . "SYMBOL")
											     (name . binary_expression))
											    ((type . "SYMBOL")
											     (name . selector_expression))
											    ((type . "SYMBOL")
											     (name . index_expression))
											    ((type . "SYMBOL")
											     (name . slice_expression))
											    ((type . "SYMBOL")
											     (name . call_expression))
											    ((type . "SYMBOL")
											     (name . type_assertion_expression))
											    ((type . "SYMBOL")
											     (name . type_conversion_expression))
											    ((type . "SYMBOL")
											     (name . identifier))
											    ((type . "ALIAS")
											     (content (type . "CHOICE")
												      (members ((type . "STRING")
														(value . "new"))
													       ((type . "STRING")
														(value . "make"))))
											     (named . t)
											     (value . identifier))
											    ((type . "SYMBOL")
											     (name . composite_literal))
											    ((type . "SYMBOL")
											     (name . func_literal))
											    ((type . "CHOICE")
											     (members ((type . "SYMBOL")
												       (name . raw_string_literal))
												      ((type . "SYMBOL")
												       (name . interpreted_string_literal))))
											    ((type . "SYMBOL")
											     (name . int_literal))
											    ((type . "SYMBOL")
											     (name . float_literal))
											    ((type . "SYMBOL")
											     (name . imaginary_literal))
											    ((type . "SYMBOL")
											     (name . rune_literal))
											    ((type . "SYMBOL")
											     (name))
											    ((type . "SYMBOL")
											     (name . true))
											    ((type . "SYMBOL")
											     (name . false))
											    ((type . "SYMBOL")
											     (name . parenthesized_expression))))
										  ((type . "SYMBOL")
										   (name . send_statement))
										  ((type . "SYMBOL")
										   (name . inc_statement))
										  ((type . "SYMBOL")
										   (name . dec_statement))
										  ((type . "SYMBOL")
										   (name . assignment_statement))
										  ((type . "SYMBOL")
										   (name . short_var_declaration)))))
							       ((type . "STRING")
								(value . ";"))))
						     ((type . "BLANK"))))
					   ((type . "CHOICE")
					    (members ((type . "SEQ")
						      (members ((type . "FIELD")
								(name . "alias")
								(content (type . "SYMBOL")
									 (name . expression_list)))
							       ((type . "STRING")
								(value . ":="))))
						     ((type . "BLANK"))))
					   ((type . "FIELD")
					    (name . "value")
					    (content (type . "CHOICE")
						     (members ((type . "SYMBOL")
							       (name . unary_expression))
							      ((type . "SYMBOL")
							       (name . binary_expression))
							      ((type . "SYMBOL")
							       (name . selector_expression))
							      ((type . "SYMBOL")
							       (name . index_expression))
							      ((type . "SYMBOL")
							       (name . slice_expression))
							      ((type . "SYMBOL")
							       (name . call_expression))
							      ((type . "SYMBOL")
							       (name . type_assertion_expression))
							      ((type . "SYMBOL")
							       (name . type_conversion_expression))
							      ((type . "SYMBOL")
							       (name . identifier))
							      ((type . "ALIAS")
							       (content (type . "CHOICE")
									(members ((type . "STRING")
										  (value . "new"))
										 ((type . "STRING")
										  (value . "make"))))
							       (named . t)
							       (value . identifier))
							      ((type . "SYMBOL")
							       (name . composite_literal))
							      ((type . "SYMBOL")
							       (name . func_literal))
							      ((type . "CHOICE")
							       (members ((type . "SYMBOL")
									 (name . raw_string_literal))
									((type . "SYMBOL")
									 (name . interpreted_string_literal))))
							      ((type . "SYMBOL")
							       (name . int_literal))
							      ((type . "SYMBOL")
							       (name . float_literal))
							      ((type . "SYMBOL")
							       (name . imaginary_literal))
							      ((type . "SYMBOL")
							       (name . rune_literal))
							      ((type . "SYMBOL")
							       (name))
							      ((type . "SYMBOL")
							       (name . true))
							      ((type . "SYMBOL")
							       (name . false))
							      ((type . "SYMBOL")
							       (name . parenthesized_expression)))))
					   ((type . "STRING")
					    (value . "."))
					   ((type . "STRING")
					    (value . "("))
					   ((type . "STRING")
					    (value . "type"))
					   ((type . "STRING")
					    (value . ")"))))
				 ((type . "STRING")
				  (value . "{"))
				 ((type . "REPEAT")
				  (content (type . "CHOICE")
					   (members ((type . "SYMBOL")
						     (name . type_case))
						    ((type . "SYMBOL")
						     (name . default_case)))))
				 ((type . "STRING")
				  (value . "}"))))
 (_type_switch_header (type . "SEQ")
		      (members ((type . "CHOICE")
				(members ((type . "SEQ")
					  (members ((type . "FIELD")
						    (name . "initializer")
						    (content (type . "CHOICE")
							     (members ((type . "CHOICE")
								       (members ((type . "SYMBOL")
										 (name . unary_expression))
										((type . "SYMBOL")
										 (name . binary_expression))
										((type . "SYMBOL")
										 (name . selector_expression))
										((type . "SYMBOL")
										 (name . index_expression))
										((type . "SYMBOL")
										 (name . slice_expression))
										((type . "SYMBOL")
										 (name . call_expression))
										((type . "SYMBOL")
										 (name . type_assertion_expression))
										((type . "SYMBOL")
										 (name . type_conversion_expression))
										((type . "SYMBOL")
										 (name . identifier))
										((type . "ALIAS")
										 (content (type . "CHOICE")
											  (members ((type . "STRING")
												    (value . "new"))
												   ((type . "STRING")
												    (value . "make"))))
										 (named . t)
										 (value . identifier))
										((type . "SYMBOL")
										 (name . composite_literal))
										((type . "SYMBOL")
										 (name . func_literal))
										((type . "CHOICE")
										 (members ((type . "SYMBOL")
											   (name . raw_string_literal))
											  ((type . "SYMBOL")
											   (name . interpreted_string_literal))))
										((type . "SYMBOL")
										 (name . int_literal))
										((type . "SYMBOL")
										 (name . float_literal))
										((type . "SYMBOL")
										 (name . imaginary_literal))
										((type . "SYMBOL")
										 (name . rune_literal))
										((type . "SYMBOL")
										 (name))
										((type . "SYMBOL")
										 (name . true))
										((type . "SYMBOL")
										 (name . false))
										((type . "SYMBOL")
										 (name . parenthesized_expression))))
								      ((type . "SYMBOL")
								       (name . send_statement))
								      ((type . "SYMBOL")
								       (name . inc_statement))
								      ((type . "SYMBOL")
								       (name . dec_statement))
								      ((type . "SYMBOL")
								       (name . assignment_statement))
								      ((type . "SYMBOL")
								       (name . short_var_declaration)))))
						   ((type . "STRING")
						    (value . ";"))))
					 ((type . "BLANK"))))
			       ((type . "CHOICE")
				(members ((type . "SEQ")
					  (members ((type . "FIELD")
						    (name . "alias")
						    (content (type . "SYMBOL")
							     (name . expression_list)))
						   ((type . "STRING")
						    (value . ":="))))
					 ((type . "BLANK"))))
			       ((type . "FIELD")
				(name . "value")
				(content (type . "CHOICE")
					 (members ((type . "SYMBOL")
						   (name . unary_expression))
						  ((type . "SYMBOL")
						   (name . binary_expression))
						  ((type . "SYMBOL")
						   (name . selector_expression))
						  ((type . "SYMBOL")
						   (name . index_expression))
						  ((type . "SYMBOL")
						   (name . slice_expression))
						  ((type . "SYMBOL")
						   (name . call_expression))
						  ((type . "SYMBOL")
						   (name . type_assertion_expression))
						  ((type . "SYMBOL")
						   (name . type_conversion_expression))
						  ((type . "SYMBOL")
						   (name . identifier))
						  ((type . "ALIAS")
						   (content (type . "CHOICE")
							    (members ((type . "STRING")
								      (value . "new"))
								     ((type . "STRING")
								      (value . "make"))))
						   (named . t)
						   (value . identifier))
						  ((type . "SYMBOL")
						   (name . composite_literal))
						  ((type . "SYMBOL")
						   (name . func_literal))
						  ((type . "CHOICE")
						   (members ((type . "SYMBOL")
							     (name . raw_string_literal))
							    ((type . "SYMBOL")
							     (name . interpreted_string_literal))))
						  ((type . "SYMBOL")
						   (name . int_literal))
						  ((type . "SYMBOL")
						   (name . float_literal))
						  ((type . "SYMBOL")
						   (name . imaginary_literal))
						  ((type . "SYMBOL")
						   (name . rune_literal))
						  ((type . "SYMBOL")
						   (name))
						  ((type . "SYMBOL")
						   (name . true))
						  ((type . "SYMBOL")
						   (name . false))
						  ((type . "SYMBOL")
						   (name . parenthesized_expression)))))
			       ((type . "STRING")
				(value . "."))
			       ((type . "STRING")
				(value . "("))
			       ((type . "STRING")
				(value . "type"))
			       ((type . "STRING")
				(value . ")"))))
 (type_case (type . "SEQ")
	    (members ((type . "STRING")
		      (value . "case"))
		     ((type . "FIELD")
		      (name . "type")
		      (content (type . "SEQ")
			       (members ((type . "CHOICE")
					 (members ((type . "CHOICE")
						   (members ((type . "PREC_DYNAMIC")
							     (value . -1)
							     (content (type . "ALIAS")
								      (content (type . "SYMBOL")
									       (name . identifier))
								      (named . t)
								      (value . type_identifier)))
							    ((type . "SYMBOL")
							     (name . qualified_type))
							    ((type . "SYMBOL")
							     (name . pointer_type))
							    ((type . "SYMBOL")
							     (name . struct_type))
							    ((type . "SYMBOL")
							     (name . interface_type))
							    ((type . "SYMBOL")
							     (name . array_type))
							    ((type . "SYMBOL")
							     (name . slice_type))
							    ((type . "SYMBOL")
							     (name . map_type))
							    ((type . "SYMBOL")
							     (name . channel_type))
							    ((type . "SYMBOL")
							     (name . function_type))))
						  ((type . "SYMBOL")
						   (name . parenthesized_type))))
					((type . "REPEAT")
					 (content (type . "SEQ")
						  (members ((type . "STRING")
							    (value . ","))
							   ((type . "CHOICE")
							    (members ((type . "CHOICE")
								      (members ((type . "PREC_DYNAMIC")
										(value . -1)
										(content (type . "ALIAS")
											 (content (type . "SYMBOL")
												  (name . identifier))
											 (named . t)
											 (value . type_identifier)))
									       ((type . "SYMBOL")
										(name . qualified_type))
									       ((type . "SYMBOL")
										(name . pointer_type))
									       ((type . "SYMBOL")
										(name . struct_type))
									       ((type . "SYMBOL")
										(name . interface_type))
									       ((type . "SYMBOL")
										(name . array_type))
									       ((type . "SYMBOL")
										(name . slice_type))
									       ((type . "SYMBOL")
										(name . map_type))
									       ((type . "SYMBOL")
										(name . channel_type))
									       ((type . "SYMBOL")
										(name . function_type))))
								     ((type . "SYMBOL")
								      (name . parenthesized_type))))))))))
		     ((type . "STRING")
		      (value . ":"))
		     ((type . "CHOICE")
		      (members ((type . "CHOICE")
				(members ((type . "SEQ")
					  (members ((type . "CHOICE")
						    (members ((type . "CHOICE")
							      (members ((type . "SYMBOL")
									(name . const_declaration))
								       ((type . "SYMBOL")
									(name . type_declaration))
								       ((type . "SYMBOL")
									(name . var_declaration))))
							     ((type . "CHOICE")
							      (members ((type . "CHOICE")
									(members ((type . "SYMBOL")
										  (name . unary_expression))
										 ((type . "SYMBOL")
										  (name . binary_expression))
										 ((type . "SYMBOL")
										  (name . selector_expression))
										 ((type . "SYMBOL")
										  (name . index_expression))
										 ((type . "SYMBOL")
										  (name . slice_expression))
										 ((type . "SYMBOL")
										  (name . call_expression))
										 ((type . "SYMBOL")
										  (name . type_assertion_expression))
										 ((type . "SYMBOL")
										  (name . type_conversion_expression))
										 ((type . "SYMBOL")
										  (name . identifier))
										 ((type . "ALIAS")
										  (content (type . "CHOICE")
											   (members ((type . "STRING")
												     (value . "new"))
												    ((type . "STRING")
												     (value . "make"))))
										  (named . t)
										  (value . identifier))
										 ((type . "SYMBOL")
										  (name . composite_literal))
										 ((type . "SYMBOL")
										  (name . func_literal))
										 ((type . "CHOICE")
										  (members ((type . "SYMBOL")
											    (name . raw_string_literal))
											   ((type . "SYMBOL")
											    (name . interpreted_string_literal))))
										 ((type . "SYMBOL")
										  (name . int_literal))
										 ((type . "SYMBOL")
										  (name . float_literal))
										 ((type . "SYMBOL")
										  (name . imaginary_literal))
										 ((type . "SYMBOL")
										  (name . rune_literal))
										 ((type . "SYMBOL")
										  (name))
										 ((type . "SYMBOL")
										  (name . true))
										 ((type . "SYMBOL")
										  (name . false))
										 ((type . "SYMBOL")
										  (name . parenthesized_expression))))
								       ((type . "SYMBOL")
									(name . send_statement))
								       ((type . "SYMBOL")
									(name . inc_statement))
								       ((type . "SYMBOL")
									(name . dec_statement))
								       ((type . "SYMBOL")
									(name . assignment_statement))
								       ((type . "SYMBOL")
									(name . short_var_declaration))))
							     ((type . "SYMBOL")
							      (name . return_statement))
							     ((type . "SYMBOL")
							      (name . go_statement))
							     ((type . "SYMBOL")
							      (name . defer_statement))
							     ((type . "SYMBOL")
							      (name . if_statement))
							     ((type . "SYMBOL")
							      (name . for_statement))
							     ((type . "SYMBOL")
							      (name . expression_switch_statement))
							     ((type . "SYMBOL")
							      (name . type_switch_statement))
							     ((type . "SYMBOL")
							      (name . select_statement))
							     ((type . "SYMBOL")
							      (name . labeled_statement))
							     ((type . "SYMBOL")
							      (name . fallthrough_statement))
							     ((type . "SYMBOL")
							      (name . break_statement))
							     ((type . "SYMBOL")
							      (name . continue_statement))
							     ((type . "SYMBOL")
							      (name . goto_statement))
							     ((type . "SYMBOL")
							      (name . block))
							     ((type . "SYMBOL")
							      (name . empty_statement))))
						   ((type . "REPEAT")
						    (content (type . "SEQ")
							     (members ((type . "CHOICE")
								       (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";"))))
								      ((type . "CHOICE")
								       (members ((type . "CHOICE")
										 (members ((type . "SYMBOL")
											   (name . const_declaration))
											  ((type . "SYMBOL")
											   (name . type_declaration))
											  ((type . "SYMBOL")
											   (name . var_declaration))))
										((type . "CHOICE")
										 (members ((type . "CHOICE")
											   (members ((type . "SYMBOL")
												     (name . unary_expression))
												    ((type . "SYMBOL")
												     (name . binary_expression))
												    ((type . "SYMBOL")
												     (name . selector_expression))
												    ((type . "SYMBOL")
												     (name . index_expression))
												    ((type . "SYMBOL")
												     (name . slice_expression))
												    ((type . "SYMBOL")
												     (name . call_expression))
												    ((type . "SYMBOL")
												     (name . type_assertion_expression))
												    ((type . "SYMBOL")
												     (name . type_conversion_expression))
												    ((type . "SYMBOL")
												     (name . identifier))
												    ((type . "ALIAS")
												     (content (type . "CHOICE")
													      (members ((type . "STRING")
															(value . "new"))
														       ((type . "STRING")
															(value . "make"))))
												     (named . t)
												     (value . identifier))
												    ((type . "SYMBOL")
												     (name . composite_literal))
												    ((type . "SYMBOL")
												     (name . func_literal))
												    ((type . "CHOICE")
												     (members ((type . "SYMBOL")
													       (name . raw_string_literal))
													      ((type . "SYMBOL")
													       (name . interpreted_string_literal))))
												    ((type . "SYMBOL")
												     (name . int_literal))
												    ((type . "SYMBOL")
												     (name . float_literal))
												    ((type . "SYMBOL")
												     (name . imaginary_literal))
												    ((type . "SYMBOL")
												     (name . rune_literal))
												    ((type . "SYMBOL")
												     (name))
												    ((type . "SYMBOL")
												     (name . true))
												    ((type . "SYMBOL")
												     (name . false))
												    ((type . "SYMBOL")
												     (name . parenthesized_expression))))
											  ((type . "SYMBOL")
											   (name . send_statement))
											  ((type . "SYMBOL")
											   (name . inc_statement))
											  ((type . "SYMBOL")
											   (name . dec_statement))
											  ((type . "SYMBOL")
											   (name . assignment_statement))
											  ((type . "SYMBOL")
											   (name . short_var_declaration))))
										((type . "SYMBOL")
										 (name . return_statement))
										((type . "SYMBOL")
										 (name . go_statement))
										((type . "SYMBOL")
										 (name . defer_statement))
										((type . "SYMBOL")
										 (name . if_statement))
										((type . "SYMBOL")
										 (name . for_statement))
										((type . "SYMBOL")
										 (name . expression_switch_statement))
										((type . "SYMBOL")
										 (name . type_switch_statement))
										((type . "SYMBOL")
										 (name . select_statement))
										((type . "SYMBOL")
										 (name . labeled_statement))
										((type . "SYMBOL")
										 (name . fallthrough_statement))
										((type . "SYMBOL")
										 (name . break_statement))
										((type . "SYMBOL")
										 (name . continue_statement))
										((type . "SYMBOL")
										 (name . goto_statement))
										((type . "SYMBOL")
										 (name . block))
										((type . "SYMBOL")
										 (name . empty_statement)))))))
						   ((type . "CHOICE")
						    (members ((type . "SEQ")
							      (members ((type . "CHOICE")
									(members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";"))))
								       ((type . "CHOICE")
									(members ((type . "ALIAS")
										  (content (type . "SYMBOL")
											   (name . empty_labeled_statement))
										  (named . t)
										  (value . labeled_statement))
										 ((type . "BLANK"))))))
							     ((type . "BLANK"))))))
					 ((type . "ALIAS")
					  (content (type . "SYMBOL")
						   (name . empty_labeled_statement))
					  (named . t)
					  (value . labeled_statement))))
			       ((type . "BLANK"))))))
 (select_statement (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "select"))
			    ((type . "STRING")
			     (value . "{"))
			    ((type . "REPEAT")
			     (content (type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . communication_case))
					       ((type . "SYMBOL")
						(name . default_case)))))
			    ((type . "STRING")
			     (value . "}"))))
 (communication_case (type . "SEQ")
		     (members ((type . "STRING")
			       (value . "case"))
			      ((type . "FIELD")
			       (name . "communication")
			       (content (type . "CHOICE")
					(members ((type . "SYMBOL")
						  (name . send_statement))
						 ((type . "SYMBOL")
						  (name . receive_statement)))))
			      ((type . "STRING")
			       (value . ":"))
			      ((type . "CHOICE")
			       (members ((type . "CHOICE")
					 (members ((type . "SEQ")
						   (members ((type . "CHOICE")
							     (members ((type . "CHOICE")
								       (members ((type . "SYMBOL")
										 (name . const_declaration))
										((type . "SYMBOL")
										 (name . type_declaration))
										((type . "SYMBOL")
										 (name . var_declaration))))
								      ((type . "CHOICE")
								       (members ((type . "CHOICE")
										 (members ((type . "SYMBOL")
											   (name . unary_expression))
											  ((type . "SYMBOL")
											   (name . binary_expression))
											  ((type . "SYMBOL")
											   (name . selector_expression))
											  ((type . "SYMBOL")
											   (name . index_expression))
											  ((type . "SYMBOL")
											   (name . slice_expression))
											  ((type . "SYMBOL")
											   (name . call_expression))
											  ((type . "SYMBOL")
											   (name . type_assertion_expression))
											  ((type . "SYMBOL")
											   (name . type_conversion_expression))
											  ((type . "SYMBOL")
											   (name . identifier))
											  ((type . "ALIAS")
											   (content (type . "CHOICE")
												    (members ((type . "STRING")
													      (value . "new"))
													     ((type . "STRING")
													      (value . "make"))))
											   (named . t)
											   (value . identifier))
											  ((type . "SYMBOL")
											   (name . composite_literal))
											  ((type . "SYMBOL")
											   (name . func_literal))
											  ((type . "CHOICE")
											   (members ((type . "SYMBOL")
												     (name . raw_string_literal))
												    ((type . "SYMBOL")
												     (name . interpreted_string_literal))))
											  ((type . "SYMBOL")
											   (name . int_literal))
											  ((type . "SYMBOL")
											   (name . float_literal))
											  ((type . "SYMBOL")
											   (name . imaginary_literal))
											  ((type . "SYMBOL")
											   (name . rune_literal))
											  ((type . "SYMBOL")
											   (name))
											  ((type . "SYMBOL")
											   (name . true))
											  ((type . "SYMBOL")
											   (name . false))
											  ((type . "SYMBOL")
											   (name . parenthesized_expression))))
										((type . "SYMBOL")
										 (name . send_statement))
										((type . "SYMBOL")
										 (name . inc_statement))
										((type . "SYMBOL")
										 (name . dec_statement))
										((type . "SYMBOL")
										 (name . assignment_statement))
										((type . "SYMBOL")
										 (name . short_var_declaration))))
								      ((type . "SYMBOL")
								       (name . return_statement))
								      ((type . "SYMBOL")
								       (name . go_statement))
								      ((type . "SYMBOL")
								       (name . defer_statement))
								      ((type . "SYMBOL")
								       (name . if_statement))
								      ((type . "SYMBOL")
								       (name . for_statement))
								      ((type . "SYMBOL")
								       (name . expression_switch_statement))
								      ((type . "SYMBOL")
								       (name . type_switch_statement))
								      ((type . "SYMBOL")
								       (name . select_statement))
								      ((type . "SYMBOL")
								       (name . labeled_statement))
								      ((type . "SYMBOL")
								       (name . fallthrough_statement))
								      ((type . "SYMBOL")
								       (name . break_statement))
								      ((type . "SYMBOL")
								       (name . continue_statement))
								      ((type . "SYMBOL")
								       (name . goto_statement))
								      ((type . "SYMBOL")
								       (name . block))
								      ((type . "SYMBOL")
								       (name . empty_statement))))
							    ((type . "REPEAT")
							     (content (type . "SEQ")
								      (members ((type . "CHOICE")
										(members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";"))))
									       ((type . "CHOICE")
										(members ((type . "CHOICE")
											  (members ((type . "SYMBOL")
												    (name . const_declaration))
												   ((type . "SYMBOL")
												    (name . type_declaration))
												   ((type . "SYMBOL")
												    (name . var_declaration))))
											 ((type . "CHOICE")
											  (members ((type . "CHOICE")
												    (members ((type . "SYMBOL")
													      (name . unary_expression))
													     ((type . "SYMBOL")
													      (name . binary_expression))
													     ((type . "SYMBOL")
													      (name . selector_expression))
													     ((type . "SYMBOL")
													      (name . index_expression))
													     ((type . "SYMBOL")
													      (name . slice_expression))
													     ((type . "SYMBOL")
													      (name . call_expression))
													     ((type . "SYMBOL")
													      (name . type_assertion_expression))
													     ((type . "SYMBOL")
													      (name . type_conversion_expression))
													     ((type . "SYMBOL")
													      (name . identifier))
													     ((type . "ALIAS")
													      (content (type . "CHOICE")
														       (members ((type . "STRING")
																 (value . "new"))
																((type . "STRING")
																 (value . "make"))))
													      (named . t)
													      (value . identifier))
													     ((type . "SYMBOL")
													      (name . composite_literal))
													     ((type . "SYMBOL")
													      (name . func_literal))
													     ((type . "CHOICE")
													      (members ((type . "SYMBOL")
															(name . raw_string_literal))
														       ((type . "SYMBOL")
															(name . interpreted_string_literal))))
													     ((type . "SYMBOL")
													      (name . int_literal))
													     ((type . "SYMBOL")
													      (name . float_literal))
													     ((type . "SYMBOL")
													      (name . imaginary_literal))
													     ((type . "SYMBOL")
													      (name . rune_literal))
													     ((type . "SYMBOL")
													      (name))
													     ((type . "SYMBOL")
													      (name . true))
													     ((type . "SYMBOL")
													      (name . false))
													     ((type . "SYMBOL")
													      (name . parenthesized_expression))))
												   ((type . "SYMBOL")
												    (name . send_statement))
												   ((type . "SYMBOL")
												    (name . inc_statement))
												   ((type . "SYMBOL")
												    (name . dec_statement))
												   ((type . "SYMBOL")
												    (name . assignment_statement))
												   ((type . "SYMBOL")
												    (name . short_var_declaration))))
											 ((type . "SYMBOL")
											  (name . return_statement))
											 ((type . "SYMBOL")
											  (name . go_statement))
											 ((type . "SYMBOL")
											  (name . defer_statement))
											 ((type . "SYMBOL")
											  (name . if_statement))
											 ((type . "SYMBOL")
											  (name . for_statement))
											 ((type . "SYMBOL")
											  (name . expression_switch_statement))
											 ((type . "SYMBOL")
											  (name . type_switch_statement))
											 ((type . "SYMBOL")
											  (name . select_statement))
											 ((type . "SYMBOL")
											  (name . labeled_statement))
											 ((type . "SYMBOL")
											  (name . fallthrough_statement))
											 ((type . "SYMBOL")
											  (name . break_statement))
											 ((type . "SYMBOL")
											  (name . continue_statement))
											 ((type . "SYMBOL")
											  (name . goto_statement))
											 ((type . "SYMBOL")
											  (name . block))
											 ((type . "SYMBOL")
											  (name . empty_statement)))))))
							    ((type . "CHOICE")
							     (members ((type . "SEQ")
								       (members ((type . "CHOICE")
										 (members ((type . "STRING") (value . "
")) ((type . "STRING") (value . ";"))))
										((type . "CHOICE")
										 (members ((type . "ALIAS")
											   (content (type . "SYMBOL")
												    (name . empty_labeled_statement))
											   (named . t)
											   (value . labeled_statement))
											  ((type . "BLANK"))))))
								      ((type . "BLANK"))))))
						  ((type . "ALIAS")
						   (content (type . "SYMBOL")
							    (name . empty_labeled_statement))
						   (named . t)
						   (value . labeled_statement))))
					((type . "BLANK"))))))
 (_expression (type . "CHOICE")
	      (members ((type . "SYMBOL")
			(name . unary_expression))
		       ((type . "SYMBOL")
			(name . binary_expression))
		       ((type . "SYMBOL")
			(name . selector_expression))
		       ((type . "SYMBOL")
			(name . index_expression))
		       ((type . "SYMBOL")
			(name . slice_expression))
		       ((type . "SYMBOL")
			(name . call_expression))
		       ((type . "SYMBOL")
			(name . type_assertion_expression))
		       ((type . "SYMBOL")
			(name . type_conversion_expression))
		       ((type . "SYMBOL")
			(name . identifier))
		       ((type . "ALIAS")
			(content (type . "CHOICE")
				 (members ((type . "STRING")
					   (value . "new"))
					  ((type . "STRING")
					   (value . "make"))))
			(named . t)
			(value . identifier))
		       ((type . "SYMBOL")
			(name . composite_literal))
		       ((type . "SYMBOL")
			(name . func_literal))
		       ((type . "CHOICE")
			(members ((type . "SYMBOL")
				  (name . raw_string_literal))
				 ((type . "SYMBOL")
				  (name . interpreted_string_literal))))
		       ((type . "SYMBOL")
			(name . int_literal))
		       ((type . "SYMBOL")
			(name . float_literal))
		       ((type . "SYMBOL")
			(name . imaginary_literal))
		       ((type . "SYMBOL")
			(name . rune_literal))
		       ((type . "SYMBOL")
			(name))
		       ((type . "SYMBOL")
			(name . true))
		       ((type . "SYMBOL")
			(name . false))
		       ((type . "SYMBOL")
			(name . parenthesized_expression))))
 (parenthesized_expression (type . "SEQ")
			   (members ((type . "STRING")
				     (value . "("))
				    ((type . "CHOICE")
				     (members ((type . "SYMBOL")
					       (name . unary_expression))
					      ((type . "SYMBOL")
					       (name . binary_expression))
					      ((type . "SYMBOL")
					       (name . selector_expression))
					      ((type . "SYMBOL")
					       (name . index_expression))
					      ((type . "SYMBOL")
					       (name . slice_expression))
					      ((type . "SYMBOL")
					       (name . call_expression))
					      ((type . "SYMBOL")
					       (name . type_assertion_expression))
					      ((type . "SYMBOL")
					       (name . type_conversion_expression))
					      ((type . "SYMBOL")
					       (name . identifier))
					      ((type . "ALIAS")
					       (content (type . "CHOICE")
							(members ((type . "STRING")
								  (value . "new"))
								 ((type . "STRING")
								  (value . "make"))))
					       (named . t)
					       (value . identifier))
					      ((type . "SYMBOL")
					       (name . composite_literal))
					      ((type . "SYMBOL")
					       (name . func_literal))
					      ((type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . raw_string_literal))
							((type . "SYMBOL")
							 (name . interpreted_string_literal))))
					      ((type . "SYMBOL")
					       (name . int_literal))
					      ((type . "SYMBOL")
					       (name . float_literal))
					      ((type . "SYMBOL")
					       (name . imaginary_literal))
					      ((type . "SYMBOL")
					       (name . rune_literal))
					      ((type . "SYMBOL")
					       (name))
					      ((type . "SYMBOL")
					       (name . true))
					      ((type . "SYMBOL")
					       (name . false))
					      ((type . "SYMBOL")
					       (name . parenthesized_expression))))
				    ((type . "STRING")
				     (value . ")"))))
 (call_expression (type . "PREC")
		  (value . 7)
		  (content (type . "CHOICE")
			   (members ((type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "function")
					       (content (type . "ALIAS")
							(content (type . "CHOICE")
								 (members ((type . "STRING")
									   (value . "new"))
									  ((type . "STRING")
									   (value . "make"))))
							(named . t)
							(value . identifier)))
					      ((type . "FIELD")
					       (name . "arguments")
					       (content (type . "ALIAS")
							(content (type . "SYMBOL")
								 (name . special_argument_list))
							(named . t)
							(value . argument_list)))))
				    ((type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "function")
					       (content (type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . unary_expression))
								 ((type . "SYMBOL")
								  (name . binary_expression))
								 ((type . "SYMBOL")
								  (name . selector_expression))
								 ((type . "SYMBOL")
								  (name . index_expression))
								 ((type . "SYMBOL")
								  (name . slice_expression))
								 ((type . "SYMBOL")
								  (name . call_expression))
								 ((type . "SYMBOL")
								  (name . type_assertion_expression))
								 ((type . "SYMBOL")
								  (name . type_conversion_expression))
								 ((type . "SYMBOL")
								  (name . identifier))
								 ((type . "ALIAS")
								  (content (type . "CHOICE")
									   (members ((type . "STRING")
										     (value . "new"))
										    ((type . "STRING")
										     (value . "make"))))
								  (named . t)
								  (value . identifier))
								 ((type . "SYMBOL")
								  (name . composite_literal))
								 ((type . "SYMBOL")
								  (name . func_literal))
								 ((type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . raw_string_literal))
									   ((type . "SYMBOL")
									    (name . interpreted_string_literal))))
								 ((type . "SYMBOL")
								  (name . int_literal))
								 ((type . "SYMBOL")
								  (name . float_literal))
								 ((type . "SYMBOL")
								  (name . imaginary_literal))
								 ((type . "SYMBOL")
								  (name . rune_literal))
								 ((type . "SYMBOL")
								  (name))
								 ((type . "SYMBOL")
								  (name . true))
								 ((type . "SYMBOL")
								  (name . false))
								 ((type . "SYMBOL")
								  (name . parenthesized_expression)))))
					      ((type . "FIELD")
					       (name . "arguments")
					       (content (type . "SYMBOL")
							(name . argument_list))))))))
 (variadic_argument (type . "PREC_RIGHT")
		    (value . 0)
		    (content (type . "SEQ")
			     (members ((type . "CHOICE")
				       (members ((type . "SYMBOL")
						 (name . unary_expression))
						((type . "SYMBOL")
						 (name . binary_expression))
						((type . "SYMBOL")
						 (name . selector_expression))
						((type . "SYMBOL")
						 (name . index_expression))
						((type . "SYMBOL")
						 (name . slice_expression))
						((type . "SYMBOL")
						 (name . call_expression))
						((type . "SYMBOL")
						 (name . type_assertion_expression))
						((type . "SYMBOL")
						 (name . type_conversion_expression))
						((type . "SYMBOL")
						 (name . identifier))
						((type . "ALIAS")
						 (content (type . "CHOICE")
							  (members ((type . "STRING")
								    (value . "new"))
								   ((type . "STRING")
								    (value . "make"))))
						 (named . t)
						 (value . identifier))
						((type . "SYMBOL")
						 (name . composite_literal))
						((type . "SYMBOL")
						 (name . func_literal))
						((type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . raw_string_literal))
							  ((type . "SYMBOL")
							   (name . interpreted_string_literal))))
						((type . "SYMBOL")
						 (name . int_literal))
						((type . "SYMBOL")
						 (name . float_literal))
						((type . "SYMBOL")
						 (name . imaginary_literal))
						((type . "SYMBOL")
						 (name . rune_literal))
						((type . "SYMBOL")
						 (name))
						((type . "SYMBOL")
						 (name . true))
						((type . "SYMBOL")
						 (name . false))
						((type . "SYMBOL")
						 (name . parenthesized_expression))))
				      ((type . "STRING")
				       (value . "...")))))
 (special_argument_list (type . "SEQ")
			(members ((type . "STRING")
				  (value . "("))
				 ((type . "CHOICE")
				  (members ((type . "CHOICE")
					    (members ((type . "PREC_DYNAMIC")
						      (value . -1)
						      (content (type . "ALIAS")
							       (content (type . "SYMBOL")
									(name . identifier))
							       (named . t)
							       (value . type_identifier)))
						     ((type . "SYMBOL")
						      (name . qualified_type))
						     ((type . "SYMBOL")
						      (name . pointer_type))
						     ((type . "SYMBOL")
						      (name . struct_type))
						     ((type . "SYMBOL")
						      (name . interface_type))
						     ((type . "SYMBOL")
						      (name . array_type))
						     ((type . "SYMBOL")
						      (name . slice_type))
						     ((type . "SYMBOL")
						      (name . map_type))
						     ((type . "SYMBOL")
						      (name . channel_type))
						     ((type . "SYMBOL")
						      (name . function_type))))
					   ((type . "SYMBOL")
					    (name . parenthesized_type))))
				 ((type . "REPEAT")
				  (content (type . "SEQ")
					   (members ((type . "STRING")
						     (value . ","))
						    ((type . "CHOICE")
						     (members ((type . "SYMBOL")
							       (name . unary_expression))
							      ((type . "SYMBOL")
							       (name . binary_expression))
							      ((type . "SYMBOL")
							       (name . selector_expression))
							      ((type . "SYMBOL")
							       (name . index_expression))
							      ((type . "SYMBOL")
							       (name . slice_expression))
							      ((type . "SYMBOL")
							       (name . call_expression))
							      ((type . "SYMBOL")
							       (name . type_assertion_expression))
							      ((type . "SYMBOL")
							       (name . type_conversion_expression))
							      ((type . "SYMBOL")
							       (name . identifier))
							      ((type . "ALIAS")
							       (content (type . "CHOICE")
									(members ((type . "STRING")
										  (value . "new"))
										 ((type . "STRING")
										  (value . "make"))))
							       (named . t)
							       (value . identifier))
							      ((type . "SYMBOL")
							       (name . composite_literal))
							      ((type . "SYMBOL")
							       (name . func_literal))
							      ((type . "CHOICE")
							       (members ((type . "SYMBOL")
									 (name . raw_string_literal))
									((type . "SYMBOL")
									 (name . interpreted_string_literal))))
							      ((type . "SYMBOL")
							       (name . int_literal))
							      ((type . "SYMBOL")
							       (name . float_literal))
							      ((type . "SYMBOL")
							       (name . imaginary_literal))
							      ((type . "SYMBOL")
							       (name . rune_literal))
							      ((type . "SYMBOL")
							       (name))
							      ((type . "SYMBOL")
							       (name . true))
							      ((type . "SYMBOL")
							       (name . false))
							      ((type . "SYMBOL")
							       (name . parenthesized_expression)))))))
				 ((type . "CHOICE")
				  (members ((type . "STRING")
					    (value . ","))
					   ((type . "BLANK"))))
				 ((type . "STRING")
				  (value . ")"))))
 (argument_list (type . "SEQ")
		(members ((type . "STRING")
			  (value . "("))
			 ((type . "CHOICE")
			  (members ((type . "SEQ")
				    (members ((type . "CHOICE")
					      (members ((type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . unary_expression))
								 ((type . "SYMBOL")
								  (name . binary_expression))
								 ((type . "SYMBOL")
								  (name . selector_expression))
								 ((type . "SYMBOL")
								  (name . index_expression))
								 ((type . "SYMBOL")
								  (name . slice_expression))
								 ((type . "SYMBOL")
								  (name . call_expression))
								 ((type . "SYMBOL")
								  (name . type_assertion_expression))
								 ((type . "SYMBOL")
								  (name . type_conversion_expression))
								 ((type . "SYMBOL")
								  (name . identifier))
								 ((type . "ALIAS")
								  (content (type . "CHOICE")
									   (members ((type . "STRING")
										     (value . "new"))
										    ((type . "STRING")
										     (value . "make"))))
								  (named . t)
								  (value . identifier))
								 ((type . "SYMBOL")
								  (name . composite_literal))
								 ((type . "SYMBOL")
								  (name . func_literal))
								 ((type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . raw_string_literal))
									   ((type . "SYMBOL")
									    (name . interpreted_string_literal))))
								 ((type . "SYMBOL")
								  (name . int_literal))
								 ((type . "SYMBOL")
								  (name . float_literal))
								 ((type . "SYMBOL")
								  (name . imaginary_literal))
								 ((type . "SYMBOL")
								  (name . rune_literal))
								 ((type . "SYMBOL")
								  (name))
								 ((type . "SYMBOL")
								  (name . true))
								 ((type . "SYMBOL")
								  (name . false))
								 ((type . "SYMBOL")
								  (name . parenthesized_expression))))
						       ((type . "SYMBOL")
							(name . variadic_argument))))
					     ((type . "REPEAT")
					      (content (type . "SEQ")
						       (members ((type . "STRING")
								 (value . ","))
								((type . "CHOICE")
								 (members ((type . "CHOICE")
									   (members ((type . "SYMBOL")
										     (name . unary_expression))
										    ((type . "SYMBOL")
										     (name . binary_expression))
										    ((type . "SYMBOL")
										     (name . selector_expression))
										    ((type . "SYMBOL")
										     (name . index_expression))
										    ((type . "SYMBOL")
										     (name . slice_expression))
										    ((type . "SYMBOL")
										     (name . call_expression))
										    ((type . "SYMBOL")
										     (name . type_assertion_expression))
										    ((type . "SYMBOL")
										     (name . type_conversion_expression))
										    ((type . "SYMBOL")
										     (name . identifier))
										    ((type . "ALIAS")
										     (content (type . "CHOICE")
											      (members ((type . "STRING")
													(value . "new"))
												       ((type . "STRING")
													(value . "make"))))
										     (named . t)
										     (value . identifier))
										    ((type . "SYMBOL")
										     (name . composite_literal))
										    ((type . "SYMBOL")
										     (name . func_literal))
										    ((type . "CHOICE")
										     (members ((type . "SYMBOL")
											       (name . raw_string_literal))
											      ((type . "SYMBOL")
											       (name . interpreted_string_literal))))
										    ((type . "SYMBOL")
										     (name . int_literal))
										    ((type . "SYMBOL")
										     (name . float_literal))
										    ((type . "SYMBOL")
										     (name . imaginary_literal))
										    ((type . "SYMBOL")
										     (name . rune_literal))
										    ((type . "SYMBOL")
										     (name))
										    ((type . "SYMBOL")
										     (name . true))
										    ((type . "SYMBOL")
										     (name . false))
										    ((type . "SYMBOL")
										     (name . parenthesized_expression))))
									  ((type . "SYMBOL")
									   (name . variadic_argument)))))))
					     ((type . "CHOICE")
					      (members ((type . "STRING")
							(value . ","))
						       ((type . "BLANK"))))))
				   ((type . "BLANK"))))
			 ((type . "STRING")
			  (value . ")"))))
 (selector_expression (type . "PREC")
		      (value . 7)
		      (content (type . "SEQ")
			       (members ((type . "FIELD")
					 (name . "operand")
					 (content (type . "CHOICE")
						  (members ((type . "SYMBOL")
							    (name . unary_expression))
							   ((type . "SYMBOL")
							    (name . binary_expression))
							   ((type . "SYMBOL")
							    (name . selector_expression))
							   ((type . "SYMBOL")
							    (name . index_expression))
							   ((type . "SYMBOL")
							    (name . slice_expression))
							   ((type . "SYMBOL")
							    (name . call_expression))
							   ((type . "SYMBOL")
							    (name . type_assertion_expression))
							   ((type . "SYMBOL")
							    (name . type_conversion_expression))
							   ((type . "SYMBOL")
							    (name . identifier))
							   ((type . "ALIAS")
							    (content (type . "CHOICE")
								     (members ((type . "STRING")
									       (value . "new"))
									      ((type . "STRING")
									       (value . "make"))))
							    (named . t)
							    (value . identifier))
							   ((type . "SYMBOL")
							    (name . composite_literal))
							   ((type . "SYMBOL")
							    (name . func_literal))
							   ((type . "CHOICE")
							    (members ((type . "SYMBOL")
								      (name . raw_string_literal))
								     ((type . "SYMBOL")
								      (name . interpreted_string_literal))))
							   ((type . "SYMBOL")
							    (name . int_literal))
							   ((type . "SYMBOL")
							    (name . float_literal))
							   ((type . "SYMBOL")
							    (name . imaginary_literal))
							   ((type . "SYMBOL")
							    (name . rune_literal))
							   ((type . "SYMBOL")
							    (name))
							   ((type . "SYMBOL")
							    (name . true))
							   ((type . "SYMBOL")
							    (name . false))
							   ((type . "SYMBOL")
							    (name . parenthesized_expression)))))
					((type . "STRING")
					 (value . "."))
					((type . "FIELD")
					 (name . "field")
					 (content (type . "ALIAS")
						  (content (type . "SYMBOL")
							   (name . identifier))
						  (named . t)
						  (value . field_identifier))))))
 (index_expression (type . "PREC")
		   (value . 7)
		   (content (type . "SEQ")
			    (members ((type . "FIELD")
				      (name . "operand")
				      (content (type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . unary_expression))
							((type . "SYMBOL")
							 (name . binary_expression))
							((type . "SYMBOL")
							 (name . selector_expression))
							((type . "SYMBOL")
							 (name . index_expression))
							((type . "SYMBOL")
							 (name . slice_expression))
							((type . "SYMBOL")
							 (name . call_expression))
							((type . "SYMBOL")
							 (name . type_assertion_expression))
							((type . "SYMBOL")
							 (name . type_conversion_expression))
							((type . "SYMBOL")
							 (name . identifier))
							((type . "ALIAS")
							 (content (type . "CHOICE")
								  (members ((type . "STRING")
									    (value . "new"))
									   ((type . "STRING")
									    (value . "make"))))
							 (named . t)
							 (value . identifier))
							((type . "SYMBOL")
							 (name . composite_literal))
							((type . "SYMBOL")
							 (name . func_literal))
							((type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . raw_string_literal))
								  ((type . "SYMBOL")
								   (name . interpreted_string_literal))))
							((type . "SYMBOL")
							 (name . int_literal))
							((type . "SYMBOL")
							 (name . float_literal))
							((type . "SYMBOL")
							 (name . imaginary_literal))
							((type . "SYMBOL")
							 (name . rune_literal))
							((type . "SYMBOL")
							 (name))
							((type . "SYMBOL")
							 (name . true))
							((type . "SYMBOL")
							 (name . false))
							((type . "SYMBOL")
							 (name . parenthesized_expression)))))
				     ((type . "STRING")
				      (value . "["))
				     ((type . "FIELD")
				      (name . "index")
				      (content (type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . unary_expression))
							((type . "SYMBOL")
							 (name . binary_expression))
							((type . "SYMBOL")
							 (name . selector_expression))
							((type . "SYMBOL")
							 (name . index_expression))
							((type . "SYMBOL")
							 (name . slice_expression))
							((type . "SYMBOL")
							 (name . call_expression))
							((type . "SYMBOL")
							 (name . type_assertion_expression))
							((type . "SYMBOL")
							 (name . type_conversion_expression))
							((type . "SYMBOL")
							 (name . identifier))
							((type . "ALIAS")
							 (content (type . "CHOICE")
								  (members ((type . "STRING")
									    (value . "new"))
									   ((type . "STRING")
									    (value . "make"))))
							 (named . t)
							 (value . identifier))
							((type . "SYMBOL")
							 (name . composite_literal))
							((type . "SYMBOL")
							 (name . func_literal))
							((type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . raw_string_literal))
								  ((type . "SYMBOL")
								   (name . interpreted_string_literal))))
							((type . "SYMBOL")
							 (name . int_literal))
							((type . "SYMBOL")
							 (name . float_literal))
							((type . "SYMBOL")
							 (name . imaginary_literal))
							((type . "SYMBOL")
							 (name . rune_literal))
							((type . "SYMBOL")
							 (name))
							((type . "SYMBOL")
							 (name . true))
							((type . "SYMBOL")
							 (name . false))
							((type . "SYMBOL")
							 (name . parenthesized_expression)))))
				     ((type . "STRING")
				      (value . "]")))))
 (slice_expression (type . "PREC")
		   (value . 7)
		   (content (type . "SEQ")
			    (members ((type . "FIELD")
				      (name . "operand")
				      (content (type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . unary_expression))
							((type . "SYMBOL")
							 (name . binary_expression))
							((type . "SYMBOL")
							 (name . selector_expression))
							((type . "SYMBOL")
							 (name . index_expression))
							((type . "SYMBOL")
							 (name . slice_expression))
							((type . "SYMBOL")
							 (name . call_expression))
							((type . "SYMBOL")
							 (name . type_assertion_expression))
							((type . "SYMBOL")
							 (name . type_conversion_expression))
							((type . "SYMBOL")
							 (name . identifier))
							((type . "ALIAS")
							 (content (type . "CHOICE")
								  (members ((type . "STRING")
									    (value . "new"))
									   ((type . "STRING")
									    (value . "make"))))
							 (named . t)
							 (value . identifier))
							((type . "SYMBOL")
							 (name . composite_literal))
							((type . "SYMBOL")
							 (name . func_literal))
							((type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . raw_string_literal))
								  ((type . "SYMBOL")
								   (name . interpreted_string_literal))))
							((type . "SYMBOL")
							 (name . int_literal))
							((type . "SYMBOL")
							 (name . float_literal))
							((type . "SYMBOL")
							 (name . imaginary_literal))
							((type . "SYMBOL")
							 (name . rune_literal))
							((type . "SYMBOL")
							 (name))
							((type . "SYMBOL")
							 (name . true))
							((type . "SYMBOL")
							 (name . false))
							((type . "SYMBOL")
							 (name . parenthesized_expression)))))
				     ((type . "STRING")
				      (value . "["))
				     ((type . "CHOICE")
				      (members ((type . "SEQ")
						(members ((type . "FIELD")
							  (name . "start")
							  (content (type . "CHOICE")
								   (members ((type . "CHOICE")
									     (members ((type . "SYMBOL")
										       (name . unary_expression))
										      ((type . "SYMBOL")
										       (name . binary_expression))
										      ((type . "SYMBOL")
										       (name . selector_expression))
										      ((type . "SYMBOL")
										       (name . index_expression))
										      ((type . "SYMBOL")
										       (name . slice_expression))
										      ((type . "SYMBOL")
										       (name . call_expression))
										      ((type . "SYMBOL")
										       (name . type_assertion_expression))
										      ((type . "SYMBOL")
										       (name . type_conversion_expression))
										      ((type . "SYMBOL")
										       (name . identifier))
										      ((type . "ALIAS")
										       (content (type . "CHOICE")
												(members ((type . "STRING")
													  (value . "new"))
													 ((type . "STRING")
													  (value . "make"))))
										       (named . t)
										       (value . identifier))
										      ((type . "SYMBOL")
										       (name . composite_literal))
										      ((type . "SYMBOL")
										       (name . func_literal))
										      ((type . "CHOICE")
										       (members ((type . "SYMBOL")
												 (name . raw_string_literal))
												((type . "SYMBOL")
												 (name . interpreted_string_literal))))
										      ((type . "SYMBOL")
										       (name . int_literal))
										      ((type . "SYMBOL")
										       (name . float_literal))
										      ((type . "SYMBOL")
										       (name . imaginary_literal))
										      ((type . "SYMBOL")
										       (name . rune_literal))
										      ((type . "SYMBOL")
										       (name))
										      ((type . "SYMBOL")
										       (name . true))
										      ((type . "SYMBOL")
										       (name . false))
										      ((type . "SYMBOL")
										       (name . parenthesized_expression))))
									    ((type . "BLANK")))))
							 ((type . "STRING")
							  (value . ":"))
							 ((type . "FIELD")
							  (name . "end")
							  (content (type . "CHOICE")
								   (members ((type . "CHOICE")
									     (members ((type . "SYMBOL")
										       (name . unary_expression))
										      ((type . "SYMBOL")
										       (name . binary_expression))
										      ((type . "SYMBOL")
										       (name . selector_expression))
										      ((type . "SYMBOL")
										       (name . index_expression))
										      ((type . "SYMBOL")
										       (name . slice_expression))
										      ((type . "SYMBOL")
										       (name . call_expression))
										      ((type . "SYMBOL")
										       (name . type_assertion_expression))
										      ((type . "SYMBOL")
										       (name . type_conversion_expression))
										      ((type . "SYMBOL")
										       (name . identifier))
										      ((type . "ALIAS")
										       (content (type . "CHOICE")
												(members ((type . "STRING")
													  (value . "new"))
													 ((type . "STRING")
													  (value . "make"))))
										       (named . t)
										       (value . identifier))
										      ((type . "SYMBOL")
										       (name . composite_literal))
										      ((type . "SYMBOL")
										       (name . func_literal))
										      ((type . "CHOICE")
										       (members ((type . "SYMBOL")
												 (name . raw_string_literal))
												((type . "SYMBOL")
												 (name . interpreted_string_literal))))
										      ((type . "SYMBOL")
										       (name . int_literal))
										      ((type . "SYMBOL")
										       (name . float_literal))
										      ((type . "SYMBOL")
										       (name . imaginary_literal))
										      ((type . "SYMBOL")
										       (name . rune_literal))
										      ((type . "SYMBOL")
										       (name))
										      ((type . "SYMBOL")
										       (name . true))
										      ((type . "SYMBOL")
										       (name . false))
										      ((type . "SYMBOL")
										       (name . parenthesized_expression))))
									    ((type . "BLANK")))))))
					       ((type . "SEQ")
						(members ((type . "FIELD")
							  (name . "start")
							  (content (type . "CHOICE")
								   (members ((type . "CHOICE")
									     (members ((type . "SYMBOL")
										       (name . unary_expression))
										      ((type . "SYMBOL")
										       (name . binary_expression))
										      ((type . "SYMBOL")
										       (name . selector_expression))
										      ((type . "SYMBOL")
										       (name . index_expression))
										      ((type . "SYMBOL")
										       (name . slice_expression))
										      ((type . "SYMBOL")
										       (name . call_expression))
										      ((type . "SYMBOL")
										       (name . type_assertion_expression))
										      ((type . "SYMBOL")
										       (name . type_conversion_expression))
										      ((type . "SYMBOL")
										       (name . identifier))
										      ((type . "ALIAS")
										       (content (type . "CHOICE")
												(members ((type . "STRING")
													  (value . "new"))
													 ((type . "STRING")
													  (value . "make"))))
										       (named . t)
										       (value . identifier))
										      ((type . "SYMBOL")
										       (name . composite_literal))
										      ((type . "SYMBOL")
										       (name . func_literal))
										      ((type . "CHOICE")
										       (members ((type . "SYMBOL")
												 (name . raw_string_literal))
												((type . "SYMBOL")
												 (name . interpreted_string_literal))))
										      ((type . "SYMBOL")
										       (name . int_literal))
										      ((type . "SYMBOL")
										       (name . float_literal))
										      ((type . "SYMBOL")
										       (name . imaginary_literal))
										      ((type . "SYMBOL")
										       (name . rune_literal))
										      ((type . "SYMBOL")
										       (name))
										      ((type . "SYMBOL")
										       (name . true))
										      ((type . "SYMBOL")
										       (name . false))
										      ((type . "SYMBOL")
										       (name . parenthesized_expression))))
									    ((type . "BLANK")))))
							 ((type . "STRING")
							  (value . ":"))
							 ((type . "FIELD")
							  (name . "end")
							  (content (type . "CHOICE")
								   (members ((type . "SYMBOL")
									     (name . unary_expression))
									    ((type . "SYMBOL")
									     (name . binary_expression))
									    ((type . "SYMBOL")
									     (name . selector_expression))
									    ((type . "SYMBOL")
									     (name . index_expression))
									    ((type . "SYMBOL")
									     (name . slice_expression))
									    ((type . "SYMBOL")
									     (name . call_expression))
									    ((type . "SYMBOL")
									     (name . type_assertion_expression))
									    ((type . "SYMBOL")
									     (name . type_conversion_expression))
									    ((type . "SYMBOL")
									     (name . identifier))
									    ((type . "ALIAS")
									     (content (type . "CHOICE")
										      (members ((type . "STRING")
												(value . "new"))
											       ((type . "STRING")
												(value . "make"))))
									     (named . t)
									     (value . identifier))
									    ((type . "SYMBOL")
									     (name . composite_literal))
									    ((type . "SYMBOL")
									     (name . func_literal))
									    ((type . "CHOICE")
									     (members ((type . "SYMBOL")
										       (name . raw_string_literal))
										      ((type . "SYMBOL")
										       (name . interpreted_string_literal))))
									    ((type . "SYMBOL")
									     (name . int_literal))
									    ((type . "SYMBOL")
									     (name . float_literal))
									    ((type . "SYMBOL")
									     (name . imaginary_literal))
									    ((type . "SYMBOL")
									     (name . rune_literal))
									    ((type . "SYMBOL")
									     (name))
									    ((type . "SYMBOL")
									     (name . true))
									    ((type . "SYMBOL")
									     (name . false))
									    ((type . "SYMBOL")
									     (name . parenthesized_expression)))))
							 ((type . "STRING")
							  (value . ":"))
							 ((type . "FIELD")
							  (name . "capacity")
							  (content (type . "CHOICE")
								   (members ((type . "SYMBOL")
									     (name . unary_expression))
									    ((type . "SYMBOL")
									     (name . binary_expression))
									    ((type . "SYMBOL")
									     (name . selector_expression))
									    ((type . "SYMBOL")
									     (name . index_expression))
									    ((type . "SYMBOL")
									     (name . slice_expression))
									    ((type . "SYMBOL")
									     (name . call_expression))
									    ((type . "SYMBOL")
									     (name . type_assertion_expression))
									    ((type . "SYMBOL")
									     (name . type_conversion_expression))
									    ((type . "SYMBOL")
									     (name . identifier))
									    ((type . "ALIAS")
									     (content (type . "CHOICE")
										      (members ((type . "STRING")
												(value . "new"))
											       ((type . "STRING")
												(value . "make"))))
									     (named . t)
									     (value . identifier))
									    ((type . "SYMBOL")
									     (name . composite_literal))
									    ((type . "SYMBOL")
									     (name . func_literal))
									    ((type . "CHOICE")
									     (members ((type . "SYMBOL")
										       (name . raw_string_literal))
										      ((type . "SYMBOL")
										       (name . interpreted_string_literal))))
									    ((type . "SYMBOL")
									     (name . int_literal))
									    ((type . "SYMBOL")
									     (name . float_literal))
									    ((type . "SYMBOL")
									     (name . imaginary_literal))
									    ((type . "SYMBOL")
									     (name . rune_literal))
									    ((type . "SYMBOL")
									     (name))
									    ((type . "SYMBOL")
									     (name . true))
									    ((type . "SYMBOL")
									     (name . false))
									    ((type . "SYMBOL")
									     (name . parenthesized_expression)))))))))
				     ((type . "STRING")
				      (value . "]")))))
 (type_assertion_expression (type . "PREC")
			    (value . 7)
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "operand")
					       (content (type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . unary_expression))
								 ((type . "SYMBOL")
								  (name . binary_expression))
								 ((type . "SYMBOL")
								  (name . selector_expression))
								 ((type . "SYMBOL")
								  (name . index_expression))
								 ((type . "SYMBOL")
								  (name . slice_expression))
								 ((type . "SYMBOL")
								  (name . call_expression))
								 ((type . "SYMBOL")
								  (name . type_assertion_expression))
								 ((type . "SYMBOL")
								  (name . type_conversion_expression))
								 ((type . "SYMBOL")
								  (name . identifier))
								 ((type . "ALIAS")
								  (content (type . "CHOICE")
									   (members ((type . "STRING")
										     (value . "new"))
										    ((type . "STRING")
										     (value . "make"))))
								  (named . t)
								  (value . identifier))
								 ((type . "SYMBOL")
								  (name . composite_literal))
								 ((type . "SYMBOL")
								  (name . func_literal))
								 ((type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . raw_string_literal))
									   ((type . "SYMBOL")
									    (name . interpreted_string_literal))))
								 ((type . "SYMBOL")
								  (name . int_literal))
								 ((type . "SYMBOL")
								  (name . float_literal))
								 ((type . "SYMBOL")
								  (name . imaginary_literal))
								 ((type . "SYMBOL")
								  (name . rune_literal))
								 ((type . "SYMBOL")
								  (name))
								 ((type . "SYMBOL")
								  (name . true))
								 ((type . "SYMBOL")
								  (name . false))
								 ((type . "SYMBOL")
								  (name . parenthesized_expression)))))
					      ((type . "STRING")
					       (value . "."))
					      ((type . "STRING")
					       (value . "("))
					      ((type . "FIELD")
					       (name . "type")
					       (content (type . "CHOICE")
							(members ((type . "CHOICE")
								  (members ((type . "PREC_DYNAMIC")
									    (value . -1)
									    (content (type . "ALIAS")
										     (content (type . "SYMBOL")
											      (name . identifier))
										     (named . t)
										     (value . type_identifier)))
									   ((type . "SYMBOL")
									    (name . qualified_type))
									   ((type . "SYMBOL")
									    (name . pointer_type))
									   ((type . "SYMBOL")
									    (name . struct_type))
									   ((type . "SYMBOL")
									    (name . interface_type))
									   ((type . "SYMBOL")
									    (name . array_type))
									   ((type . "SYMBOL")
									    (name . slice_type))
									   ((type . "SYMBOL")
									    (name . map_type))
									   ((type . "SYMBOL")
									    (name . channel_type))
									   ((type . "SYMBOL")
									    (name . function_type))))
								 ((type . "SYMBOL")
								  (name . parenthesized_type)))))
					      ((type . "STRING")
					       (value . ")")))))
 (type_conversion_expression (type . "PREC_DYNAMIC")
			     (value . -1)
			     (content (type . "SEQ")
				      (members ((type . "FIELD")
						(name . "type")
						(content (type . "CHOICE")
							 (members ((type . "CHOICE")
								   (members ((type . "PREC_DYNAMIC")
									     (value . -1)
									     (content (type . "ALIAS")
										      (content (type . "SYMBOL")
											       (name . identifier))
										      (named . t)
										      (value . type_identifier)))
									    ((type . "SYMBOL")
									     (name . qualified_type))
									    ((type . "SYMBOL")
									     (name . pointer_type))
									    ((type . "SYMBOL")
									     (name . struct_type))
									    ((type . "SYMBOL")
									     (name . interface_type))
									    ((type . "SYMBOL")
									     (name . array_type))
									    ((type . "SYMBOL")
									     (name . slice_type))
									    ((type . "SYMBOL")
									     (name . map_type))
									    ((type . "SYMBOL")
									     (name . channel_type))
									    ((type . "SYMBOL")
									     (name . function_type))))
								  ((type . "SYMBOL")
								   (name . parenthesized_type)))))
					       ((type . "STRING")
						(value . "("))
					       ((type . "FIELD")
						(name . "operand")
						(content (type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . unary_expression))
								  ((type . "SYMBOL")
								   (name . binary_expression))
								  ((type . "SYMBOL")
								   (name . selector_expression))
								  ((type . "SYMBOL")
								   (name . index_expression))
								  ((type . "SYMBOL")
								   (name . slice_expression))
								  ((type . "SYMBOL")
								   (name . call_expression))
								  ((type . "SYMBOL")
								   (name . type_assertion_expression))
								  ((type . "SYMBOL")
								   (name . type_conversion_expression))
								  ((type . "SYMBOL")
								   (name . identifier))
								  ((type . "ALIAS")
								   (content (type . "CHOICE")
									    (members ((type . "STRING")
										      (value . "new"))
										     ((type . "STRING")
										      (value . "make"))))
								   (named . t)
								   (value . identifier))
								  ((type . "SYMBOL")
								   (name . composite_literal))
								  ((type . "SYMBOL")
								   (name . func_literal))
								  ((type . "CHOICE")
								   (members ((type . "SYMBOL")
									     (name . raw_string_literal))
									    ((type . "SYMBOL")
									     (name . interpreted_string_literal))))
								  ((type . "SYMBOL")
								   (name . int_literal))
								  ((type . "SYMBOL")
								   (name . float_literal))
								  ((type . "SYMBOL")
								   (name . imaginary_literal))
								  ((type . "SYMBOL")
								   (name . rune_literal))
								  ((type . "SYMBOL")
								   (name))
								  ((type . "SYMBOL")
								   (name . true))
								  ((type . "SYMBOL")
								   (name . false))
								  ((type . "SYMBOL")
								   (name . parenthesized_expression)))))
					       ((type . "CHOICE")
						(members ((type . "STRING")
							  (value . ","))
							 ((type . "BLANK"))))
					       ((type . "STRING")
						(value . ")")))))
 (composite_literal (type . "PREC")
		    (value . -1)
		    (content (type . "SEQ")
			     (members ((type . "FIELD")
				       (name . "type")
				       (content (type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . map_type))
							 ((type . "SYMBOL")
							  (name . slice_type))
							 ((type . "SYMBOL")
							  (name . array_type))
							 ((type . "SYMBOL")
							  (name . implicit_length_array_type))
							 ((type . "SYMBOL")
							  (name . struct_type))
							 ((type . "ALIAS")
							  (content (type . "SYMBOL")
								   (name . identifier))
							  (named . t)
							  (value . type_identifier))
							 ((type . "SYMBOL")
							  (name . qualified_type)))))
				      ((type . "FIELD")
				       (name . "body")
				       (content (type . "SYMBOL")
						(name . literal_value))))))
 (literal_value (type . "SEQ")
		(members ((type . "STRING")
			  (value . "{"))
			 ((type . "CHOICE")
			  (members ((type . "SEQ")
				    (members ((type . "CHOICE")
					      (members ((type . "SYMBOL")
							(name . element))
						       ((type . "SYMBOL")
							(name . keyed_element))))
					     ((type . "REPEAT")
					      (content (type . "SEQ")
						       (members ((type . "STRING")
								 (value . ","))
								((type . "CHOICE")
								 (members ((type . "SYMBOL")
									   (name . element))
									  ((type . "SYMBOL")
									   (name . keyed_element)))))))
					     ((type . "CHOICE")
					      (members ((type . "STRING")
							(value . ","))
						       ((type . "BLANK"))))))
				   ((type . "BLANK"))))
			 ((type . "STRING")
			  (value . "}"))))
 (keyed_element (type . "SEQ")
		(members ((type . "CHOICE")
			  (members ((type . "SEQ")
				    (members ((type . "CHOICE")
					      (members ((type . "SYMBOL")
							(name . unary_expression))
						       ((type . "SYMBOL")
							(name . binary_expression))
						       ((type . "SYMBOL")
							(name . selector_expression))
						       ((type . "SYMBOL")
							(name . index_expression))
						       ((type . "SYMBOL")
							(name . slice_expression))
						       ((type . "SYMBOL")
							(name . call_expression))
						       ((type . "SYMBOL")
							(name . type_assertion_expression))
						       ((type . "SYMBOL")
							(name . type_conversion_expression))
						       ((type . "SYMBOL")
							(name . identifier))
						       ((type . "ALIAS")
							(content (type . "CHOICE")
								 (members ((type . "STRING")
									   (value . "new"))
									  ((type . "STRING")
									   (value . "make"))))
							(named . t)
							(value . identifier))
						       ((type . "SYMBOL")
							(name . composite_literal))
						       ((type . "SYMBOL")
							(name . func_literal))
						       ((type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . raw_string_literal))
								 ((type . "SYMBOL")
								  (name . interpreted_string_literal))))
						       ((type . "SYMBOL")
							(name . int_literal))
						       ((type . "SYMBOL")
							(name . float_literal))
						       ((type . "SYMBOL")
							(name . imaginary_literal))
						       ((type . "SYMBOL")
							(name . rune_literal))
						       ((type . "SYMBOL")
							(name))
						       ((type . "SYMBOL")
							(name . true))
						       ((type . "SYMBOL")
							(name . false))
						       ((type . "SYMBOL")
							(name . parenthesized_expression))))
					     ((type . "STRING")
					      (value . ":"))))
				   ((type . "SEQ")
				    (members ((type . "SYMBOL")
					      (name . literal_value))
					     ((type . "STRING")
					      (value . ":"))))
				   ((type . "PREC")
				    (value . 1)
				    (content (type . "SEQ")
					     (members ((type . "ALIAS")
						       (content (type . "SYMBOL")
								(name . identifier))
						       (named . t)
						       (value . field_identifier))
						      ((type . "STRING")
						       (value . ":")))))))
			 ((type . "CHOICE")
			  (members ((type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . unary_expression))
					     ((type . "SYMBOL")
					      (name . binary_expression))
					     ((type . "SYMBOL")
					      (name . selector_expression))
					     ((type . "SYMBOL")
					      (name . index_expression))
					     ((type . "SYMBOL")
					      (name . slice_expression))
					     ((type . "SYMBOL")
					      (name . call_expression))
					     ((type . "SYMBOL")
					      (name . type_assertion_expression))
					     ((type . "SYMBOL")
					      (name . type_conversion_expression))
					     ((type . "SYMBOL")
					      (name . identifier))
					     ((type . "ALIAS")
					      (content (type . "CHOICE")
						       (members ((type . "STRING")
								 (value . "new"))
								((type . "STRING")
								 (value . "make"))))
					      (named . t)
					      (value . identifier))
					     ((type . "SYMBOL")
					      (name . composite_literal))
					     ((type . "SYMBOL")
					      (name . func_literal))
					     ((type . "CHOICE")
					      (members ((type . "SYMBOL")
							(name . raw_string_literal))
						       ((type . "SYMBOL")
							(name . interpreted_string_literal))))
					     ((type . "SYMBOL")
					      (name . int_literal))
					     ((type . "SYMBOL")
					      (name . float_literal))
					     ((type . "SYMBOL")
					      (name . imaginary_literal))
					     ((type . "SYMBOL")
					      (name . rune_literal))
					     ((type . "SYMBOL")
					      (name))
					     ((type . "SYMBOL")
					      (name . true))
					     ((type . "SYMBOL")
					      (name . false))
					     ((type . "SYMBOL")
					      (name . parenthesized_expression))))
				   ((type . "SYMBOL")
				    (name . literal_value))))))
 (element (type . "CHOICE")
	  (members ((type . "CHOICE")
		    (members ((type . "SYMBOL")
			      (name . unary_expression))
			     ((type . "SYMBOL")
			      (name . binary_expression))
			     ((type . "SYMBOL")
			      (name . selector_expression))
			     ((type . "SYMBOL")
			      (name . index_expression))
			     ((type . "SYMBOL")
			      (name . slice_expression))
			     ((type . "SYMBOL")
			      (name . call_expression))
			     ((type . "SYMBOL")
			      (name . type_assertion_expression))
			     ((type . "SYMBOL")
			      (name . type_conversion_expression))
			     ((type . "SYMBOL")
			      (name . identifier))
			     ((type . "ALIAS")
			      (content (type . "CHOICE")
				       (members ((type . "STRING")
						 (value . "new"))
						((type . "STRING")
						 (value . "make"))))
			      (named . t)
			      (value . identifier))
			     ((type . "SYMBOL")
			      (name . composite_literal))
			     ((type . "SYMBOL")
			      (name . func_literal))
			     ((type . "CHOICE")
			      (members ((type . "SYMBOL")
					(name . raw_string_literal))
				       ((type . "SYMBOL")
					(name . interpreted_string_literal))))
			     ((type . "SYMBOL")
			      (name . int_literal))
			     ((type . "SYMBOL")
			      (name . float_literal))
			     ((type . "SYMBOL")
			      (name . imaginary_literal))
			     ((type . "SYMBOL")
			      (name . rune_literal))
			     ((type . "SYMBOL")
			      (name))
			     ((type . "SYMBOL")
			      (name . true))
			     ((type . "SYMBOL")
			      (name . false))
			     ((type . "SYMBOL")
			      (name . parenthesized_expression))))
		   ((type . "SYMBOL")
		    (name . literal_value))))
 (func_literal (type . "SEQ")
	       (members ((type . "STRING")
			 (value . "func"))
			((type . "FIELD")
			 (name . "parameters")
			 (content (type . "SYMBOL") (name . parameter_list)))
			((type . "FIELD")
			 (name . "result")
			 (content (type . "CHOICE")
				  (members ((type . "CHOICE")
					    (members ((type . "SYMBOL")
						      (name . parameter_list))
						     ((type . "CHOICE")
						      (members ((type . "PREC_DYNAMIC")
								(value . -1)
								(content (type . "ALIAS")
									 (content (type . "SYMBOL")
										  (name . identifier))
									 (named . t)
									 (value . type_identifier)))
							       ((type . "SYMBOL")
								(name . qualified_type))
							       ((type . "SYMBOL")
								(name . pointer_type))
							       ((type . "SYMBOL")
								(name . struct_type))
							       ((type . "SYMBOL")
								(name . interface_type))
							       ((type . "SYMBOL")
								(name . array_type))
							       ((type . "SYMBOL")
								(name . slice_type))
							       ((type . "SYMBOL")
								(name . map_type))
							       ((type . "SYMBOL")
								(name . channel_type))
							       ((type . "SYMBOL")
								(name . function_type))))))
					   ((type . "BLANK")))))
			((type . "FIELD")
			 (name . "body")
			 (content (type . "SYMBOL") (name . block)))))
 (unary_expression (type . "PREC")
		   (value . 6)
		   (content (type . "SEQ")
			    (members ((type . "FIELD")
				      (name . "operator")
				      (content (type . "CHOICE")
					       (members ((type . "STRING")
							 (value . "+"))
							((type . "STRING")
							 (value . "-"))
							((type . "STRING")
							 (value . "!"))
							((type . "STRING")
							 (value . "^"))
							((type . "STRING")
							 (value . "*"))
							((type . "STRING")
							 (value . "&"))
							((type . "STRING")
							 (value . "<-")))))
				     ((type . "FIELD")
				      (name . "operand")
				      (content (type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . unary_expression))
							((type . "SYMBOL")
							 (name . binary_expression))
							((type . "SYMBOL")
							 (name . selector_expression))
							((type . "SYMBOL")
							 (name . index_expression))
							((type . "SYMBOL")
							 (name . slice_expression))
							((type . "SYMBOL")
							 (name . call_expression))
							((type . "SYMBOL")
							 (name . type_assertion_expression))
							((type . "SYMBOL")
							 (name . type_conversion_expression))
							((type . "SYMBOL")
							 (name . identifier))
							((type . "ALIAS")
							 (content (type . "CHOICE")
								  (members ((type . "STRING")
									    (value . "new"))
									   ((type . "STRING")
									    (value . "make"))))
							 (named . t)
							 (value . identifier))
							((type . "SYMBOL")
							 (name . composite_literal))
							((type . "SYMBOL")
							 (name . func_literal))
							((type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . raw_string_literal))
								  ((type . "SYMBOL")
								   (name . interpreted_string_literal))))
							((type . "SYMBOL")
							 (name . int_literal))
							((type . "SYMBOL")
							 (name . float_literal))
							((type . "SYMBOL")
							 (name . imaginary_literal))
							((type . "SYMBOL")
							 (name . rune_literal))
							((type . "SYMBOL")
							 (name))
							((type . "SYMBOL")
							 (name . true))
							((type . "SYMBOL")
							 (name . false))
							((type . "SYMBOL")
							 (name . parenthesized_expression))))))))
 (binary_expression (type . "CHOICE")
		    (members ((type . "PREC_LEFT")
			      (value . 5)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . selector_expression))
								   ((type . "SYMBOL")
								    (name . index_expression))
								   ((type . "SYMBOL")
								    (name . slice_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . type_assertion_expression))
								   ((type . "SYMBOL")
								    (name . type_conversion_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "ALIAS")
								    (content (type . "CHOICE")
									     (members ((type . "STRING")
										       (value . "new"))
										      ((type . "STRING")
										       (value . "make"))))
								    (named . t)
								    (value . identifier))
								   ((type . "SYMBOL")
								    (name . composite_literal))
								   ((type . "SYMBOL")
								    (name . func_literal))
								   ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . raw_string_literal))
									     ((type . "SYMBOL")
									      (name . interpreted_string_literal))))
								   ((type . "SYMBOL")
								    (name . int_literal))
								   ((type . "SYMBOL")
								    (name . float_literal))
								   ((type . "SYMBOL")
								    (name . imaginary_literal))
								   ((type . "SYMBOL")
								    (name . rune_literal))
								   ((type . "SYMBOL")
								    (name))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "CHOICE")
							  (members ((type . "STRING")
								    (value . "*"))
								   ((type . "STRING")
								    (value . "/"))
								   ((type . "STRING")
								    (value . "%"))
								   ((type . "STRING")
								    (value . "<<"))
								   ((type . "STRING")
								    (value . ">>"))
								   ((type . "STRING")
								    (value . "&"))
								   ((type . "STRING")
								    (value . "&^")))))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . selector_expression))
								   ((type . "SYMBOL")
								    (name . index_expression))
								   ((type . "SYMBOL")
								    (name . slice_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . type_assertion_expression))
								   ((type . "SYMBOL")
								    (name . type_conversion_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "ALIAS")
								    (content (type . "CHOICE")
									     (members ((type . "STRING")
										       (value . "new"))
										      ((type . "STRING")
										       (value . "make"))))
								    (named . t)
								    (value . identifier))
								   ((type . "SYMBOL")
								    (name . composite_literal))
								   ((type . "SYMBOL")
								    (name . func_literal))
								   ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . raw_string_literal))
									     ((type . "SYMBOL")
									      (name . interpreted_string_literal))))
								   ((type . "SYMBOL")
								    (name . int_literal))
								   ((type . "SYMBOL")
								    (name . float_literal))
								   ((type . "SYMBOL")
								    (name . imaginary_literal))
								   ((type . "SYMBOL")
								    (name . rune_literal))
								   ((type . "SYMBOL")
								    (name))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 4)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . selector_expression))
								   ((type . "SYMBOL")
								    (name . index_expression))
								   ((type . "SYMBOL")
								    (name . slice_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . type_assertion_expression))
								   ((type . "SYMBOL")
								    (name . type_conversion_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "ALIAS")
								    (content (type . "CHOICE")
									     (members ((type . "STRING")
										       (value . "new"))
										      ((type . "STRING")
										       (value . "make"))))
								    (named . t)
								    (value . identifier))
								   ((type . "SYMBOL")
								    (name . composite_literal))
								   ((type . "SYMBOL")
								    (name . func_literal))
								   ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . raw_string_literal))
									     ((type . "SYMBOL")
									      (name . interpreted_string_literal))))
								   ((type . "SYMBOL")
								    (name . int_literal))
								   ((type . "SYMBOL")
								    (name . float_literal))
								   ((type . "SYMBOL")
								    (name . imaginary_literal))
								   ((type . "SYMBOL")
								    (name . rune_literal))
								   ((type . "SYMBOL")
								    (name))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "CHOICE")
							  (members ((type . "STRING")
								    (value . "+"))
								   ((type . "STRING")
								    (value . "-"))
								   ((type . "STRING")
								    (value . "|"))
								   ((type . "STRING")
								    (value . "^")))))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . selector_expression))
								   ((type . "SYMBOL")
								    (name . index_expression))
								   ((type . "SYMBOL")
								    (name . slice_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . type_assertion_expression))
								   ((type . "SYMBOL")
								    (name . type_conversion_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "ALIAS")
								    (content (type . "CHOICE")
									     (members ((type . "STRING")
										       (value . "new"))
										      ((type . "STRING")
										       (value . "make"))))
								    (named . t)
								    (value . identifier))
								   ((type . "SYMBOL")
								    (name . composite_literal))
								   ((type . "SYMBOL")
								    (name . func_literal))
								   ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . raw_string_literal))
									     ((type . "SYMBOL")
									      (name . interpreted_string_literal))))
								   ((type . "SYMBOL")
								    (name . int_literal))
								   ((type . "SYMBOL")
								    (name . float_literal))
								   ((type . "SYMBOL")
								    (name . imaginary_literal))
								   ((type . "SYMBOL")
								    (name . rune_literal))
								   ((type . "SYMBOL")
								    (name))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 3)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . selector_expression))
								   ((type . "SYMBOL")
								    (name . index_expression))
								   ((type . "SYMBOL")
								    (name . slice_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . type_assertion_expression))
								   ((type . "SYMBOL")
								    (name . type_conversion_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "ALIAS")
								    (content (type . "CHOICE")
									     (members ((type . "STRING")
										       (value . "new"))
										      ((type . "STRING")
										       (value . "make"))))
								    (named . t)
								    (value . identifier))
								   ((type . "SYMBOL")
								    (name . composite_literal))
								   ((type . "SYMBOL")
								    (name . func_literal))
								   ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . raw_string_literal))
									     ((type . "SYMBOL")
									      (name . interpreted_string_literal))))
								   ((type . "SYMBOL")
								    (name . int_literal))
								   ((type . "SYMBOL")
								    (name . float_literal))
								   ((type . "SYMBOL")
								    (name . imaginary_literal))
								   ((type . "SYMBOL")
								    (name . rune_literal))
								   ((type . "SYMBOL")
								    (name))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "CHOICE")
							  (members ((type . "STRING")
								    (value . "=="))
								   ((type . "STRING")
								    (value . "!="))
								   ((type . "STRING")
								    (value . "<"))
								   ((type . "STRING")
								    (value . "<="))
								   ((type . "STRING")
								    (value . ">"))
								   ((type . "STRING")
								    (value . ">=")))))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . selector_expression))
								   ((type . "SYMBOL")
								    (name . index_expression))
								   ((type . "SYMBOL")
								    (name . slice_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . type_assertion_expression))
								   ((type . "SYMBOL")
								    (name . type_conversion_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "ALIAS")
								    (content (type . "CHOICE")
									     (members ((type . "STRING")
										       (value . "new"))
										      ((type . "STRING")
										       (value . "make"))))
								    (named . t)
								    (value . identifier))
								   ((type . "SYMBOL")
								    (name . composite_literal))
								   ((type . "SYMBOL")
								    (name . func_literal))
								   ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . raw_string_literal))
									     ((type . "SYMBOL")
									      (name . interpreted_string_literal))))
								   ((type . "SYMBOL")
								    (name . int_literal))
								   ((type . "SYMBOL")
								    (name . float_literal))
								   ((type . "SYMBOL")
								    (name . imaginary_literal))
								   ((type . "SYMBOL")
								    (name . rune_literal))
								   ((type . "SYMBOL")
								    (name))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 2)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . selector_expression))
								   ((type . "SYMBOL")
								    (name . index_expression))
								   ((type . "SYMBOL")
								    (name . slice_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . type_assertion_expression))
								   ((type . "SYMBOL")
								    (name . type_conversion_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "ALIAS")
								    (content (type . "CHOICE")
									     (members ((type . "STRING")
										       (value . "new"))
										      ((type . "STRING")
										       (value . "make"))))
								    (named . t)
								    (value . identifier))
								   ((type . "SYMBOL")
								    (name . composite_literal))
								   ((type . "SYMBOL")
								    (name . func_literal))
								   ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . raw_string_literal))
									     ((type . "SYMBOL")
									      (name . interpreted_string_literal))))
								   ((type . "SYMBOL")
								    (name . int_literal))
								   ((type . "SYMBOL")
								    (name . float_literal))
								   ((type . "SYMBOL")
								    (name . imaginary_literal))
								   ((type . "SYMBOL")
								    (name . rune_literal))
								   ((type . "SYMBOL")
								    (name))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "&&")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . selector_expression))
								   ((type . "SYMBOL")
								    (name . index_expression))
								   ((type . "SYMBOL")
								    (name . slice_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . type_assertion_expression))
								   ((type . "SYMBOL")
								    (name . type_conversion_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "ALIAS")
								    (content (type . "CHOICE")
									     (members ((type . "STRING")
										       (value . "new"))
										      ((type . "STRING")
										       (value . "make"))))
								    (named . t)
								    (value . identifier))
								   ((type . "SYMBOL")
								    (name . composite_literal))
								   ((type . "SYMBOL")
								    (name . func_literal))
								   ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . raw_string_literal))
									     ((type . "SYMBOL")
									      (name . interpreted_string_literal))))
								   ((type . "SYMBOL")
								    (name . int_literal))
								   ((type . "SYMBOL")
								    (name . float_literal))
								   ((type . "SYMBOL")
								    (name . imaginary_literal))
								   ((type . "SYMBOL")
								    (name . rune_literal))
								   ((type . "SYMBOL")
								    (name))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 1)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . selector_expression))
								   ((type . "SYMBOL")
								    (name . index_expression))
								   ((type . "SYMBOL")
								    (name . slice_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . type_assertion_expression))
								   ((type . "SYMBOL")
								    (name . type_conversion_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "ALIAS")
								    (content (type . "CHOICE")
									     (members ((type . "STRING")
										       (value . "new"))
										      ((type . "STRING")
										       (value . "make"))))
								    (named . t)
								    (value . identifier))
								   ((type . "SYMBOL")
								    (name . composite_literal))
								   ((type . "SYMBOL")
								    (name . func_literal))
								   ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . raw_string_literal))
									     ((type . "SYMBOL")
									      (name . interpreted_string_literal))))
								   ((type . "SYMBOL")
								    (name . int_literal))
								   ((type . "SYMBOL")
								    (name . float_literal))
								   ((type . "SYMBOL")
								    (name . imaginary_literal))
								   ((type . "SYMBOL")
								    (name . rune_literal))
								   ((type . "SYMBOL")
								    (name))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "||")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . selector_expression))
								   ((type . "SYMBOL")
								    (name . index_expression))
								   ((type . "SYMBOL")
								    (name . slice_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . type_assertion_expression))
								   ((type . "SYMBOL")
								    (name . type_conversion_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "ALIAS")
								    (content (type . "CHOICE")
									     (members ((type . "STRING")
										       (value . "new"))
										      ((type . "STRING")
										       (value . "make"))))
								    (named . t)
								    (value . identifier))
								   ((type . "SYMBOL")
								    (name . composite_literal))
								   ((type . "SYMBOL")
								    (name . func_literal))
								   ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . raw_string_literal))
									     ((type . "SYMBOL")
									      (name . interpreted_string_literal))))
								   ((type . "SYMBOL")
								    (name . int_literal))
								   ((type . "SYMBOL")
								    (name . float_literal))
								   ((type . "SYMBOL")
								    (name . imaginary_literal))
								   ((type . "SYMBOL")
								    (name . rune_literal))
								   ((type . "SYMBOL")
								    (name))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))))
 (qualified_type (type . "SEQ")
		 (members ((type . "FIELD")
			   (name . "package")
			   (content (type . "ALIAS")
				    (content (type . "SYMBOL")
					     (name . identifier))
				    (named . t)
				    (value . package_identifier)))
			  ((type . "STRING")
			   (value . "."))
			  ((type . "FIELD")
			   (name . "name")
			   (content (type . "ALIAS")
				    (content (type . "SYMBOL")
					     (name . identifier))
				    (named . t)
				    (value . type_identifier)))))
 (identifier (type . "TOKEN")
	     (content (type . "SEQ")
		      (members ((type . "CHOICE")
				(members ((type . "PATTERN")
					  (value . "\\p{L}"))
					 ((type . "STRING")
					  (value . "_"))))
			       ((type . "REPEAT")
				(content (type . "CHOICE")
					 (members ((type . "CHOICE")
						   (members ((type . "PATTERN")
							     (value . "\\p{L}"))
							    ((type . "STRING")
							     (value . "_"))))
						  ((type . "PATTERN")
						   (value . "[0-9]"))))))))
 (_type_identifier (type . "ALIAS")
		   (content (type . "SYMBOL") (name . identifier))
		   (named . t)
		   (value . type_identifier))
 (_field_identifier (type . "ALIAS")
		    (content (type . "SYMBOL") (name . identifier))
		    (named . t)
		    (value . field_identifier))
 (_package_identifier (type . "ALIAS")
		      (content (type . "SYMBOL") (name . identifier))
		      (named . t)
		      (value . package_identifier))
 (_string_literal (type . "CHOICE")
		  (members ((type . "SYMBOL")
			    (name . raw_string_literal))
			   ((type . "SYMBOL")
			    (name . interpreted_string_literal))))
 (raw_string_literal (type . "TOKEN")
		     (content (type . "SEQ")
			      (members ((type . "STRING")
					(value . "`"))
				       ((type . "REPEAT")
					(content (type . "PATTERN")
						 (value . "[^`]")))
				       ((type . "STRING")
					(value . "`")))))
 (interpreted_string_literal (type . "SEQ")
			     (members ((type . "STRING")
				       (value . "\""))
				      ((type . "REPEAT")
				       (content (type . "CHOICE")
						(members ((type . "IMMEDIATE_TOKEN")
							  (content (type . "PREC")
								   (value . 1)
								   (content (type . "PATTERN")
									    (value . "[^\"\\n\\\\]+"))))
							 ((type . "SYMBOL")
							  (name . escape_sequence)))))
				      ((type . "STRING")
				       (value . "\""))))
 (escape_sequence (type . "IMMEDIATE_TOKEN")
		  (content (type . "SEQ")
			   (members ((type . "STRING")
				     (value . "\\"))
				    ((type . "CHOICE")
				     (members ((type . "PATTERN")
					       (value . "[^xuU]"))
					      ((type . "PATTERN")
					       (value . "\\d{2,3}"))
					      ((type . "PATTERN")
					       (value . "x[0-9a-fA-F]{2,}"))
					      ((type . "PATTERN")
					       (value . "u[0-9a-fA-F]{4}"))
					      ((type . "PATTERN")
					       (value . "U[0-9a-fA-F]{8}")))))))
 (int_literal (type . "TOKEN")
	      (content (type . "CHOICE")
		       (members ((type . "SEQ")
				 (members ((type . "STRING")
					   (value . "0"))
					  ((type . "CHOICE")
					   (members ((type . "STRING")
						     (value . "b"))
						    ((type . "STRING")
						     (value . "B"))))
					  ((type . "CHOICE")
					   (members ((type . "STRING")
						     (value . "_"))
						    ((type . "BLANK"))))
					  ((type . "SEQ")
					   (members ((type . "PATTERN")
						     (value . "[01]"))
						    ((type . "REPEAT")
						     (content (type . "SEQ")
							      (members ((type . "CHOICE")
									(members ((type . "STRING")
										  (value . "_"))
										 ((type . "BLANK"))))
								       ((type . "PATTERN")
									(value . "[01]")))))))))
				((type . "CHOICE")
				 (members ((type . "STRING")
					   (value . "0"))
					  ((type . "SEQ")
					   (members ((type . "PATTERN")
						     (value . "[1-9]"))
						    ((type . "CHOICE")
						     (members ((type . "SEQ")
							       (members ((type . "CHOICE")
									 (members ((type . "STRING")
										   (value . "_"))
										  ((type . "BLANK"))))
									((type . "SEQ")
									 (members ((type . "PATTERN")
										   (value . "[0-9]"))
										  ((type . "REPEAT")
										   (content (type . "SEQ")
											    (members ((type . "CHOICE")
												      (members ((type . "STRING")
														(value . "_"))
													       ((type . "BLANK"))))
												     ((type . "PATTERN")
												      (value . "[0-9]")))))))))
							      ((type . "BLANK"))))))))
				((type . "SEQ")
				 (members ((type . "STRING")
					   (value . "0"))
					  ((type . "CHOICE")
					   (members ((type . "CHOICE")
						     (members ((type . "STRING")
							       (value . "o"))
							      ((type . "STRING")
							       (value . "O"))))
						    ((type . "BLANK"))))
					  ((type . "CHOICE")
					   (members ((type . "STRING")
						     (value . "_"))
						    ((type . "BLANK"))))
					  ((type . "SEQ")
					   (members ((type . "PATTERN")
						     (value . "[0-7]"))
						    ((type . "REPEAT")
						     (content (type . "SEQ")
							      (members ((type . "CHOICE")
									(members ((type . "STRING")
										  (value . "_"))
										 ((type . "BLANK"))))
								       ((type . "PATTERN")
									(value . "[0-7]")))))))))
				((type . "SEQ")
				 (members ((type . "STRING")
					   (value . "0"))
					  ((type . "CHOICE")
					   (members ((type . "STRING")
						     (value . "x"))
						    ((type . "STRING")
						     (value . "X"))))
					  ((type . "CHOICE")
					   (members ((type . "STRING")
						     (value . "_"))
						    ((type . "BLANK"))))
					  ((type . "SEQ")
					   (members ((type . "PATTERN")
						     (value . "[0-9a-fA-F]"))
						    ((type . "REPEAT")
						     (content (type . "SEQ")
							      (members ((type . "CHOICE")
									(members ((type . "STRING")
										  (value . "_"))
										 ((type . "BLANK"))))
								       ((type . "PATTERN")
									(value . "[0-9a-fA-F]"))))))))))))
 (float_literal (type . "TOKEN")
		(content (type . "CHOICE")
			 (members ((type . "CHOICE")
				   (members ((type . "SEQ")
					     (members ((type . "SEQ")
						       (members ((type . "PATTERN")
								 (value . "[0-9]"))
								((type . "REPEAT")
								 (content (type . "SEQ")
									  (members ((type . "CHOICE")
										    (members ((type . "STRING")
											      (value . "_"))
											     ((type . "BLANK"))))
										   ((type . "PATTERN")
										    (value . "[0-9]")))))))
						      ((type . "STRING")
						       (value . "."))
						      ((type . "CHOICE")
						       (members ((type . "SEQ")
								 (members ((type . "PATTERN")
									   (value . "[0-9]"))
									  ((type . "REPEAT")
									   (content (type . "SEQ")
										    (members ((type . "CHOICE")
											      (members ((type . "STRING")
													(value . "_"))
												       ((type . "BLANK"))))
											     ((type . "PATTERN")
											      (value . "[0-9]")))))))
								((type . "BLANK"))))
						      ((type . "CHOICE")
						       (members ((type . "SEQ")
								 (members ((type . "CHOICE")
									   (members ((type . "STRING")
										     (value . "e"))
										    ((type . "STRING")
										     (value . "E"))))
									  ((type . "CHOICE")
									   (members ((type . "CHOICE")
										     (members ((type . "STRING")
											       (value . "+"))
											      ((type . "STRING")
											       (value . "-"))))
										    ((type . "BLANK"))))
									  ((type . "SEQ")
									   (members ((type . "PATTERN")
										     (value . "[0-9]"))
										    ((type . "REPEAT")
										     (content (type . "SEQ")
											      (members ((type . "CHOICE")
													(members ((type . "STRING")
														  (value . "_"))
														 ((type . "BLANK"))))
												       ((type . "PATTERN")
													(value . "[0-9]")))))))))
								((type . "BLANK"))))))
					    ((type . "SEQ")
					     (members ((type . "SEQ")
						       (members ((type . "PATTERN")
								 (value . "[0-9]"))
								((type . "REPEAT")
								 (content (type . "SEQ")
									  (members ((type . "CHOICE")
										    (members ((type . "STRING")
											      (value . "_"))
											     ((type . "BLANK"))))
										   ((type . "PATTERN")
										    (value . "[0-9]")))))))
						      ((type . "SEQ")
						       (members ((type . "CHOICE")
								 (members ((type . "STRING")
									   (value . "e"))
									  ((type . "STRING")
									   (value . "E"))))
								((type . "CHOICE")
								 (members ((type . "CHOICE")
									   (members ((type . "STRING")
										     (value . "+"))
										    ((type . "STRING")
										     (value . "-"))))
									  ((type . "BLANK"))))
								((type . "SEQ")
								 (members ((type . "PATTERN")
									   (value . "[0-9]"))
									  ((type . "REPEAT")
									   (content (type . "SEQ")
										    (members ((type . "CHOICE")
											      (members ((type . "STRING")
													(value . "_"))
												       ((type . "BLANK"))))
											     ((type . "PATTERN")
											      (value . "[0-9]")))))))))))
					    ((type . "SEQ")
					     (members ((type . "STRING")
						       (value . "."))
						      ((type . "SEQ")
						       (members ((type . "PATTERN")
								 (value . "[0-9]"))
								((type . "REPEAT")
								 (content (type . "SEQ")
									  (members ((type . "CHOICE")
										    (members ((type . "STRING")
											      (value . "_"))
											     ((type . "BLANK"))))
										   ((type . "PATTERN")
										    (value . "[0-9]")))))))
						      ((type . "CHOICE")
						       (members ((type . "SEQ")
								 (members ((type . "CHOICE")
									   (members ((type . "STRING")
										     (value . "e"))
										    ((type . "STRING")
										     (value . "E"))))
									  ((type . "CHOICE")
									   (members ((type . "CHOICE")
										     (members ((type . "STRING")
											       (value . "+"))
											      ((type . "STRING")
											       (value . "-"))))
										    ((type . "BLANK"))))
									  ((type . "SEQ")
									   (members ((type . "PATTERN")
										     (value . "[0-9]"))
										    ((type . "REPEAT")
										     (content (type . "SEQ")
											      (members ((type . "CHOICE")
													(members ((type . "STRING")
														  (value . "_"))
														 ((type . "BLANK"))))
												       ((type . "PATTERN")
													(value . "[0-9]")))))))))
								((type . "BLANK"))))))))
				  ((type . "SEQ")
				   (members ((type . "STRING")
					     (value . "0"))
					    ((type . "CHOICE")
					     (members ((type . "STRING")
						       (value . "x"))
						      ((type . "STRING")
						       (value . "X"))))
					    ((type . "CHOICE")
					     (members ((type . "SEQ")
						       (members ((type . "CHOICE")
								 (members ((type . "STRING")
									   (value . "_"))
									  ((type . "BLANK"))))
								((type . "SEQ")
								 (members ((type . "PATTERN")
									   (value . "[0-9a-fA-F]"))
									  ((type . "REPEAT")
									   (content (type . "SEQ")
										    (members ((type . "CHOICE")
											      (members ((type . "STRING")
													(value . "_"))
												       ((type . "BLANK"))))
											     ((type . "PATTERN")
											      (value . "[0-9a-fA-F]")))))))
								((type . "STRING")
								 (value . "."))
								((type . "CHOICE")
								 (members ((type . "SEQ")
									   (members ((type . "PATTERN")
										     (value . "[0-9a-fA-F]"))
										    ((type . "REPEAT")
										     (content (type . "SEQ")
											      (members ((type . "CHOICE")
													(members ((type . "STRING")
														  (value . "_"))
														 ((type . "BLANK"))))
												       ((type . "PATTERN")
													(value . "[0-9a-fA-F]")))))))
									  ((type . "BLANK"))))))
						      ((type . "SEQ")
						       (members ((type . "CHOICE")
								 (members ((type . "STRING")
									   (value . "_"))
									  ((type . "BLANK"))))
								((type . "SEQ")
								 (members ((type . "PATTERN")
									   (value . "[0-9a-fA-F]"))
									  ((type . "REPEAT")
									   (content (type . "SEQ")
										    (members ((type . "CHOICE")
											      (members ((type . "STRING")
													(value . "_"))
												       ((type . "BLANK"))))
											     ((type . "PATTERN")
											      (value . "[0-9a-fA-F]")))))))))
						      ((type . "SEQ")
						       (members ((type . "STRING")
								 (value . "."))
								((type . "SEQ")
								 (members ((type . "PATTERN")
									   (value . "[0-9a-fA-F]"))
									  ((type . "REPEAT")
									   (content (type . "SEQ")
										    (members ((type . "CHOICE")
											      (members ((type . "STRING")
													(value . "_"))
												       ((type . "BLANK"))))
											     ((type . "PATTERN")
											      (value . "[0-9a-fA-F]")))))))))))
					    ((type . "SEQ")
					     (members ((type . "CHOICE")
						       (members ((type . "STRING")
								 (value . "p"))
								((type . "STRING")
								 (value . "P"))))
						      ((type . "CHOICE")
						       (members ((type . "CHOICE")
								 (members ((type . "STRING")
									   (value . "+"))
									  ((type . "STRING")
									   (value . "-"))))
								((type . "BLANK"))))
						      ((type . "SEQ")
						       (members ((type . "PATTERN")
								 (value . "[0-9]"))
								((type . "REPEAT")
								 (content (type . "SEQ")
									  (members ((type . "CHOICE")
										    (members ((type . "STRING")
											      (value . "_"))
											     ((type . "BLANK"))))
										   ((type . "PATTERN")
										    (value . "[0-9]"))))))))))))))
 (imaginary_literal (type . "TOKEN")
		    (content (type . "SEQ")
			     (members ((type . "CHOICE")
				       (members ((type . "SEQ")
						 (members ((type . "PATTERN")
							   (value . "[0-9]"))
							  ((type . "REPEAT")
							   (content (type . "SEQ")
								    (members ((type . "CHOICE")
									      (members ((type . "STRING")
											(value . "_"))
										       ((type . "BLANK"))))
									     ((type . "PATTERN")
									      (value . "[0-9]")))))))
						((type . "CHOICE")
						 (members ((type . "SEQ")
							   (members ((type . "STRING")
								     (value . "0"))
								    ((type . "CHOICE")
								     (members ((type . "STRING")
									       (value . "b"))
									      ((type . "STRING")
									       (value . "B"))))
								    ((type . "CHOICE")
								     (members ((type . "STRING")
									       (value . "_"))
									      ((type . "BLANK"))))
								    ((type . "SEQ")
								     (members ((type . "PATTERN")
									       (value . "[01]"))
									      ((type . "REPEAT")
									       (content (type . "SEQ")
											(members ((type . "CHOICE")
												  (members ((type . "STRING")
													    (value . "_"))
													   ((type . "BLANK"))))
												 ((type . "PATTERN")
												  (value . "[01]")))))))))
							  ((type . "CHOICE")
							   (members ((type . "STRING")
								     (value . "0"))
								    ((type . "SEQ")
								     (members ((type . "PATTERN")
									       (value . "[1-9]"))
									      ((type . "CHOICE")
									       (members ((type . "SEQ")
											 (members ((type . "CHOICE")
												   (members ((type . "STRING")
													     (value . "_"))
													    ((type . "BLANK"))))
												  ((type . "SEQ")
												   (members ((type . "PATTERN")
													     (value . "[0-9]"))
													    ((type . "REPEAT")
													     (content (type . "SEQ")
														      (members ((type . "CHOICE")
																(members ((type . "STRING")
																	  (value . "_"))
																	 ((type . "BLANK"))))
															       ((type . "PATTERN")
																(value . "[0-9]")))))))))
											((type . "BLANK"))))))))
							  ((type . "SEQ")
							   (members ((type . "STRING")
								     (value . "0"))
								    ((type . "CHOICE")
								     (members ((type . "CHOICE")
									       (members ((type . "STRING")
											 (value . "o"))
											((type . "STRING")
											 (value . "O"))))
									      ((type . "BLANK"))))
								    ((type . "CHOICE")
								     (members ((type . "STRING")
									       (value . "_"))
									      ((type . "BLANK"))))
								    ((type . "SEQ")
								     (members ((type . "PATTERN")
									       (value . "[0-7]"))
									      ((type . "REPEAT")
									       (content (type . "SEQ")
											(members ((type . "CHOICE")
												  (members ((type . "STRING")
													    (value . "_"))
													   ((type . "BLANK"))))
												 ((type . "PATTERN")
												  (value . "[0-7]")))))))))
							  ((type . "SEQ")
							   (members ((type . "STRING")
								     (value . "0"))
								    ((type . "CHOICE")
								     (members ((type . "STRING")
									       (value . "x"))
									      ((type . "STRING")
									       (value . "X"))))
								    ((type . "CHOICE")
								     (members ((type . "STRING")
									       (value . "_"))
									      ((type . "BLANK"))))
								    ((type . "SEQ")
								     (members ((type . "PATTERN")
									       (value . "[0-9a-fA-F]"))
									      ((type . "REPEAT")
									       (content (type . "SEQ")
											(members ((type . "CHOICE")
												  (members ((type . "STRING")
													    (value . "_"))
													   ((type . "BLANK"))))
												 ((type . "PATTERN")
												  (value . "[0-9a-fA-F]")))))))))))
						((type . "CHOICE")
						 (members ((type . "CHOICE")
							   (members ((type . "SEQ")
								     (members ((type . "SEQ")
									       (members ((type . "PATTERN")
											 (value . "[0-9]"))
											((type . "REPEAT")
											 (content (type . "SEQ")
												  (members ((type . "CHOICE")
													    (members ((type . "STRING")
														      (value . "_"))
														     ((type . "BLANK"))))
													   ((type . "PATTERN")
													    (value . "[0-9]")))))))
									      ((type . "STRING")
									       (value . "."))
									      ((type . "CHOICE")
									       (members ((type . "SEQ")
											 (members ((type . "PATTERN")
												   (value . "[0-9]"))
												  ((type . "REPEAT")
												   (content (type . "SEQ")
													    (members ((type . "CHOICE")
														      (members ((type . "STRING")
																(value . "_"))
															       ((type . "BLANK"))))
														     ((type . "PATTERN")
														      (value . "[0-9]")))))))
											((type . "BLANK"))))
									      ((type . "CHOICE")
									       (members ((type . "SEQ")
											 (members ((type . "CHOICE")
												   (members ((type . "STRING")
													     (value . "e"))
													    ((type . "STRING")
													     (value . "E"))))
												  ((type . "CHOICE")
												   (members ((type . "CHOICE")
													     (members ((type . "STRING")
														       (value . "+"))
														      ((type . "STRING")
														       (value . "-"))))
													    ((type . "BLANK"))))
												  ((type . "SEQ")
												   (members ((type . "PATTERN")
													     (value . "[0-9]"))
													    ((type . "REPEAT")
													     (content (type . "SEQ")
														      (members ((type . "CHOICE")
																(members ((type . "STRING")
																	  (value . "_"))
																	 ((type . "BLANK"))))
															       ((type . "PATTERN")
																(value . "[0-9]")))))))))
											((type . "BLANK"))))))
								    ((type . "SEQ")
								     (members ((type . "SEQ")
									       (members ((type . "PATTERN")
											 (value . "[0-9]"))
											((type . "REPEAT")
											 (content (type . "SEQ")
												  (members ((type . "CHOICE")
													    (members ((type . "STRING")
														      (value . "_"))
														     ((type . "BLANK"))))
													   ((type . "PATTERN")
													    (value . "[0-9]")))))))
									      ((type . "SEQ")
									       (members ((type . "CHOICE")
											 (members ((type . "STRING")
												   (value . "e"))
												  ((type . "STRING")
												   (value . "E"))))
											((type . "CHOICE")
											 (members ((type . "CHOICE")
												   (members ((type . "STRING")
													     (value . "+"))
													    ((type . "STRING")
													     (value . "-"))))
												  ((type . "BLANK"))))
											((type . "SEQ")
											 (members ((type . "PATTERN")
												   (value . "[0-9]"))
												  ((type . "REPEAT")
												   (content (type . "SEQ")
													    (members ((type . "CHOICE")
														      (members ((type . "STRING")
																(value . "_"))
															       ((type . "BLANK"))))
														     ((type . "PATTERN")
														      (value . "[0-9]")))))))))))
								    ((type . "SEQ")
								     (members ((type . "STRING")
									       (value . "."))
									      ((type . "SEQ")
									       (members ((type . "PATTERN")
											 (value . "[0-9]"))
											((type . "REPEAT")
											 (content (type . "SEQ")
												  (members ((type . "CHOICE")
													    (members ((type . "STRING")
														      (value . "_"))
														     ((type . "BLANK"))))
													   ((type . "PATTERN")
													    (value . "[0-9]")))))))
									      ((type . "CHOICE")
									       (members ((type . "SEQ")
											 (members ((type . "CHOICE")
												   (members ((type . "STRING")
													     (value . "e"))
													    ((type . "STRING")
													     (value . "E"))))
												  ((type . "CHOICE")
												   (members ((type . "CHOICE")
													     (members ((type . "STRING")
														       (value . "+"))
														      ((type . "STRING")
														       (value . "-"))))
													    ((type . "BLANK"))))
												  ((type . "SEQ")
												   (members ((type . "PATTERN")
													     (value . "[0-9]"))
													    ((type . "REPEAT")
													     (content (type . "SEQ")
														      (members ((type . "CHOICE")
																(members ((type . "STRING")
																	  (value . "_"))
																	 ((type . "BLANK"))))
															       ((type . "PATTERN")
																(value . "[0-9]")))))))))
											((type . "BLANK"))))))))
							  ((type . "SEQ")
							   (members ((type . "STRING")
								     (value . "0"))
								    ((type . "CHOICE")
								     (members ((type . "STRING")
									       (value . "x"))
									      ((type . "STRING")
									       (value . "X"))))
								    ((type . "CHOICE")
								     (members ((type . "SEQ")
									       (members ((type . "CHOICE")
											 (members ((type . "STRING")
												   (value . "_"))
												  ((type . "BLANK"))))
											((type . "SEQ")
											 (members ((type . "PATTERN")
												   (value . "[0-9a-fA-F]"))
												  ((type . "REPEAT")
												   (content (type . "SEQ")
													    (members ((type . "CHOICE")
														      (members ((type . "STRING")
																(value . "_"))
															       ((type . "BLANK"))))
														     ((type . "PATTERN")
														      (value . "[0-9a-fA-F]")))))))
											((type . "STRING")
											 (value . "."))
											((type . "CHOICE")
											 (members ((type . "SEQ")
												   (members ((type . "PATTERN")
													     (value . "[0-9a-fA-F]"))
													    ((type . "REPEAT")
													     (content (type . "SEQ")
														      (members ((type . "CHOICE")
																(members ((type . "STRING")
																	  (value . "_"))
																	 ((type . "BLANK"))))
															       ((type . "PATTERN")
																(value . "[0-9a-fA-F]")))))))
												  ((type . "BLANK"))))))
									      ((type . "SEQ")
									       (members ((type . "CHOICE")
											 (members ((type . "STRING")
												   (value . "_"))
												  ((type . "BLANK"))))
											((type . "SEQ")
											 (members ((type . "PATTERN")
												   (value . "[0-9a-fA-F]"))
												  ((type . "REPEAT")
												   (content (type . "SEQ")
													    (members ((type . "CHOICE")
														      (members ((type . "STRING")
																(value . "_"))
															       ((type . "BLANK"))))
														     ((type . "PATTERN")
														      (value . "[0-9a-fA-F]")))))))))
									      ((type . "SEQ")
									       (members ((type . "STRING")
											 (value . "."))
											((type . "SEQ")
											 (members ((type . "PATTERN")
												   (value . "[0-9a-fA-F]"))
												  ((type . "REPEAT")
												   (content (type . "SEQ")
													    (members ((type . "CHOICE")
														      (members ((type . "STRING")
																(value . "_"))
															       ((type . "BLANK"))))
														     ((type . "PATTERN")
														      (value . "[0-9a-fA-F]")))))))))))
								    ((type . "SEQ")
								     (members ((type . "CHOICE")
									       (members ((type . "STRING")
											 (value . "p"))
											((type . "STRING")
											 (value . "P"))))
									      ((type . "CHOICE")
									       (members ((type . "CHOICE")
											 (members ((type . "STRING")
												   (value . "+"))
												  ((type . "STRING")
												   (value . "-"))))
											((type . "BLANK"))))
									      ((type . "SEQ")
									       (members ((type . "PATTERN")
											 (value . "[0-9]"))
											((type . "REPEAT")
											 (content (type . "SEQ")
												  (members ((type . "CHOICE")
													    (members ((type . "STRING")
														      (value . "_"))
														     ((type . "BLANK"))))
													   ((type . "PATTERN")
													    (value . "[0-9]")))))))))))))))
				      ((type . "STRING")
				       (value . "i")))))
 (rune_literal (type . "TOKEN")
	       (content (type . "SEQ")
			(members ((type . "STRING")
				  (value . "'"))
				 ((type . "CHOICE")
				  (members ((type . "PATTERN")
					    (value . "[^'\\\\]"))
					   ((type . "SEQ")
					    (members ((type . "STRING")
						      (value . "\\"))
						     ((type . "CHOICE")
						      (members ((type . "SEQ")
								(members ((type . "STRING")
									  (value . "x"))
									 ((type . "PATTERN")
									  (value . "[0-9a-fA-F]"))
									 ((type . "PATTERN")
									  (value . "[0-9a-fA-F]"))))
							       ((type . "SEQ")
								(members ((type . "PATTERN")
									  (value . "[0-7]"))
									 ((type . "PATTERN")
									  (value . "[0-7]"))
									 ((type . "PATTERN")
									  (value . "[0-7]"))))
							       ((type . "SEQ")
								(members ((type . "STRING")
									  (value . "u"))
									 ((type . "PATTERN")
									  (value . "[0-9a-fA-F]"))
									 ((type . "PATTERN")
									  (value . "[0-9a-fA-F]"))
									 ((type . "PATTERN")
									  (value . "[0-9a-fA-F]"))
									 ((type . "PATTERN")
									  (value . "[0-9a-fA-F]"))))
							       ((type . "SEQ")
								(members ((type . "STRING")
									  (value . "U"))
									 ((type . "PATTERN")
									  (value . "[0-9a-fA-F]"))
									 ((type . "PATTERN")
									  (value . "[0-9a-fA-F]"))
									 ((type . "PATTERN")
									  (value . "[0-9a-fA-F]"))
									 ((type . "PATTERN")
									  (value . "[0-9a-fA-F]"))
									 ((type . "PATTERN")
									  (value . "[0-9a-fA-F]"))
									 ((type . "PATTERN")
									  (value . "[0-9a-fA-F]"))
									 ((type . "PATTERN")
									  (value . "[0-9a-fA-F]"))
									 ((type . "PATTERN")
									  (value . "[0-9a-fA-F]"))))
							       ((type . "SEQ")
								(members ((type . "CHOICE")
									  (members ((type . "STRING")
										    (value . "a"))
										   ((type . "STRING")
										    (value . "b"))
										   ((type . "STRING")
										    (value . "f"))
										   ((type . "STRING")
										    (value . "n"))
										   ((type . "STRING")
										    (value . "r"))
										   ((type . "STRING")
										    (value . "t"))
										   ((type . "STRING")
										    (value . "v"))
										   ((type . "STRING")
										    (value . "\\"))
										   ((type . "STRING")
										    (value . "'"))
										   ((type . "STRING")
										    (value . "\""))))))))))))
				 ((type . "STRING")
				  (value . "'")))))
 (nil (type . "STRING") (value . "nil"))
 (true (type . "STRING") (value . "true"))
 (false (type . "STRING") (value . "false"))
 (comment (type . "TOKEN")
	  (content (type . "CHOICE")
		   (members ((type . "SEQ")
			     (members ((type . "STRING")
				       (value . "//"))
				      ((type . "PATTERN")
				       (value . ".*"))))
			    ((type . "SEQ")
			     (members ((type . "STRING")
				       (value . "/*"))
				      ((type . "PATTERN")
				       (value . "[^*]*\\*+([^/*][^*]*\\*+)*"))
				      ((type . "STRING")
				       (value . "/"))))))))


 tree-edit--identifier-regex
 "[\p{L}_$][\p{L}\p{Nd}_$]*"

 tree-edit--supertypes
 '
((source_file source_file)
 (_top_level_declaration _top_level_declaration)
 (package_clause package_clause source_file _top_level_declaration)
 (import_declaration import_declaration source_file _top_level_declaration)
 (import_spec import_spec)
 (dot dot)
 (blank_identifier blank_identifier)
 (import_spec_list import_spec_list)
 (_declaration _declaration)
 (const_declaration const_declaration
		    _declaration
		    _statement_list
		    _statement)
 (const_spec const_spec)
 (var_declaration var_declaration _declaration _statement_list _statement)
 (var_spec var_spec)
 (function_declaration function_declaration
		       source_file
		       _top_level_declaration)
 (method_declaration method_declaration source_file _top_level_declaration)
 (parameter_list parameter_list)
 (parameter_declaration parameter_declaration)
 (variadic_parameter_declaration variadic_parameter_declaration)
 (type_alias type_alias)
 (type_declaration type_declaration _declaration _statement_list _statement)
 (type_spec type_spec)
 (field_name_list field_name_list)
 (expression_list expression_list)
 (_type _type)
 (parenthesized_type parenthesized_type parameter_declaration _type)
 (_simple_type _simple_type)
 (pointer_type pointer_type parameter_declaration _type _simple_type)
 (array_type array_type parameter_declaration _type _simple_type)
 (implicit_length_array_type implicit_length_array_type)
 (slice_type slice_type parameter_declaration _type _simple_type)
 (struct_type struct_type parameter_declaration _type _simple_type)
 (field_declaration_list field_declaration_list)
 (field_declaration field_declaration)
 (interface_type interface_type parameter_declaration _type _simple_type)
 (method_spec_list method_spec_list)
 (method_spec method_spec)
 (map_type map_type parameter_declaration _type _simple_type)
 (channel_type channel_type parameter_declaration _type _simple_type)
 (function_type function_type parameter_declaration _type _simple_type)
 (block block _statement_list _statement)
 (_statement_list _statement_list)
 (_statement _statement)
 (empty_statement empty_statement _statement_list _statement)
 (_simple_statement _simple_statement)
 (send_statement send_statement _statement_list _statement _simple_statement)
 (receive_statement receive_statement)
 (inc_statement inc_statement _statement_list _statement _simple_statement)
 (dec_statement dec_statement _statement_list _statement _simple_statement)
 (assignment_statement assignment_statement
		       _statement_list
		       _statement
		       _simple_statement)
 (short_var_declaration short_var_declaration
			_statement_list
			_statement
			_simple_statement)
 (labeled_statement labeled_statement _statement_list _statement)
 (empty_labeled_statement empty_labeled_statement)
 (fallthrough_statement fallthrough_statement _statement_list _statement)
 (break_statement break_statement _statement_list _statement)
 (continue_statement continue_statement _statement_list _statement)
 (goto_statement goto_statement _statement_list _statement)
 (return_statement return_statement _statement_list _statement)
 (go_statement go_statement _statement_list _statement)
 (defer_statement defer_statement _statement_list _statement)
 (if_statement if_statement _statement_list _statement)
 (for_statement for_statement _statement_list _statement)
 (for_clause for_clause)
 (range_clause range_clause)
 (expression_switch_statement expression_switch_statement
			      _statement_list
			      _statement)
 (expression_case expression_case)
 (default_case default_case)
 (type_switch_statement type_switch_statement _statement_list _statement)
 (_type_switch_header _type_switch_header)
 (type_case type_case)
 (select_statement select_statement _statement_list _statement)
 (communication_case communication_case)
 (_expression _expression)
 (parenthesized_expression parenthesized_expression
			   expression_list
			   _statement_list
			   _statement
			   _simple_statement
			   receive_statement
			   _expression
			   element)
 (call_expression call_expression
		  expression_list
		  _statement_list
		  _statement
		  _simple_statement
		  receive_statement
		  _expression
		  element)
 (variadic_argument variadic_argument)
 (special_argument_list special_argument_list)
 (argument_list argument_list)
 (selector_expression selector_expression
		      expression_list
		      _statement_list
		      _statement
		      _simple_statement
		      receive_statement
		      _expression
		      element)
 (index_expression index_expression
		   expression_list
		   _statement_list
		   _statement
		   _simple_statement
		   receive_statement
		   _expression
		   element)
 (slice_expression slice_expression
		   expression_list
		   _statement_list
		   _statement
		   _simple_statement
		   receive_statement
		   _expression
		   element)
 (type_assertion_expression type_assertion_expression
			    expression_list
			    _statement_list
			    _statement
			    _simple_statement
			    receive_statement
			    _expression
			    element)
 (type_conversion_expression type_conversion_expression
			     expression_list
			     _statement_list
			     _statement
			     _simple_statement
			     receive_statement
			     _expression
			     element)
 (composite_literal composite_literal
		    expression_list
		    _statement_list
		    _statement
		    _simple_statement
		    receive_statement
		    _expression
		    element)
 (literal_value literal_value element)
 (keyed_element keyed_element)
 (element element)
 (func_literal func_literal
	       expression_list
	       _statement_list
	       _statement
	       _simple_statement
	       receive_statement
	       _expression
	       element)
 (unary_expression unary_expression
		   expression_list
		   _statement_list
		   _statement
		   _simple_statement
		   receive_statement
		   _expression
		   element)
 (binary_expression binary_expression
		    expression_list
		    _statement_list
		    _statement
		    _simple_statement
		    receive_statement
		    _expression
		    element)
 (qualified_type qualified_type
		 parameter_declaration
		 _type
		 _simple_type
		 field_declaration)
 (identifier identifier
	     const_spec
	     expression_list
	     _statement_list
	     _statement
	     _simple_statement
	     receive_statement
	     _expression
	     element)
 (_type_identifier _type_identifier)
 (_field_identifier _field_identifier)
 (_package_identifier _package_identifier)
 (_string_literal _string_literal)
 (raw_string_literal raw_string_literal
		     import_spec
		     expression_list
		     _statement_list
		     _statement
		     _simple_statement
		     receive_statement
		     _expression
		     element
		     _string_literal)
 (interpreted_string_literal interpreted_string_literal
			     import_spec
			     expression_list
			     _statement_list
			     _statement
			     _simple_statement
			     receive_statement
			     _expression
			     element
			     _string_literal)
 (escape_sequence escape_sequence)
 (int_literal int_literal
	      expression_list
	      _statement_list
	      _statement
	      _simple_statement
	      receive_statement
	      _expression
	      element)
 (float_literal float_literal
		expression_list
		_statement_list
		_statement
		_simple_statement
		receive_statement
		_expression
		element)
 (imaginary_literal imaginary_literal
		    expression_list
		    _statement_list
		    _statement
		    _simple_statement
		    receive_statement
		    _expression
		    element)
 (rune_literal rune_literal
	       expression_list
	       _statement_list
	       _statement
	       _simple_statement
	       receive_statement
	       _expression
	       element)
 (nil nil
      expression_list
      _statement_list
      _statement
      _simple_statement
      receive_statement
      _expression
      element)
 (true true
       expression_list
       _statement_list
       _statement
       _simple_statement
       receive_statement
       _expression
       element)
 (false false
	expression_list
	_statement_list
	_statement
	_simple_statement
	receive_statement
	_expression
	element)
 (comment comment source_file))


 tree-edit--subtypes
 '
((comment comment)
 (false false)
 (true true)
 (nil nil)
 (rune_literal rune_literal)
 (imaginary_literal imaginary_literal)
 (float_literal float_literal)
 (int_literal int_literal)
 (escape_sequence escape_sequence)
 (interpreted_string_literal interpreted_string_literal)
 (raw_string_literal raw_string_literal)
 (_string_literal interpreted_string_literal
		  raw_string_literal
		  _string_literal)
 (_package_identifier _package_identifier)
 (_field_identifier _field_identifier)
 (_type_identifier _type_identifier)
 (identifier identifier)
 (qualified_type qualified_type)
 (binary_expression binary_expression)
 (unary_expression unary_expression)
 (func_literal func_literal)
 (keyed_element keyed_element)
 (literal_value literal_value)
 (composite_literal composite_literal)
 (type_conversion_expression type_conversion_expression)
 (type_assertion_expression type_assertion_expression)
 (slice_expression slice_expression)
 (index_expression index_expression)
 (selector_expression selector_expression)
 (argument_list argument_list)
 (special_argument_list special_argument_list)
 (variadic_argument variadic_argument)
 (call_expression call_expression)
 (element false
	  true
	  nil
	  rune_literal
	  imaginary_literal
	  float_literal
	  int_literal
	  interpreted_string_literal
	  raw_string_literal
	  identifier
	  binary_expression
	  unary_expression
	  func_literal
	  element
	  literal_value
	  composite_literal
	  type_conversion_expression
	  type_assertion_expression
	  slice_expression
	  index_expression
	  selector_expression
	  call_expression
	  parenthesized_expression)
 (parenthesized_expression parenthesized_expression)
 (_expression false
	      true
	      nil
	      rune_literal
	      imaginary_literal
	      float_literal
	      int_literal
	      interpreted_string_literal
	      raw_string_literal
	      identifier
	      binary_expression
	      unary_expression
	      func_literal
	      composite_literal
	      type_conversion_expression
	      type_assertion_expression
	      slice_expression
	      index_expression
	      selector_expression
	      call_expression
	      parenthesized_expression
	      _expression)
 (communication_case communication_case)
 (select_statement select_statement)
 (type_case type_case)
 (_type_switch_header _type_switch_header)
 (type_switch_statement type_switch_statement)
 (default_case default_case)
 (expression_case expression_case)
 (expression_switch_statement expression_switch_statement)
 (range_clause range_clause)
 (for_clause for_clause)
 (for_statement for_statement)
 (if_statement if_statement)
 (defer_statement defer_statement)
 (go_statement go_statement)
 (return_statement return_statement)
 (goto_statement goto_statement)
 (continue_statement continue_statement)
 (break_statement break_statement)
 (fallthrough_statement fallthrough_statement)
 (empty_labeled_statement empty_labeled_statement)
 (labeled_statement labeled_statement)
 (short_var_declaration short_var_declaration)
 (assignment_statement assignment_statement)
 (dec_statement dec_statement)
 (inc_statement inc_statement)
 (receive_statement false
		    true
		    nil
		    rune_literal
		    imaginary_literal
		    float_literal
		    int_literal
		    interpreted_string_literal
		    raw_string_literal
		    identifier
		    binary_expression
		    unary_expression
		    func_literal
		    composite_literal
		    type_conversion_expression
		    type_assertion_expression
		    slice_expression
		    index_expression
		    selector_expression
		    call_expression
		    parenthesized_expression
		    receive_statement)
 (send_statement send_statement)
 (_simple_statement false
		    true
		    nil
		    rune_literal
		    imaginary_literal
		    float_literal
		    int_literal
		    interpreted_string_literal
		    raw_string_literal
		    identifier
		    binary_expression
		    unary_expression
		    func_literal
		    composite_literal
		    type_conversion_expression
		    type_assertion_expression
		    slice_expression
		    index_expression
		    selector_expression
		    call_expression
		    parenthesized_expression
		    short_var_declaration
		    assignment_statement
		    dec_statement
		    inc_statement
		    send_statement
		    _simple_statement)
 (empty_statement empty_statement)
 (block block)
 (function_type function_type)
 (channel_type channel_type)
 (map_type map_type)
 (method_spec method_spec)
 (method_spec_list method_spec_list)
 (interface_type interface_type)
 (field_declaration qualified_type field_declaration)
 (field_declaration_list field_declaration_list)
 (struct_type struct_type)
 (slice_type slice_type)
 (implicit_length_array_type implicit_length_array_type)
 (array_type array_type)
 (pointer_type pointer_type)
 (_simple_type qualified_type
	       function_type
	       channel_type
	       map_type
	       interface_type
	       struct_type
	       slice_type
	       array_type
	       pointer_type
	       _simple_type)
 (parenthesized_type parenthesized_type)
 (_type qualified_type
	function_type
	channel_type
	map_type
	interface_type
	struct_type
	slice_type
	array_type
	pointer_type
	parenthesized_type
	_type)
 (expression_list false
		  true
		  nil
		  rune_literal
		  imaginary_literal
		  float_literal
		  int_literal
		  interpreted_string_literal
		  raw_string_literal
		  identifier
		  binary_expression
		  unary_expression
		  func_literal
		  composite_literal
		  type_conversion_expression
		  type_assertion_expression
		  slice_expression
		  index_expression
		  selector_expression
		  call_expression
		  parenthesized_expression
		  expression_list)
 (field_name_list field_name_list)
 (type_spec type_spec)
 (type_declaration type_declaration)
 (type_alias type_alias)
 (variadic_parameter_declaration variadic_parameter_declaration)
 (parameter_declaration qualified_type
			function_type
			channel_type
			map_type
			interface_type
			struct_type
			slice_type
			array_type
			pointer_type
			parenthesized_type
			parameter_declaration)
 (parameter_list parameter_list)
 (method_declaration method_declaration)
 (function_declaration function_declaration)
 (var_spec var_spec)
 (var_declaration var_declaration)
 (const_spec identifier const_spec)
 (_statement false
	     true
	     nil
	     rune_literal
	     imaginary_literal
	     float_literal
	     int_literal
	     interpreted_string_literal
	     raw_string_literal
	     identifier
	     binary_expression
	     unary_expression
	     func_literal
	     composite_literal
	     type_conversion_expression
	     type_assertion_expression
	     slice_expression
	     index_expression
	     selector_expression
	     call_expression
	     parenthesized_expression
	     select_statement
	     type_switch_statement
	     expression_switch_statement
	     for_statement
	     if_statement
	     defer_statement
	     go_statement
	     return_statement
	     goto_statement
	     continue_statement
	     break_statement
	     fallthrough_statement
	     labeled_statement
	     short_var_declaration
	     assignment_statement
	     dec_statement
	     inc_statement
	     send_statement
	     empty_statement
	     _statement
	     block
	     type_declaration
	     var_declaration
	     const_declaration)
 (_statement_list false
		  true
		  nil
		  rune_literal
		  imaginary_literal
		  float_literal
		  int_literal
		  interpreted_string_literal
		  raw_string_literal
		  identifier
		  binary_expression
		  unary_expression
		  func_literal
		  composite_literal
		  type_conversion_expression
		  type_assertion_expression
		  slice_expression
		  index_expression
		  selector_expression
		  call_expression
		  parenthesized_expression
		  select_statement
		  type_switch_statement
		  expression_switch_statement
		  for_statement
		  if_statement
		  defer_statement
		  go_statement
		  return_statement
		  goto_statement
		  continue_statement
		  break_statement
		  fallthrough_statement
		  labeled_statement
		  short_var_declaration
		  assignment_statement
		  dec_statement
		  inc_statement
		  send_statement
		  empty_statement
		  _statement_list
		  block
		  type_declaration
		  var_declaration
		  const_declaration)
 (const_declaration const_declaration)
 (_declaration type_declaration
	       var_declaration
	       const_declaration
	       _declaration)
 (import_spec_list import_spec_list)
 (blank_identifier blank_identifier)
 (dot dot)
 (import_spec interpreted_string_literal raw_string_literal import_spec)
 (import_declaration import_declaration)
 (package_clause package_clause)
 (_top_level_declaration method_declaration
			 function_declaration
			 import_declaration
			 package_clause
			 _top_level_declaration)
 (source_file comment
	      method_declaration
	      function_declaration
	      import_declaration
	      package_clause
	      source_file))


 tree-edit--alias-map
 '
((source_file)
 (_top_level_declaration)
 (package_clause (identifier . package_identifier))
 (import_declaration)
 (import_spec (identifier . package_identifier))
 (dot)
 (blank_identifier)
 (import_spec_list)
 (_declaration)
 (const_declaration)
 (const_spec (identifier . type_identifier))
 (var_declaration)
 (var_spec (identifier . type_identifier))
 (function_declaration (identifier . type_identifier))
 (method_declaration (identifier . field_identifier)
		     (identifier . type_identifier))
 (parameter_list)
 (parameter_declaration (identifier . type_identifier))
 (variadic_parameter_declaration (identifier . type_identifier))
 (type_alias (identifier . type_identifier) (identifier . type_identifier))
 (type_declaration)
 (type_spec (identifier . type_identifier) (identifier . type_identifier))
 (field_name_list (identifier . field_identifier)
		  (identifier . field_identifier))
 (expression_list)
 (_type (identifier . type_identifier))
 (parenthesized_type (identifier . type_identifier))
 (_simple_type (identifier . type_identifier))
 (pointer_type (identifier . type_identifier))
 (array_type (identifier . type_identifier))
 (implicit_length_array_type (identifier . type_identifier))
 (slice_type (identifier . type_identifier))
 (struct_type)
 (field_declaration_list)
 (field_declaration (identifier . field_identifier)
		    (identifier . field_identifier)
		    (identifier . type_identifier)
		    (identifier . type_identifier))
 (interface_type)
 (method_spec_list (identifier . type_identifier)
		   (identifier . type_identifier))
 (method_spec (identifier . field_identifier) (identifier . type_identifier))
 (map_type (identifier . type_identifier) (identifier . type_identifier))
 (channel_type (identifier . type_identifier)
	       (identifier . type_identifier)
	       (identifier . type_identifier))
 (function_type (identifier . type_identifier))
 (block (empty_labeled_statement . labeled_statement)
	(empty_labeled_statement . labeled_statement))
 (_statement_list (empty_labeled_statement . labeled_statement)
		  (empty_labeled_statement . labeled_statement))
 (_statement)
 (empty_statement)
 (_simple_statement)
 (send_statement)
 (receive_statement)
 (inc_statement)
 (dec_statement)
 (assignment_statement)
 (short_var_declaration)
 (labeled_statement (identifier . label_name))
 (empty_labeled_statement (identifier . label_name))
 (fallthrough_statement)
 (break_statement (identifier . label_name))
 (continue_statement (identifier . label_name))
 (goto_statement (identifier . label_name))
 (return_statement)
 (go_statement)
 (defer_statement)
 (if_statement)
 (for_statement)
 (for_clause)
 (range_clause)
 (expression_switch_statement)
 (expression_case (empty_labeled_statement . labeled_statement)
		  (empty_labeled_statement . labeled_statement))
 (default_case (empty_labeled_statement . labeled_statement)
   (empty_labeled_statement . labeled_statement))
 (type_switch_statement)
 (_type_switch_header)
 (type_case (identifier . type_identifier)
	    (identifier . type_identifier)
	    (empty_labeled_statement . labeled_statement)
	    (empty_labeled_statement . labeled_statement))
 (select_statement)
 (communication_case (empty_labeled_statement . labeled_statement)
		     (empty_labeled_statement . labeled_statement))
 (_expression)
 (parenthesized_expression)
 (call_expression (special_argument_list . argument_list))
 (variadic_argument)
 (special_argument_list (identifier . type_identifier))
 (argument_list)
 (selector_expression (identifier . field_identifier))
 (index_expression)
 (slice_expression)
 (type_assertion_expression (identifier . type_identifier))
 (type_conversion_expression (identifier . type_identifier))
 (composite_literal (identifier . type_identifier))
 (literal_value)
 (keyed_element (identifier . field_identifier))
 (element)
 (func_literal (identifier . type_identifier))
 (unary_expression)
 (binary_expression)
 (qualified_type (identifier . package_identifier)
		 (identifier . type_identifier))
 (identifier)
 (_type_identifier (identifier . type_identifier))
 (_field_identifier (identifier . field_identifier))
 (_package_identifier (identifier . package_identifier))
 (_string_literal)
 (raw_string_literal)
 (interpreted_string_literal)
 (escape_sequence)
 (int_literal)
 (float_literal)
 (imaginary_literal)
 (rune_literal)
 (nil)
 (true)
 (false)
 (comment))


 tree-edit--containing-types
 '
((source_file const_declaration
	      type_declaration
	      var_declaration
	      unary_expression
	      binary_expression
	      selector_expression
	      index_expression
	      slice_expression
	      call_expression
	      type_assertion_expression
	      type_conversion_expression
	      identifier
	      identifier
	      composite_literal
	      func_literal
	      raw_string_literal
	      interpreted_string_literal
	      int_literal
	      float_literal
	      imaginary_literal
	      rune_literal
	      nil
	      true
	      false
	      parenthesized_expression
	      send_statement
	      inc_statement
	      dec_statement
	      assignment_statement
	      short_var_declaration
	      return_statement
	      go_statement
	      defer_statement
	      if_statement
	      for_statement
	      expression_switch_statement
	      type_switch_statement
	      select_statement
	      labeled_statement
	      fallthrough_statement
	      break_statement
	      continue_statement
	      goto_statement
	      block
	      empty_statement
	      package_clause
	      function_declaration
	      method_declaration
	      import_declaration)
 (_top_level_declaration package_clause
			 function_declaration
			 method_declaration
			 import_declaration)
 (package_clause package_identifier)
 (import_declaration import_spec import_spec_list)
 (import_spec dot
	      blank_identifier
	      package_identifier
	      raw_string_literal
	      interpreted_string_literal)
 (dot)
 (blank_identifier)
 (import_spec_list import_spec)
 (_declaration const_declaration type_declaration var_declaration)
 (const_declaration const_spec const_spec)
 (const_spec identifier
	     identifier
	     type_identifier
	     qualified_type
	     pointer_type
	     struct_type
	     interface_type
	     array_type
	     slice_type
	     map_type
	     channel_type
	     function_type
	     parenthesized_type
	     expression_list)
 (var_declaration var_spec var_spec)
 (var_spec identifier
	   identifier
	   type_identifier
	   qualified_type
	   pointer_type
	   struct_type
	   interface_type
	   array_type
	   slice_type
	   map_type
	   channel_type
	   function_type
	   parenthesized_type
	   expression_list
	   expression_list)
 (function_declaration identifier
		       parameter_list
		       parameter_list
		       type_identifier
		       qualified_type
		       pointer_type
		       struct_type
		       interface_type
		       array_type
		       slice_type
		       map_type
		       channel_type
		       function_type
		       block)
 (method_declaration parameter_list
		     field_identifier
		     parameter_list
		     parameter_list
		     type_identifier
		     qualified_type
		     pointer_type
		     struct_type
		     interface_type
		     array_type
		     slice_type
		     map_type
		     channel_type
		     function_type
		     block)
 (parameter_list parameter_declaration
		 variadic_parameter_declaration
		 parameter_declaration
		 variadic_parameter_declaration)
 (parameter_declaration identifier
			identifier
			type_identifier
			qualified_type
			pointer_type
			struct_type
			interface_type
			array_type
			slice_type
			map_type
			channel_type
			function_type
			parenthesized_type)
 (variadic_parameter_declaration identifier
				 type_identifier
				 qualified_type
				 pointer_type
				 struct_type
				 interface_type
				 array_type
				 slice_type
				 map_type
				 channel_type
				 function_type
				 parenthesized_type)
 (type_alias type_identifier
	     type_identifier
	     qualified_type
	     pointer_type
	     struct_type
	     interface_type
	     array_type
	     slice_type
	     map_type
	     channel_type
	     function_type
	     parenthesized_type)
 (type_declaration type_spec type_alias type_spec type_alias)
 (type_spec type_identifier
	    type_identifier
	    qualified_type
	    pointer_type
	    struct_type
	    interface_type
	    array_type
	    slice_type
	    map_type
	    channel_type
	    function_type
	    parenthesized_type)
 (field_name_list field_identifier field_identifier)
 (expression_list unary_expression
		  binary_expression
		  selector_expression
		  index_expression
		  slice_expression
		  call_expression
		  type_assertion_expression
		  type_conversion_expression
		  identifier
		  identifier
		  composite_literal
		  func_literal
		  raw_string_literal
		  interpreted_string_literal
		  int_literal
		  float_literal
		  imaginary_literal
		  rune_literal
		  nil
		  true
		  false
		  parenthesized_expression
		  unary_expression
		  binary_expression
		  selector_expression
		  index_expression
		  slice_expression
		  call_expression
		  type_assertion_expression
		  type_conversion_expression
		  identifier
		  identifier
		  composite_literal
		  func_literal
		  raw_string_literal
		  interpreted_string_literal
		  int_literal
		  float_literal
		  imaginary_literal
		  rune_literal
		  nil
		  true
		  false
		  parenthesized_expression)
 (_type type_identifier
	qualified_type
	pointer_type
	struct_type
	interface_type
	array_type
	slice_type
	map_type
	channel_type
	function_type
	parenthesized_type)
 (parenthesized_type type_identifier
		     qualified_type
		     pointer_type
		     struct_type
		     interface_type
		     array_type
		     slice_type
		     map_type
		     channel_type
		     function_type
		     parenthesized_type)
 (_simple_type type_identifier
	       qualified_type
	       pointer_type
	       struct_type
	       interface_type
	       array_type
	       slice_type
	       map_type
	       channel_type
	       function_type)
 (pointer_type type_identifier
	       qualified_type
	       pointer_type
	       struct_type
	       interface_type
	       array_type
	       slice_type
	       map_type
	       channel_type
	       function_type
	       parenthesized_type)
 (array_type unary_expression
	     binary_expression
	     selector_expression
	     index_expression
	     slice_expression
	     call_expression
	     type_assertion_expression
	     type_conversion_expression
	     identifier
	     identifier
	     composite_literal
	     func_literal
	     raw_string_literal
	     interpreted_string_literal
	     int_literal
	     float_literal
	     imaginary_literal
	     rune_literal
	     nil
	     true
	     false
	     parenthesized_expression
	     type_identifier
	     qualified_type
	     pointer_type
	     struct_type
	     interface_type
	     array_type
	     slice_type
	     map_type
	     channel_type
	     function_type
	     parenthesized_type)
 (implicit_length_array_type type_identifier
			     qualified_type
			     pointer_type
			     struct_type
			     interface_type
			     array_type
			     slice_type
			     map_type
			     channel_type
			     function_type
			     parenthesized_type)
 (slice_type type_identifier
	     qualified_type
	     pointer_type
	     struct_type
	     interface_type
	     array_type
	     slice_type
	     map_type
	     channel_type
	     function_type
	     parenthesized_type)
 (struct_type field_declaration_list)
 (field_declaration_list field_declaration field_declaration)
 (field_declaration field_identifier
		    field_identifier
		    type_identifier
		    qualified_type
		    pointer_type
		    struct_type
		    interface_type
		    array_type
		    slice_type
		    map_type
		    channel_type
		    function_type
		    parenthesized_type
		    type_identifier
		    qualified_type
		    raw_string_literal
		    interpreted_string_literal)
 (interface_type method_spec_list)
 (method_spec_list type_identifier
		   qualified_type
		   method_spec
		   type_identifier
		   qualified_type
		   method_spec)
 (method_spec field_identifier
	      parameter_list
	      parameter_list
	      type_identifier
	      qualified_type
	      pointer_type
	      struct_type
	      interface_type
	      array_type
	      slice_type
	      map_type
	      channel_type
	      function_type)
 (map_type type_identifier
	   qualified_type
	   pointer_type
	   struct_type
	   interface_type
	   array_type
	   slice_type
	   map_type
	   channel_type
	   function_type
	   parenthesized_type
	   type_identifier
	   qualified_type
	   pointer_type
	   struct_type
	   interface_type
	   array_type
	   slice_type
	   map_type
	   channel_type
	   function_type
	   parenthesized_type)
 (channel_type type_identifier
	       qualified_type
	       pointer_type
	       struct_type
	       interface_type
	       array_type
	       slice_type
	       map_type
	       channel_type
	       function_type
	       parenthesized_type
	       type_identifier
	       qualified_type
	       pointer_type
	       struct_type
	       interface_type
	       array_type
	       slice_type
	       map_type
	       channel_type
	       function_type
	       parenthesized_type
	       type_identifier
	       qualified_type
	       pointer_type
	       struct_type
	       interface_type
	       array_type
	       slice_type
	       map_type
	       channel_type
	       function_type
	       parenthesized_type)
 (function_type parameter_list
		parameter_list
		type_identifier
		qualified_type
		pointer_type
		struct_type
		interface_type
		array_type
		slice_type
		map_type
		channel_type
		function_type)
 (block const_declaration
	type_declaration
	var_declaration
	unary_expression
	binary_expression
	selector_expression
	index_expression
	slice_expression
	call_expression
	type_assertion_expression
	type_conversion_expression
	identifier
	identifier
	composite_literal
	func_literal
	raw_string_literal
	interpreted_string_literal
	int_literal
	float_literal
	imaginary_literal
	rune_literal
	nil
	true
	false
	parenthesized_expression
	send_statement
	inc_statement
	dec_statement
	assignment_statement
	short_var_declaration
	return_statement
	go_statement
	defer_statement
	if_statement
	for_statement
	expression_switch_statement
	type_switch_statement
	select_statement
	labeled_statement
	fallthrough_statement
	break_statement
	continue_statement
	goto_statement
	block
	empty_statement
	const_declaration
	type_declaration
	var_declaration
	unary_expression
	binary_expression
	selector_expression
	index_expression
	slice_expression
	call_expression
	type_assertion_expression
	type_conversion_expression
	identifier
	identifier
	composite_literal
	func_literal
	raw_string_literal
	interpreted_string_literal
	int_literal
	float_literal
	imaginary_literal
	rune_literal
	nil
	true
	false
	parenthesized_expression
	send_statement
	inc_statement
	dec_statement
	assignment_statement
	short_var_declaration
	return_statement
	go_statement
	defer_statement
	if_statement
	for_statement
	expression_switch_statement
	type_switch_statement
	select_statement
	labeled_statement
	fallthrough_statement
	break_statement
	continue_statement
	goto_statement
	block
	empty_statement
	labeled_statement
	labeled_statement)
 (_statement_list const_declaration
		  type_declaration
		  var_declaration
		  unary_expression
		  binary_expression
		  selector_expression
		  index_expression
		  slice_expression
		  call_expression
		  type_assertion_expression
		  type_conversion_expression
		  identifier
		  identifier
		  composite_literal
		  func_literal
		  raw_string_literal
		  interpreted_string_literal
		  int_literal
		  float_literal
		  imaginary_literal
		  rune_literal
		  nil
		  true
		  false
		  parenthesized_expression
		  send_statement
		  inc_statement
		  dec_statement
		  assignment_statement
		  short_var_declaration
		  return_statement
		  go_statement
		  defer_statement
		  if_statement
		  for_statement
		  expression_switch_statement
		  type_switch_statement
		  select_statement
		  labeled_statement
		  fallthrough_statement
		  break_statement
		  continue_statement
		  goto_statement
		  block
		  empty_statement
		  const_declaration
		  type_declaration
		  var_declaration
		  unary_expression
		  binary_expression
		  selector_expression
		  index_expression
		  slice_expression
		  call_expression
		  type_assertion_expression
		  type_conversion_expression
		  identifier
		  identifier
		  composite_literal
		  func_literal
		  raw_string_literal
		  interpreted_string_literal
		  int_literal
		  float_literal
		  imaginary_literal
		  rune_literal
		  nil
		  true
		  false
		  parenthesized_expression
		  send_statement
		  inc_statement
		  dec_statement
		  assignment_statement
		  short_var_declaration
		  return_statement
		  go_statement
		  defer_statement
		  if_statement
		  for_statement
		  expression_switch_statement
		  type_switch_statement
		  select_statement
		  labeled_statement
		  fallthrough_statement
		  break_statement
		  continue_statement
		  goto_statement
		  block
		  empty_statement
		  labeled_statement
		  labeled_statement)
 (_statement const_declaration
	     type_declaration
	     var_declaration
	     unary_expression
	     binary_expression
	     selector_expression
	     index_expression
	     slice_expression
	     call_expression
	     type_assertion_expression
	     type_conversion_expression
	     identifier
	     identifier
	     composite_literal
	     func_literal
	     raw_string_literal
	     interpreted_string_literal
	     int_literal
	     float_literal
	     imaginary_literal
	     rune_literal
	     nil
	     true
	     false
	     parenthesized_expression
	     send_statement
	     inc_statement
	     dec_statement
	     assignment_statement
	     short_var_declaration
	     return_statement
	     go_statement
	     defer_statement
	     if_statement
	     for_statement
	     expression_switch_statement
	     type_switch_statement
	     select_statement
	     labeled_statement
	     fallthrough_statement
	     break_statement
	     continue_statement
	     goto_statement
	     block
	     empty_statement)
 (empty_statement)
 (_simple_statement unary_expression
		    binary_expression
		    selector_expression
		    index_expression
		    slice_expression
		    call_expression
		    type_assertion_expression
		    type_conversion_expression
		    identifier
		    identifier
		    composite_literal
		    func_literal
		    raw_string_literal
		    interpreted_string_literal
		    int_literal
		    float_literal
		    imaginary_literal
		    rune_literal
		    nil
		    true
		    false
		    parenthesized_expression
		    send_statement
		    inc_statement
		    dec_statement
		    assignment_statement
		    short_var_declaration)
 (send_statement unary_expression
		 binary_expression
		 selector_expression
		 index_expression
		 slice_expression
		 call_expression
		 type_assertion_expression
		 type_conversion_expression
		 identifier
		 identifier
		 composite_literal
		 func_literal
		 raw_string_literal
		 interpreted_string_literal
		 int_literal
		 float_literal
		 imaginary_literal
		 rune_literal
		 nil
		 true
		 false
		 parenthesized_expression
		 unary_expression
		 binary_expression
		 selector_expression
		 index_expression
		 slice_expression
		 call_expression
		 type_assertion_expression
		 type_conversion_expression
		 identifier
		 identifier
		 composite_literal
		 func_literal
		 raw_string_literal
		 interpreted_string_literal
		 int_literal
		 float_literal
		 imaginary_literal
		 rune_literal
		 nil
		 true
		 false
		 parenthesized_expression)
 (receive_statement expression_list
		    unary_expression
		    binary_expression
		    selector_expression
		    index_expression
		    slice_expression
		    call_expression
		    type_assertion_expression
		    type_conversion_expression
		    identifier
		    identifier
		    composite_literal
		    func_literal
		    raw_string_literal
		    interpreted_string_literal
		    int_literal
		    float_literal
		    imaginary_literal
		    rune_literal
		    nil
		    true
		    false
		    parenthesized_expression)
 (inc_statement unary_expression
		binary_expression
		selector_expression
		index_expression
		slice_expression
		call_expression
		type_assertion_expression
		type_conversion_expression
		identifier
		identifier
		composite_literal
		func_literal
		raw_string_literal
		interpreted_string_literal
		int_literal
		float_literal
		imaginary_literal
		rune_literal
		nil
		true
		false
		parenthesized_expression)
 (dec_statement unary_expression
		binary_expression
		selector_expression
		index_expression
		slice_expression
		call_expression
		type_assertion_expression
		type_conversion_expression
		identifier
		identifier
		composite_literal
		func_literal
		raw_string_literal
		interpreted_string_literal
		int_literal
		float_literal
		imaginary_literal
		rune_literal
		nil
		true
		false
		parenthesized_expression)
 (assignment_statement expression_list expression_list)
 (short_var_declaration expression_list expression_list)
 (labeled_statement label_name
		    const_declaration
		    type_declaration
		    var_declaration
		    unary_expression
		    binary_expression
		    selector_expression
		    index_expression
		    slice_expression
		    call_expression
		    type_assertion_expression
		    type_conversion_expression
		    identifier
		    identifier
		    composite_literal
		    func_literal
		    raw_string_literal
		    interpreted_string_literal
		    int_literal
		    float_literal
		    imaginary_literal
		    rune_literal
		    nil
		    true
		    false
		    parenthesized_expression
		    send_statement
		    inc_statement
		    dec_statement
		    assignment_statement
		    short_var_declaration
		    return_statement
		    go_statement
		    defer_statement
		    if_statement
		    for_statement
		    expression_switch_statement
		    type_switch_statement
		    select_statement
		    labeled_statement
		    fallthrough_statement
		    break_statement
		    continue_statement
		    goto_statement
		    block
		    empty_statement)
 (empty_labeled_statement label_name)
 (fallthrough_statement)
 (break_statement label_name)
 (continue_statement label_name)
 (goto_statement label_name)
 (return_statement expression_list)
 (go_statement unary_expression
	       binary_expression
	       selector_expression
	       index_expression
	       slice_expression
	       call_expression
	       type_assertion_expression
	       type_conversion_expression
	       identifier
	       identifier
	       composite_literal
	       func_literal
	       raw_string_literal
	       interpreted_string_literal
	       int_literal
	       float_literal
	       imaginary_literal
	       rune_literal
	       nil
	       true
	       false
	       parenthesized_expression)
 (defer_statement unary_expression
   binary_expression
   selector_expression
   index_expression
   slice_expression
   call_expression
   type_assertion_expression
   type_conversion_expression
   identifier
   identifier
   composite_literal
   func_literal
   raw_string_literal
   interpreted_string_literal
   int_literal
   float_literal
   imaginary_literal
   rune_literal
   nil
   true
   false
   parenthesized_expression)
 (if_statement unary_expression
	       binary_expression
	       selector_expression
	       index_expression
	       slice_expression
	       call_expression
	       type_assertion_expression
	       type_conversion_expression
	       identifier
	       identifier
	       composite_literal
	       func_literal
	       raw_string_literal
	       interpreted_string_literal
	       int_literal
	       float_literal
	       imaginary_literal
	       rune_literal
	       nil
	       true
	       false
	       parenthesized_expression
	       send_statement
	       inc_statement
	       dec_statement
	       assignment_statement
	       short_var_declaration
	       unary_expression
	       binary_expression
	       selector_expression
	       index_expression
	       slice_expression
	       call_expression
	       type_assertion_expression
	       type_conversion_expression
	       identifier
	       identifier
	       composite_literal
	       func_literal
	       raw_string_literal
	       interpreted_string_literal
	       int_literal
	       float_literal
	       imaginary_literal
	       rune_literal
	       nil
	       true
	       false
	       parenthesized_expression
	       block
	       block
	       if_statement)
 (for_statement unary_expression
		binary_expression
		selector_expression
		index_expression
		slice_expression
		call_expression
		type_assertion_expression
		type_conversion_expression
		identifier
		identifier
		composite_literal
		func_literal
		raw_string_literal
		interpreted_string_literal
		int_literal
		float_literal
		imaginary_literal
		rune_literal
		nil
		true
		false
		parenthesized_expression
		for_clause
		range_clause
		block)
 (for_clause unary_expression
	     binary_expression
	     selector_expression
	     index_expression
	     slice_expression
	     call_expression
	     type_assertion_expression
	     type_conversion_expression
	     identifier
	     identifier
	     composite_literal
	     func_literal
	     raw_string_literal
	     interpreted_string_literal
	     int_literal
	     float_literal
	     imaginary_literal
	     rune_literal
	     nil
	     true
	     false
	     parenthesized_expression
	     send_statement
	     inc_statement
	     dec_statement
	     assignment_statement
	     short_var_declaration
	     unary_expression
	     binary_expression
	     selector_expression
	     index_expression
	     slice_expression
	     call_expression
	     type_assertion_expression
	     type_conversion_expression
	     identifier
	     identifier
	     composite_literal
	     func_literal
	     raw_string_literal
	     interpreted_string_literal
	     int_literal
	     float_literal
	     imaginary_literal
	     rune_literal
	     nil
	     true
	     false
	     parenthesized_expression
	     unary_expression
	     binary_expression
	     selector_expression
	     index_expression
	     slice_expression
	     call_expression
	     type_assertion_expression
	     type_conversion_expression
	     identifier
	     identifier
	     composite_literal
	     func_literal
	     raw_string_literal
	     interpreted_string_literal
	     int_literal
	     float_literal
	     imaginary_literal
	     rune_literal
	     nil
	     true
	     false
	     parenthesized_expression
	     send_statement
	     inc_statement
	     dec_statement
	     assignment_statement
	     short_var_declaration)
 (range_clause expression_list
	       unary_expression
	       binary_expression
	       selector_expression
	       index_expression
	       slice_expression
	       call_expression
	       type_assertion_expression
	       type_conversion_expression
	       identifier
	       identifier
	       composite_literal
	       func_literal
	       raw_string_literal
	       interpreted_string_literal
	       int_literal
	       float_literal
	       imaginary_literal
	       rune_literal
	       nil
	       true
	       false
	       parenthesized_expression)
 (expression_switch_statement unary_expression
			      binary_expression
			      selector_expression
			      index_expression
			      slice_expression
			      call_expression
			      type_assertion_expression
			      type_conversion_expression
			      identifier
			      identifier
			      composite_literal
			      func_literal
			      raw_string_literal
			      interpreted_string_literal
			      int_literal
			      float_literal
			      imaginary_literal
			      rune_literal
			      nil
			      true
			      false
			      parenthesized_expression
			      send_statement
			      inc_statement
			      dec_statement
			      assignment_statement
			      short_var_declaration
			      unary_expression
			      binary_expression
			      selector_expression
			      index_expression
			      slice_expression
			      call_expression
			      type_assertion_expression
			      type_conversion_expression
			      identifier
			      identifier
			      composite_literal
			      func_literal
			      raw_string_literal
			      interpreted_string_literal
			      int_literal
			      float_literal
			      imaginary_literal
			      rune_literal
			      nil
			      true
			      false
			      parenthesized_expression
			      expression_case
			      default_case)
 (expression_case expression_list
		  const_declaration
		  type_declaration
		  var_declaration
		  unary_expression
		  binary_expression
		  selector_expression
		  index_expression
		  slice_expression
		  call_expression
		  type_assertion_expression
		  type_conversion_expression
		  identifier
		  identifier
		  composite_literal
		  func_literal
		  raw_string_literal
		  interpreted_string_literal
		  int_literal
		  float_literal
		  imaginary_literal
		  rune_literal
		  nil
		  true
		  false
		  parenthesized_expression
		  send_statement
		  inc_statement
		  dec_statement
		  assignment_statement
		  short_var_declaration
		  return_statement
		  go_statement
		  defer_statement
		  if_statement
		  for_statement
		  expression_switch_statement
		  type_switch_statement
		  select_statement
		  labeled_statement
		  fallthrough_statement
		  break_statement
		  continue_statement
		  goto_statement
		  block
		  empty_statement
		  const_declaration
		  type_declaration
		  var_declaration
		  unary_expression
		  binary_expression
		  selector_expression
		  index_expression
		  slice_expression
		  call_expression
		  type_assertion_expression
		  type_conversion_expression
		  identifier
		  identifier
		  composite_literal
		  func_literal
		  raw_string_literal
		  interpreted_string_literal
		  int_literal
		  float_literal
		  imaginary_literal
		  rune_literal
		  nil
		  true
		  false
		  parenthesized_expression
		  send_statement
		  inc_statement
		  dec_statement
		  assignment_statement
		  short_var_declaration
		  return_statement
		  go_statement
		  defer_statement
		  if_statement
		  for_statement
		  expression_switch_statement
		  type_switch_statement
		  select_statement
		  labeled_statement
		  fallthrough_statement
		  break_statement
		  continue_statement
		  goto_statement
		  block
		  empty_statement
		  labeled_statement
		  labeled_statement)
 (default_case const_declaration
   type_declaration
   var_declaration
   unary_expression
   binary_expression
   selector_expression
   index_expression
   slice_expression
   call_expression
   type_assertion_expression
   type_conversion_expression
   identifier
   identifier
   composite_literal
   func_literal
   raw_string_literal
   interpreted_string_literal
   int_literal
   float_literal
   imaginary_literal
   rune_literal
   nil
   true
   false
   parenthesized_expression
   send_statement
   inc_statement
   dec_statement
   assignment_statement
   short_var_declaration
   return_statement
   go_statement
   defer_statement
   if_statement
   for_statement
   expression_switch_statement
   type_switch_statement
   select_statement
   labeled_statement
   fallthrough_statement
   break_statement
   continue_statement
   goto_statement
   block
   empty_statement
   const_declaration
   type_declaration
   var_declaration
   unary_expression
   binary_expression
   selector_expression
   index_expression
   slice_expression
   call_expression
   type_assertion_expression
   type_conversion_expression
   identifier
   identifier
   composite_literal
   func_literal
   raw_string_literal
   interpreted_string_literal
   int_literal
   float_literal
   imaginary_literal
   rune_literal
   nil
   true
   false
   parenthesized_expression
   send_statement
   inc_statement
   dec_statement
   assignment_statement
   short_var_declaration
   return_statement
   go_statement
   defer_statement
   if_statement
   for_statement
   expression_switch_statement
   type_switch_statement
   select_statement
   labeled_statement
   fallthrough_statement
   break_statement
   continue_statement
   goto_statement
   block
   empty_statement
   labeled_statement
   labeled_statement)
 (type_switch_statement unary_expression
			binary_expression
			selector_expression
			index_expression
			slice_expression
			call_expression
			type_assertion_expression
			type_conversion_expression
			identifier
			identifier
			composite_literal
			func_literal
			raw_string_literal
			interpreted_string_literal
			int_literal
			float_literal
			imaginary_literal
			rune_literal
			nil
			true
			false
			parenthesized_expression
			send_statement
			inc_statement
			dec_statement
			assignment_statement
			short_var_declaration
			expression_list
			unary_expression
			binary_expression
			selector_expression
			index_expression
			slice_expression
			call_expression
			type_assertion_expression
			type_conversion_expression
			identifier
			identifier
			composite_literal
			func_literal
			raw_string_literal
			interpreted_string_literal
			int_literal
			float_literal
			imaginary_literal
			rune_literal
			nil
			true
			false
			parenthesized_expression
			type_case
			default_case)
 (_type_switch_header unary_expression
		      binary_expression
		      selector_expression
		      index_expression
		      slice_expression
		      call_expression
		      type_assertion_expression
		      type_conversion_expression
		      identifier
		      identifier
		      composite_literal
		      func_literal
		      raw_string_literal
		      interpreted_string_literal
		      int_literal
		      float_literal
		      imaginary_literal
		      rune_literal
		      nil
		      true
		      false
		      parenthesized_expression
		      send_statement
		      inc_statement
		      dec_statement
		      assignment_statement
		      short_var_declaration
		      expression_list
		      unary_expression
		      binary_expression
		      selector_expression
		      index_expression
		      slice_expression
		      call_expression
		      type_assertion_expression
		      type_conversion_expression
		      identifier
		      identifier
		      composite_literal
		      func_literal
		      raw_string_literal
		      interpreted_string_literal
		      int_literal
		      float_literal
		      imaginary_literal
		      rune_literal
		      nil
		      true
		      false
		      parenthesized_expression)
 (type_case type_identifier
	    qualified_type
	    pointer_type
	    struct_type
	    interface_type
	    array_type
	    slice_type
	    map_type
	    channel_type
	    function_type
	    parenthesized_type
	    type_identifier
	    qualified_type
	    pointer_type
	    struct_type
	    interface_type
	    array_type
	    slice_type
	    map_type
	    channel_type
	    function_type
	    parenthesized_type
	    const_declaration
	    type_declaration
	    var_declaration
	    unary_expression
	    binary_expression
	    selector_expression
	    index_expression
	    slice_expression
	    call_expression
	    type_assertion_expression
	    type_conversion_expression
	    identifier
	    identifier
	    composite_literal
	    func_literal
	    raw_string_literal
	    interpreted_string_literal
	    int_literal
	    float_literal
	    imaginary_literal
	    rune_literal
	    nil
	    true
	    false
	    parenthesized_expression
	    send_statement
	    inc_statement
	    dec_statement
	    assignment_statement
	    short_var_declaration
	    return_statement
	    go_statement
	    defer_statement
	    if_statement
	    for_statement
	    expression_switch_statement
	    type_switch_statement
	    select_statement
	    labeled_statement
	    fallthrough_statement
	    break_statement
	    continue_statement
	    goto_statement
	    block
	    empty_statement
	    const_declaration
	    type_declaration
	    var_declaration
	    unary_expression
	    binary_expression
	    selector_expression
	    index_expression
	    slice_expression
	    call_expression
	    type_assertion_expression
	    type_conversion_expression
	    identifier
	    identifier
	    composite_literal
	    func_literal
	    raw_string_literal
	    interpreted_string_literal
	    int_literal
	    float_literal
	    imaginary_literal
	    rune_literal
	    nil
	    true
	    false
	    parenthesized_expression
	    send_statement
	    inc_statement
	    dec_statement
	    assignment_statement
	    short_var_declaration
	    return_statement
	    go_statement
	    defer_statement
	    if_statement
	    for_statement
	    expression_switch_statement
	    type_switch_statement
	    select_statement
	    labeled_statement
	    fallthrough_statement
	    break_statement
	    continue_statement
	    goto_statement
	    block
	    empty_statement
	    labeled_statement
	    labeled_statement)
 (select_statement communication_case default_case)
 (communication_case send_statement
		     receive_statement
		     const_declaration
		     type_declaration
		     var_declaration
		     unary_expression
		     binary_expression
		     selector_expression
		     index_expression
		     slice_expression
		     call_expression
		     type_assertion_expression
		     type_conversion_expression
		     identifier
		     identifier
		     composite_literal
		     func_literal
		     raw_string_literal
		     interpreted_string_literal
		     int_literal
		     float_literal
		     imaginary_literal
		     rune_literal
		     nil
		     true
		     false
		     parenthesized_expression
		     send_statement
		     inc_statement
		     dec_statement
		     assignment_statement
		     short_var_declaration
		     return_statement
		     go_statement
		     defer_statement
		     if_statement
		     for_statement
		     expression_switch_statement
		     type_switch_statement
		     select_statement
		     labeled_statement
		     fallthrough_statement
		     break_statement
		     continue_statement
		     goto_statement
		     block
		     empty_statement
		     const_declaration
		     type_declaration
		     var_declaration
		     unary_expression
		     binary_expression
		     selector_expression
		     index_expression
		     slice_expression
		     call_expression
		     type_assertion_expression
		     type_conversion_expression
		     identifier
		     identifier
		     composite_literal
		     func_literal
		     raw_string_literal
		     interpreted_string_literal
		     int_literal
		     float_literal
		     imaginary_literal
		     rune_literal
		     nil
		     true
		     false
		     parenthesized_expression
		     send_statement
		     inc_statement
		     dec_statement
		     assignment_statement
		     short_var_declaration
		     return_statement
		     go_statement
		     defer_statement
		     if_statement
		     for_statement
		     expression_switch_statement
		     type_switch_statement
		     select_statement
		     labeled_statement
		     fallthrough_statement
		     break_statement
		     continue_statement
		     goto_statement
		     block
		     empty_statement
		     labeled_statement
		     labeled_statement)
 (_expression unary_expression
	      binary_expression
	      selector_expression
	      index_expression
	      slice_expression
	      call_expression
	      type_assertion_expression
	      type_conversion_expression
	      identifier
	      identifier
	      composite_literal
	      func_literal
	      raw_string_literal
	      interpreted_string_literal
	      int_literal
	      float_literal
	      imaginary_literal
	      rune_literal
	      nil
	      true
	      false
	      parenthesized_expression)
 (parenthesized_expression unary_expression
			   binary_expression
			   selector_expression
			   index_expression
			   slice_expression
			   call_expression
			   type_assertion_expression
			   type_conversion_expression
			   identifier
			   identifier
			   composite_literal
			   func_literal
			   raw_string_literal
			   interpreted_string_literal
			   int_literal
			   float_literal
			   imaginary_literal
			   rune_literal
			   nil
			   true
			   false
			   parenthesized_expression)
 (call_expression identifier
		  argument_list
		  unary_expression
		  binary_expression
		  selector_expression
		  index_expression
		  slice_expression
		  call_expression
		  type_assertion_expression
		  type_conversion_expression
		  identifier
		  identifier
		  composite_literal
		  func_literal
		  raw_string_literal
		  interpreted_string_literal
		  int_literal
		  float_literal
		  imaginary_literal
		  rune_literal
		  nil
		  true
		  false
		  parenthesized_expression
		  argument_list)
 (variadic_argument unary_expression
		    binary_expression
		    selector_expression
		    index_expression
		    slice_expression
		    call_expression
		    type_assertion_expression
		    type_conversion_expression
		    identifier
		    identifier
		    composite_literal
		    func_literal
		    raw_string_literal
		    interpreted_string_literal
		    int_literal
		    float_literal
		    imaginary_literal
		    rune_literal
		    nil
		    true
		    false
		    parenthesized_expression)
 (special_argument_list type_identifier
			qualified_type
			pointer_type
			struct_type
			interface_type
			array_type
			slice_type
			map_type
			channel_type
			function_type
			parenthesized_type
			unary_expression
			binary_expression
			selector_expression
			index_expression
			slice_expression
			call_expression
			type_assertion_expression
			type_conversion_expression
			identifier
			identifier
			composite_literal
			func_literal
			raw_string_literal
			interpreted_string_literal
			int_literal
			float_literal
			imaginary_literal
			rune_literal
			nil
			true
			false
			parenthesized_expression)
 (argument_list unary_expression
		binary_expression
		selector_expression
		index_expression
		slice_expression
		call_expression
		type_assertion_expression
		type_conversion_expression
		identifier
		identifier
		composite_literal
		func_literal
		raw_string_literal
		interpreted_string_literal
		int_literal
		float_literal
		imaginary_literal
		rune_literal
		nil
		true
		false
		parenthesized_expression
		variadic_argument
		unary_expression
		binary_expression
		selector_expression
		index_expression
		slice_expression
		call_expression
		type_assertion_expression
		type_conversion_expression
		identifier
		identifier
		composite_literal
		func_literal
		raw_string_literal
		interpreted_string_literal
		int_literal
		float_literal
		imaginary_literal
		rune_literal
		nil
		true
		false
		parenthesized_expression
		variadic_argument)
 (selector_expression unary_expression
		      binary_expression
		      selector_expression
		      index_expression
		      slice_expression
		      call_expression
		      type_assertion_expression
		      type_conversion_expression
		      identifier
		      identifier
		      composite_literal
		      func_literal
		      raw_string_literal
		      interpreted_string_literal
		      int_literal
		      float_literal
		      imaginary_literal
		      rune_literal
		      nil
		      true
		      false
		      parenthesized_expression
		      field_identifier)
 (index_expression unary_expression
		   binary_expression
		   selector_expression
		   index_expression
		   slice_expression
		   call_expression
		   type_assertion_expression
		   type_conversion_expression
		   identifier
		   identifier
		   composite_literal
		   func_literal
		   raw_string_literal
		   interpreted_string_literal
		   int_literal
		   float_literal
		   imaginary_literal
		   rune_literal
		   nil
		   true
		   false
		   parenthesized_expression
		   unary_expression
		   binary_expression
		   selector_expression
		   index_expression
		   slice_expression
		   call_expression
		   type_assertion_expression
		   type_conversion_expression
		   identifier
		   identifier
		   composite_literal
		   func_literal
		   raw_string_literal
		   interpreted_string_literal
		   int_literal
		   float_literal
		   imaginary_literal
		   rune_literal
		   nil
		   true
		   false
		   parenthesized_expression)
 (slice_expression unary_expression
		   binary_expression
		   selector_expression
		   index_expression
		   slice_expression
		   call_expression
		   type_assertion_expression
		   type_conversion_expression
		   identifier
		   identifier
		   composite_literal
		   func_literal
		   raw_string_literal
		   interpreted_string_literal
		   int_literal
		   float_literal
		   imaginary_literal
		   rune_literal
		   nil
		   true
		   false
		   parenthesized_expression
		   unary_expression
		   binary_expression
		   selector_expression
		   index_expression
		   slice_expression
		   call_expression
		   type_assertion_expression
		   type_conversion_expression
		   identifier
		   identifier
		   composite_literal
		   func_literal
		   raw_string_literal
		   interpreted_string_literal
		   int_literal
		   float_literal
		   imaginary_literal
		   rune_literal
		   nil
		   true
		   false
		   parenthesized_expression
		   unary_expression
		   binary_expression
		   selector_expression
		   index_expression
		   slice_expression
		   call_expression
		   type_assertion_expression
		   type_conversion_expression
		   identifier
		   identifier
		   composite_literal
		   func_literal
		   raw_string_literal
		   interpreted_string_literal
		   int_literal
		   float_literal
		   imaginary_literal
		   rune_literal
		   nil
		   true
		   false
		   parenthesized_expression
		   unary_expression
		   binary_expression
		   selector_expression
		   index_expression
		   slice_expression
		   call_expression
		   type_assertion_expression
		   type_conversion_expression
		   identifier
		   identifier
		   composite_literal
		   func_literal
		   raw_string_literal
		   interpreted_string_literal
		   int_literal
		   float_literal
		   imaginary_literal
		   rune_literal
		   nil
		   true
		   false
		   parenthesized_expression
		   unary_expression
		   binary_expression
		   selector_expression
		   index_expression
		   slice_expression
		   call_expression
		   type_assertion_expression
		   type_conversion_expression
		   identifier
		   identifier
		   composite_literal
		   func_literal
		   raw_string_literal
		   interpreted_string_literal
		   int_literal
		   float_literal
		   imaginary_literal
		   rune_literal
		   nil
		   true
		   false
		   parenthesized_expression
		   unary_expression
		   binary_expression
		   selector_expression
		   index_expression
		   slice_expression
		   call_expression
		   type_assertion_expression
		   type_conversion_expression
		   identifier
		   identifier
		   composite_literal
		   func_literal
		   raw_string_literal
		   interpreted_string_literal
		   int_literal
		   float_literal
		   imaginary_literal
		   rune_literal
		   nil
		   true
		   false
		   parenthesized_expression)
 (type_assertion_expression unary_expression
			    binary_expression
			    selector_expression
			    index_expression
			    slice_expression
			    call_expression
			    type_assertion_expression
			    type_conversion_expression
			    identifier
			    identifier
			    composite_literal
			    func_literal
			    raw_string_literal
			    interpreted_string_literal
			    int_literal
			    float_literal
			    imaginary_literal
			    rune_literal
			    nil
			    true
			    false
			    parenthesized_expression
			    type_identifier
			    qualified_type
			    pointer_type
			    struct_type
			    interface_type
			    array_type
			    slice_type
			    map_type
			    channel_type
			    function_type
			    parenthesized_type)
 (type_conversion_expression type_identifier
			     qualified_type
			     pointer_type
			     struct_type
			     interface_type
			     array_type
			     slice_type
			     map_type
			     channel_type
			     function_type
			     parenthesized_type
			     unary_expression
			     binary_expression
			     selector_expression
			     index_expression
			     slice_expression
			     call_expression
			     type_assertion_expression
			     type_conversion_expression
			     identifier
			     identifier
			     composite_literal
			     func_literal
			     raw_string_literal
			     interpreted_string_literal
			     int_literal
			     float_literal
			     imaginary_literal
			     rune_literal
			     nil
			     true
			     false
			     parenthesized_expression)
 (composite_literal map_type
		    slice_type
		    array_type
		    implicit_length_array_type
		    struct_type
		    type_identifier
		    qualified_type
		    literal_value)
 (literal_value element keyed_element element keyed_element)
 (keyed_element unary_expression
		binary_expression
		selector_expression
		index_expression
		slice_expression
		call_expression
		type_assertion_expression
		type_conversion_expression
		identifier
		identifier
		composite_literal
		func_literal
		raw_string_literal
		interpreted_string_literal
		int_literal
		float_literal
		imaginary_literal
		rune_literal
		nil
		true
		false
		parenthesized_expression
		literal_value
		field_identifier
		unary_expression
		binary_expression
		selector_expression
		index_expression
		slice_expression
		call_expression
		type_assertion_expression
		type_conversion_expression
		identifier
		identifier
		composite_literal
		func_literal
		raw_string_literal
		interpreted_string_literal
		int_literal
		float_literal
		imaginary_literal
		rune_literal
		nil
		true
		false
		parenthesized_expression
		literal_value)
 (element unary_expression
	  binary_expression
	  selector_expression
	  index_expression
	  slice_expression
	  call_expression
	  type_assertion_expression
	  type_conversion_expression
	  identifier
	  identifier
	  composite_literal
	  func_literal
	  raw_string_literal
	  interpreted_string_literal
	  int_literal
	  float_literal
	  imaginary_literal
	  rune_literal
	  nil
	  true
	  false
	  parenthesized_expression
	  literal_value)
 (func_literal parameter_list
	       parameter_list
	       type_identifier
	       qualified_type
	       pointer_type
	       struct_type
	       interface_type
	       array_type
	       slice_type
	       map_type
	       channel_type
	       function_type
	       block)
 (unary_expression unary_expression
		   binary_expression
		   selector_expression
		   index_expression
		   slice_expression
		   call_expression
		   type_assertion_expression
		   type_conversion_expression
		   identifier
		   identifier
		   composite_literal
		   func_literal
		   raw_string_literal
		   interpreted_string_literal
		   int_literal
		   float_literal
		   imaginary_literal
		   rune_literal
		   nil
		   true
		   false
		   parenthesized_expression)
 (binary_expression unary_expression
		    binary_expression
		    selector_expression
		    index_expression
		    slice_expression
		    call_expression
		    type_assertion_expression
		    type_conversion_expression
		    identifier
		    identifier
		    composite_literal
		    func_literal
		    raw_string_literal
		    interpreted_string_literal
		    int_literal
		    float_literal
		    imaginary_literal
		    rune_literal
		    nil
		    true
		    false
		    parenthesized_expression
		    unary_expression
		    binary_expression
		    selector_expression
		    index_expression
		    slice_expression
		    call_expression
		    type_assertion_expression
		    type_conversion_expression
		    identifier
		    identifier
		    composite_literal
		    func_literal
		    raw_string_literal
		    interpreted_string_literal
		    int_literal
		    float_literal
		    imaginary_literal
		    rune_literal
		    nil
		    true
		    false
		    parenthesized_expression
		    unary_expression
		    binary_expression
		    selector_expression
		    index_expression
		    slice_expression
		    call_expression
		    type_assertion_expression
		    type_conversion_expression
		    identifier
		    identifier
		    composite_literal
		    func_literal
		    raw_string_literal
		    interpreted_string_literal
		    int_literal
		    float_literal
		    imaginary_literal
		    rune_literal
		    nil
		    true
		    false
		    parenthesized_expression
		    unary_expression
		    binary_expression
		    selector_expression
		    index_expression
		    slice_expression
		    call_expression
		    type_assertion_expression
		    type_conversion_expression
		    identifier
		    identifier
		    composite_literal
		    func_literal
		    raw_string_literal
		    interpreted_string_literal
		    int_literal
		    float_literal
		    imaginary_literal
		    rune_literal
		    nil
		    true
		    false
		    parenthesized_expression
		    unary_expression
		    binary_expression
		    selector_expression
		    index_expression
		    slice_expression
		    call_expression
		    type_assertion_expression
		    type_conversion_expression
		    identifier
		    identifier
		    composite_literal
		    func_literal
		    raw_string_literal
		    interpreted_string_literal
		    int_literal
		    float_literal
		    imaginary_literal
		    rune_literal
		    nil
		    true
		    false
		    parenthesized_expression
		    unary_expression
		    binary_expression
		    selector_expression
		    index_expression
		    slice_expression
		    call_expression
		    type_assertion_expression
		    type_conversion_expression
		    identifier
		    identifier
		    composite_literal
		    func_literal
		    raw_string_literal
		    interpreted_string_literal
		    int_literal
		    float_literal
		    imaginary_literal
		    rune_literal
		    nil
		    true
		    false
		    parenthesized_expression
		    unary_expression
		    binary_expression
		    selector_expression
		    index_expression
		    slice_expression
		    call_expression
		    type_assertion_expression
		    type_conversion_expression
		    identifier
		    identifier
		    composite_literal
		    func_literal
		    raw_string_literal
		    interpreted_string_literal
		    int_literal
		    float_literal
		    imaginary_literal
		    rune_literal
		    nil
		    true
		    false
		    parenthesized_expression
		    unary_expression
		    binary_expression
		    selector_expression
		    index_expression
		    slice_expression
		    call_expression
		    type_assertion_expression
		    type_conversion_expression
		    identifier
		    identifier
		    composite_literal
		    func_literal
		    raw_string_literal
		    interpreted_string_literal
		    int_literal
		    float_literal
		    imaginary_literal
		    rune_literal
		    nil
		    true
		    false
		    parenthesized_expression
		    unary_expression
		    binary_expression
		    selector_expression
		    index_expression
		    slice_expression
		    call_expression
		    type_assertion_expression
		    type_conversion_expression
		    identifier
		    identifier
		    composite_literal
		    func_literal
		    raw_string_literal
		    interpreted_string_literal
		    int_literal
		    float_literal
		    imaginary_literal
		    rune_literal
		    nil
		    true
		    false
		    parenthesized_expression
		    unary_expression
		    binary_expression
		    selector_expression
		    index_expression
		    slice_expression
		    call_expression
		    type_assertion_expression
		    type_conversion_expression
		    identifier
		    identifier
		    composite_literal
		    func_literal
		    raw_string_literal
		    interpreted_string_literal
		    int_literal
		    float_literal
		    imaginary_literal
		    rune_literal
		    nil
		    true
		    false
		    parenthesized_expression)
 (qualified_type package_identifier type_identifier)
 (identifier)
 (_type_identifier type_identifier)
 (_field_identifier field_identifier)
 (_package_identifier package_identifier)
 (_string_literal raw_string_literal interpreted_string_literal)
 (raw_string_literal)
 (interpreted_string_literal escape_sequence)
 (escape_sequence)
 (int_literal)
 (float_literal)
 (imaginary_literal)
 (rune_literal)
 (nil)
 (true)
 (false)
 (comment))
)

(provide 'tree-edit-go-grammar)
;;; tree-edit-go-grammar.el ends here